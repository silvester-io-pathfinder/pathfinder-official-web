// ClassEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ClassEntity
    {
        public ClassEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32 baseHealth,
            global::StrawberryShake.EntityId perceptionProficiency,
            global::StrawberryShake.EntityId fortitudeProficiency,
            global::StrawberryShake.EntityId willProficiency,
            global::StrawberryShake.EntityId reflexProficiency,
            global::StrawberryShake.EntityId? classDcProficiency,
            global::StrawberryShake.EntityId simpleWeaponProficiency,
            global::StrawberryShake.EntityId martialWeaponProficiency,
            global::StrawberryShake.EntityId advancedWeaponProficiency,
            global::StrawberryShake.EntityId unarmedWeaponProficiency,
            global::StrawberryShake.EntityId lightArmorProficiency,
            global::StrawberryShake.EntityId mediumArmorProficiency,
            global::StrawberryShake.EntityId heavyArmorProficiency,
            global::StrawberryShake.EntityId unarmoredProficiency,
            global::StrawberryShake.EntityId? spellDcProficiency,
            global::StrawberryShake.EntityId? spellAttackProficiency,
            global::StrawberryShake.EntityId? predefinedMagicTradition,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> keyAbilities,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> mannerisms,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> characteristics,
            global::System.String duringCombatEncounters,
            global::System.String duringSocialEncounters,
            global::System.String whileExploring,
            global::System.String inDowntime)
        {
            Id = id;
            Name = name;
            Description = description;
            BaseHealth = baseHealth;
            PerceptionProficiency = perceptionProficiency;
            FortitudeProficiency = fortitudeProficiency;
            WillProficiency = willProficiency;
            ReflexProficiency = reflexProficiency;
            ClassDcProficiency = classDcProficiency;
            SimpleWeaponProficiency = simpleWeaponProficiency;
            MartialWeaponProficiency = martialWeaponProficiency;
            AdvancedWeaponProficiency = advancedWeaponProficiency;
            UnarmedWeaponProficiency = unarmedWeaponProficiency;
            LightArmorProficiency = lightArmorProficiency;
            MediumArmorProficiency = mediumArmorProficiency;
            HeavyArmorProficiency = heavyArmorProficiency;
            UnarmoredProficiency = unarmoredProficiency;
            SpellDcProficiency = spellDcProficiency;
            SpellAttackProficiency = spellAttackProficiency;
            PredefinedMagicTradition = predefinedMagicTradition;
            KeyAbilities = keyAbilities;
            Mannerisms = mannerisms;
            Characteristics = characteristics;
            DuringCombatEncounters = duringCombatEncounters;
            DuringSocialEncounters = duringSocialEncounters;
            WhileExploring = whileExploring;
            InDowntime = inDowntime;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::StrawberryShake.EntityId PerceptionProficiency { get; }

        public global::StrawberryShake.EntityId FortitudeProficiency { get; }

        public global::StrawberryShake.EntityId WillProficiency { get; }

        public global::StrawberryShake.EntityId ReflexProficiency { get; }

        public global::StrawberryShake.EntityId? ClassDcProficiency { get; }

        public global::StrawberryShake.EntityId SimpleWeaponProficiency { get; }

        public global::StrawberryShake.EntityId MartialWeaponProficiency { get; }

        public global::StrawberryShake.EntityId AdvancedWeaponProficiency { get; }

        public global::StrawberryShake.EntityId UnarmedWeaponProficiency { get; }

        public global::StrawberryShake.EntityId LightArmorProficiency { get; }

        public global::StrawberryShake.EntityId MediumArmorProficiency { get; }

        public global::StrawberryShake.EntityId HeavyArmorProficiency { get; }

        public global::StrawberryShake.EntityId UnarmoredProficiency { get; }

        public global::StrawberryShake.EntityId? SpellDcProficiency { get; }

        public global::StrawberryShake.EntityId? SpellAttackProficiency { get; }

        public global::StrawberryShake.EntityId? PredefinedMagicTradition { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> KeyAbilities { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Mannerisms { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Characteristics { get; }

        public global::System.String DuringCombatEncounters { get; }

        public global::System.String DuringSocialEncounters { get; }

        public global::System.String WhileExploring { get; }

        public global::System.String InDowntime { get; }
    }
}


// ProficiencyEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ProficiencyEntity
    {
        public ProficiencyEntity(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }
    }
}


// MagicTraditionEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicTraditionEntity
    {
        public MagicTraditionEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Spells { get; }
    }
}


// StatEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class StatEntity
    {
        public StatEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String abbreviation)
        {
            Id = id;
            Name = name;
            Abbreviation = abbreviation;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Abbreviation { get; }
    }
}


// ClassMannerismEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ClassMannerismEntity
    {
        public ClassMannerismEntity(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text { get; }
    }
}


// ClassCharacteristicEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ClassCharacteristicEntity
    {
        public ClassCharacteristicEntity(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text { get; }
    }
}


// DeityEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityEntity
    {
        public DeityEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::StrawberryShake.EntityId category,
            global::StrawberryShake.EntityId alignment,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> followerAlignments,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> divineFonts,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> domains)
        {
            Id = id;
            Name = name;
            Description = description;
            Category = category;
            Alignment = alignment;
            FollowerAlignments = followerAlignments;
            DivineFonts = divineFonts;
            Domains = domains;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::StrawberryShake.EntityId Category { get; }

        public global::StrawberryShake.EntityId Alignment { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> FollowerAlignments { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> DivineFonts { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Domains { get; }
    }
}


// DeityCategoryEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityCategoryEntity
    {
        public DeityCategoryEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> deities)
        {
            Id = id;
            Name = name;
            Description = description;
            Deities = deities;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Deities { get; }
    }
}


// AlignmentEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class AlignmentEntity
    {
        public AlignmentEntity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// DeityFollowerAlignmentEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityFollowerAlignmentEntity
    {
        public DeityFollowerAlignmentEntity(global::StrawberryShake.EntityId alignment)
        {
            Alignment = alignment;
        }

        public global::StrawberryShake.EntityId Alignment { get; }
    }
}


// DivineFontEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DivineFontEntity
    {
        public DivineFontEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> deities)
        {
            Id = id;
            Name = name;
            Description = description;
            Deities = deities;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Deities { get; }
    }
}


// DomainEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DomainEntity
    {
        public DomainEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// FeatEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatEntity
    {
        public FeatEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 level,
            global::System.String? special,
            global::System.String? trigger,
            global::StrawberryShake.EntityId? frequency,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> traits,
            global::StrawberryShake.EntityId? rollableEffect,
            global::System.Boolean canBeLearnedMoreThanOnce,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> details)
        {
            Id = id;
            Name = name;
            Level = level;
            Special = special;
            Trigger = trigger;
            Frequency = frequency;
            Traits = traits;
            RollableEffect = rollableEffect;
            CanBeLearnedMoreThanOnce = canBeLearnedMoreThanOnce;
            Details = details;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.String? Special { get; }

        public global::System.String? Trigger { get; }

        public global::StrawberryShake.EntityId? Frequency { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Traits { get; }

        public global::StrawberryShake.EntityId? RollableEffect { get; }

        public global::System.Boolean CanBeLearnedMoreThanOnce { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Details { get; }
    }
}


// FrequencyEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FrequencyEntity
    {
        public FrequencyEntity(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }
    }
}


// TraitEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class TraitEntity
    {
        public TraitEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> feats,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Feats = feats;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Feats { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Spells { get; }
    }
}


// RollableEffectEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RollableEffectEntity
    {
        public RollableEffectEntity(
            global::System.String? criticalSuccess,
            global::System.String? success,
            global::System.String? failure,
            global::System.String? criticalFailure)
        {
            CriticalSuccess = criticalSuccess;
            Success = success;
            Failure = failure;
            CriticalFailure = criticalFailure;
        }

        public global::System.String? CriticalSuccess { get; }

        public global::System.String? Success { get; }

        public global::System.String? Failure { get; }

        public global::System.String? CriticalFailure { get; }
    }
}


// FeatDetailsBlockEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatDetailsBlockEntity
    {
        public FeatDetailsBlockEntity(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text { get; }
    }
}


// LanguageEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageEntity
    {
        public LanguageEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> races,
            global::StrawberryShake.EntityId type)
        {
            Id = id;
            Name = name;
            Races = races;
            Type = type;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Races { get; }

        public global::StrawberryShake.EntityId Type { get; }
    }
}


// RaceEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceEntity
    {
        public RaceEntity(
            global::System.Guid id,
            global::System.String name,
            global::StrawberryShake.EntityId raceSize,
            global::StrawberryShake.EntityId raceRarity,
            global::System.Int32 baseSpeed,
            global::System.Int32 baseHealth,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> languages,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> raceTraits,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> heritages,
            global::StrawberryShake.EntityId size,
            global::StrawberryShake.EntityId rarity)
        {
            Id = id;
            Name = name;
            RaceSize = raceSize;
            RaceRarity = raceRarity;
            BaseSpeed = baseSpeed;
            BaseHealth = baseHealth;
            Languages = languages;
            RaceTraits = raceTraits;
            Heritages = heritages;
            Size = size;
            Rarity = rarity;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::StrawberryShake.EntityId RaceSize { get; }

        public global::StrawberryShake.EntityId RaceRarity { get; }

        public global::System.Int32 BaseSpeed { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Languages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> RaceTraits { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Heritages { get; }

        public global::StrawberryShake.EntityId Size { get; }

        public global::StrawberryShake.EntityId Rarity { get; }
    }
}


// LanguageTypeEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageTypeEntity
    {
        public LanguageTypeEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> languages)
        {
            Id = id;
            Name = name;
            Languages = languages;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Languages { get; }
    }
}


// SpellComponentEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellComponentEntity
    {
        public SpellComponentEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Spells { get; }
    }
}


// SpellEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellEntity
    {
        public SpellEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32 level,
            global::StrawberryShake.EntityId? rollableEffect,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> traditions,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> additionalDetails,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> components,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> traits,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> heightenings,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> triggers,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> requirements,
            global::System.Int32? range,
            global::System.TimeSpan? castTime,
            global::System.String? targets,
            global::System.Boolean isDismissable,
            global::System.String? area,
            global::System.String? duration,
            global::StrawberryShake.EntityId? savingThrowStat,
            global::StrawberryShake.EntityId? actionType,
            global::StrawberryShake.EntityId magicSchool,
            global::StrawberryShake.EntityId spellType)
        {
            Id = id;
            Name = name;
            Description = description;
            Level = level;
            RollableEffect = rollableEffect;
            Traditions = traditions;
            AdditionalDetails = additionalDetails;
            Components = components;
            Traits = traits;
            Heightenings = heightenings;
            Triggers = triggers;
            Requirements = requirements;
            Range = range;
            CastTime = castTime;
            Targets = targets;
            IsDismissable = isDismissable;
            Area = area;
            Duration = duration;
            SavingThrowStat = savingThrowStat;
            ActionType = actionType;
            MagicSchool = magicSchool;
            SpellType = spellType;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }

        public global::StrawberryShake.EntityId? RollableEffect { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Traditions { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> AdditionalDetails { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Components { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Traits { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Heightenings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Triggers { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Requirements { get; }

        public global::System.Int32? Range { get; }

        public global::System.TimeSpan? CastTime { get; }

        public global::System.String? Targets { get; }

        public global::System.Boolean IsDismissable { get; }

        public global::System.String? Area { get; }

        public global::System.String? Duration { get; }

        public global::StrawberryShake.EntityId? SavingThrowStat { get; }

        public global::StrawberryShake.EntityId? ActionType { get; }

        public global::StrawberryShake.EntityId MagicSchool { get; }

        public global::StrawberryShake.EntityId SpellType { get; }
    }
}


// MagicEssenceEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicEssenceEntity
    {
        public MagicEssenceEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// MagicSchoolEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicSchoolEntity
    {
        public MagicSchoolEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Spells { get; }
    }
}


// RaceSizeEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceSizeEntity
    {
        public RaceSizeEntity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// RaceRarityEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceRarityEntity
    {
        public RaceRarityEntity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// RaceTraitEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceTraitEntity
    {
        public RaceTraitEntity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// HeritageEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class HeritageEntity
    {
        public HeritageEntity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::StrawberryShake.EntityId rarity)
        {
            Id = id;
            Name = name;
            Description = description;
            Rarity = rarity;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::StrawberryShake.EntityId Rarity { get; }
    }
}


// HeritageRarityEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class HeritageRarityEntity
    {
        public HeritageRarityEntity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// SpellDetailBlockEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellDetailBlockEntity
    {
        public SpellDetailBlockEntity(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// SpellHeighteningEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellHeighteningEntity
    {
        public SpellHeighteningEntity(
            global::System.Guid id,
            global::System.Int32 level,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> details)
        {
            Id = id;
            Level = level;
            Description = description;
            Details = details;
        }

        public global::System.Guid Id { get; }

        public global::System.Int32 Level { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Details { get; }
    }
}


// SpellTriggerEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellTriggerEntity
    {
        public SpellTriggerEntity(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// SpellRequirementEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellRequirementEntity
    {
        public SpellRequirementEntity(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// SpellHeighteningDetailBlockEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellHeighteningDetailBlockEntity
    {
        public SpellHeighteningDetailBlockEntity(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// SavingThrowStatEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SavingThrowStatEntity
    {
        public SavingThrowStatEntity(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }
    }
}


// ActionTypeEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ActionTypeEntity
    {
        public ActionTypeEntity(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }
    }
}


// SpellTypeEntity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellTypeEntity
    {
        public SpellTypeEntity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// GetClassByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, GetClassById_Classes_Items_Class> _getClassById_Classes_Items_ClassFromClassEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_PerceptionProficiency_Proficiency> _getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_FortitudeProficiency_Proficiency> _getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_WillProficiency_Proficiency> _getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ReflexProficiency_Proficiency> _getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ClassDcProficiency_Proficiency> _getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency> _getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency> _getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency> _getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency> _getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_LightArmorProficiency_Proficiency> _getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MediumArmorProficiency_Proficiency> _getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency> _getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmoredProficiency_Proficiency> _getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellDcProficiency_Proficiency> _getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellAttackProficiency_Proficiency> _getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition> _getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity, GetClassById_Classes_Items_KeyAbilities_Stat> _getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity, GetClassById_Classes_Items_Mannerisms_ClassMannerism> _getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity, GetClassById_Classes_Items_Characteristics_ClassCharacteristic> _getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper;

        public GetClassByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, GetClassById_Classes_Items_Class> getClassById_Classes_Items_ClassFromClassEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_PerceptionProficiency_Proficiency> getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_FortitudeProficiency_Proficiency> getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_WillProficiency_Proficiency> getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ReflexProficiency_Proficiency> getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ClassDcProficiency_Proficiency> getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency> getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency> getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency> getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency> getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_LightArmorProficiency_Proficiency> getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MediumArmorProficiency_Proficiency> getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency> getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmoredProficiency_Proficiency> getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellDcProficiency_Proficiency> getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellAttackProficiency_Proficiency> getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition> getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity, GetClassById_Classes_Items_KeyAbilities_Stat> getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity, GetClassById_Classes_Items_Mannerisms_ClassMannerism> getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity, GetClassById_Classes_Items_Characteristics_ClassCharacteristic> getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getClassById_Classes_Items_ClassFromClassEntityMapper = getClassById_Classes_Items_ClassFromClassEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_ClassFromClassEntityMapper));
            _getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper = getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper));
            _getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper = getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper));
            _getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper = getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper));
            _getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper = getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult);

        public GetClassByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetClassByIdResultInfo info)
            {
                return new GetClassByIdResult(MapIGetClassById_Classes(
                    info.Classes,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetClassByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes? MapIGetClassById_Classes(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetClassById_Classes returnValue = default!;

            if (data?.__typename.Equals(
                    "ClassCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetClassById_Classes_ClassCollectionSegment(MapIGetClassById_Classes_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items?>? MapIGetClassById_Classes_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var classs = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                classs.Add(MapIGetClassById_Classes_Items(
                    child,
                    snapshot));
            }

            return classs;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items? MapIGetClassById_Classes_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Class",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_ClassFromClassEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PerceptionProficiency MapNonNullableIGetClassById_Classes_Items_PerceptionProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_FortitudeProficiency MapNonNullableIGetClassById_Classes_Items_FortitudeProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_WillProficiency MapNonNullableIGetClassById_Classes_Items_WillProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ReflexProficiency MapNonNullableIGetClassById_Classes_Items_ReflexProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ClassDcProficiency? MapIGetClassById_Classes_Items_ClassDcProficiency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SimpleWeaponProficiency MapNonNullableIGetClassById_Classes_Items_SimpleWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MartialWeaponProficiency MapNonNullableIGetClassById_Classes_Items_MartialWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_AdvancedWeaponProficiency MapNonNullableIGetClassById_Classes_Items_AdvancedWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmedWeaponProficiency MapNonNullableIGetClassById_Classes_Items_UnarmedWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_LightArmorProficiency MapNonNullableIGetClassById_Classes_Items_LightArmorProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MediumArmorProficiency MapNonNullableIGetClassById_Classes_Items_MediumArmorProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_HeavyArmorProficiency MapNonNullableIGetClassById_Classes_Items_HeavyArmorProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmoredProficiency MapNonNullableIGetClassById_Classes_Items_UnarmoredProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellDcProficiency? MapIGetClassById_Classes_Items_SpellDcProficiency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellAttackProficiency? MapIGetClassById_Classes_Items_SpellAttackProficiency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PredefinedMagicTradition? MapIGetClassById_Classes_Items_PredefinedMagicTradition(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities> MapNonNullableIGetClassById_Classes_Items_KeyAbilitiesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var stats = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                stats.Add(MapNonNullableIGetClassById_Classes_Items_KeyAbilities(
                    child,
                    snapshot));
            }

            return stats;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities MapNonNullableIGetClassById_Classes_Items_KeyAbilities(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Stat",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms> MapNonNullableIGetClassById_Classes_Items_MannerismsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var classMannerisms = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                classMannerisms.Add(MapNonNullableIGetClassById_Classes_Items_Mannerisms(
                    child,
                    snapshot));
            }

            return classMannerisms;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms MapNonNullableIGetClassById_Classes_Items_Mannerisms(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "ClassMannerism",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics> MapNonNullableIGetClassById_Classes_Items_CharacteristicsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var classCharacteristics = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                classCharacteristics.Add(MapNonNullableIGetClassById_Classes_Items_Characteristics(
                    child,
                    snapshot));
            }

            return classCharacteristics;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics MapNonNullableIGetClassById_Classes_Items_Characteristics(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "ClassCharacteristic",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetClassByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetClassByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? classes,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Classes = classes;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? Classes { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetClassByIdResultInfo(
                Classes,
                _entityIds,
                version);
        }
    }
}


// GetClassByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassByIdResult
        : global::System.IEquatable<GetClassByIdResult>
        , IGetClassByIdResult
    {
        public GetClassByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes? classes)
        {
            Classes = classes;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes? Classes { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassByIdResult)obj);
        }

        public global::System.Boolean Equals(GetClassByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Classes is null && other.Classes is null) ||Classes != null && Classes.Equals(other.Classes)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Classes is null))
                {
                    hash ^= 397 * Classes.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetClassById_Classes_ClassCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_ClassCollectionSegment
        : global::System.IEquatable<GetClassById_Classes_ClassCollectionSegment>
        , IGetClassById_Classes_ClassCollectionSegment
    {
        public GetClassById_Classes_ClassCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_ClassCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_ClassCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_ClassFromClassEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_ClassFromClassEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, GetClassById_Classes_Items_Class>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_PerceptionProficiency_Proficiency> _getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_FortitudeProficiency_Proficiency> _getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_WillProficiency_Proficiency> _getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ReflexProficiency_Proficiency> _getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ClassDcProficiency_Proficiency> _getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency> _getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency> _getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency> _getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency> _getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_LightArmorProficiency_Proficiency> _getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MediumArmorProficiency_Proficiency> _getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency> _getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmoredProficiency_Proficiency> _getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellDcProficiency_Proficiency> _getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellAttackProficiency_Proficiency> _getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition> _getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity, GetClassById_Classes_Items_KeyAbilities_Stat> _getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity, GetClassById_Classes_Items_Mannerisms_ClassMannerism> _getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity, GetClassById_Classes_Items_Characteristics_ClassCharacteristic> _getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper;

        public GetClassById_Classes_Items_ClassFromClassEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_PerceptionProficiency_Proficiency> getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_FortitudeProficiency_Proficiency> getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_WillProficiency_Proficiency> getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ReflexProficiency_Proficiency> getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ClassDcProficiency_Proficiency> getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency> getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency> getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency> getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency> getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_LightArmorProficiency_Proficiency> getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MediumArmorProficiency_Proficiency> getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency> getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmoredProficiency_Proficiency> getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellDcProficiency_Proficiency> getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellAttackProficiency_Proficiency> getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition> getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity, GetClassById_Classes_Items_KeyAbilities_Stat> getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity, GetClassById_Classes_Items_Mannerisms_ClassMannerism> getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity, GetClassById_Classes_Items_Characteristics_ClassCharacteristic> getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper = getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper));
            _getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper = getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper));
            _getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper = getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper));
            _getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper = getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper));
            _getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper = getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper));
        }

        public GetClassById_Classes_Items_Class Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetClassById_Classes_Items_Class(
                entity.Id,
                entity.Name,
                entity.Description,
                entity.BaseHealth,
                MapNonNullableIGetClassById_Classes_Items_PerceptionProficiency(
                    entity.PerceptionProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_FortitudeProficiency(
                    entity.FortitudeProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_WillProficiency(
                    entity.WillProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_ReflexProficiency(
                    entity.ReflexProficiency,
                    snapshot),
                MapIGetClassById_Classes_Items_ClassDcProficiency(
                    entity.ClassDcProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_SimpleWeaponProficiency(
                    entity.SimpleWeaponProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_MartialWeaponProficiency(
                    entity.MartialWeaponProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_AdvancedWeaponProficiency(
                    entity.AdvancedWeaponProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_UnarmedWeaponProficiency(
                    entity.UnarmedWeaponProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_LightArmorProficiency(
                    entity.LightArmorProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_MediumArmorProficiency(
                    entity.MediumArmorProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_HeavyArmorProficiency(
                    entity.HeavyArmorProficiency,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_UnarmoredProficiency(
                    entity.UnarmoredProficiency,
                    snapshot),
                MapIGetClassById_Classes_Items_SpellDcProficiency(
                    entity.SpellDcProficiency,
                    snapshot),
                MapIGetClassById_Classes_Items_SpellAttackProficiency(
                    entity.SpellAttackProficiency,
                    snapshot),
                MapIGetClassById_Classes_Items_PredefinedMagicTradition(
                    entity.PredefinedMagicTradition,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_KeyAbilitiesNonNullableArray(
                    entity.KeyAbilities,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_MannerismsNonNullableArray(
                    entity.Mannerisms,
                    snapshot),
                MapNonNullableIGetClassById_Classes_Items_CharacteristicsNonNullableArray(
                    entity.Characteristics,
                    snapshot),
                entity.DuringCombatEncounters,
                entity.DuringSocialEncounters,
                entity.WhileExploring,
                entity.InDowntime);
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PerceptionProficiency MapNonNullableIGetClassById_Classes_Items_PerceptionProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_FortitudeProficiency MapNonNullableIGetClassById_Classes_Items_FortitudeProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_WillProficiency MapNonNullableIGetClassById_Classes_Items_WillProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ReflexProficiency MapNonNullableIGetClassById_Classes_Items_ReflexProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ClassDcProficiency? MapIGetClassById_Classes_Items_ClassDcProficiency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SimpleWeaponProficiency MapNonNullableIGetClassById_Classes_Items_SimpleWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MartialWeaponProficiency MapNonNullableIGetClassById_Classes_Items_MartialWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_AdvancedWeaponProficiency MapNonNullableIGetClassById_Classes_Items_AdvancedWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmedWeaponProficiency MapNonNullableIGetClassById_Classes_Items_UnarmedWeaponProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_LightArmorProficiency MapNonNullableIGetClassById_Classes_Items_LightArmorProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MediumArmorProficiency MapNonNullableIGetClassById_Classes_Items_MediumArmorProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_HeavyArmorProficiency MapNonNullableIGetClassById_Classes_Items_HeavyArmorProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmoredProficiency MapNonNullableIGetClassById_Classes_Items_UnarmoredProficiency(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellDcProficiency? MapIGetClassById_Classes_Items_SpellDcProficiency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellAttackProficiency? MapIGetClassById_Classes_Items_SpellAttackProficiency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PredefinedMagicTradition? MapIGetClassById_Classes_Items_PredefinedMagicTradition(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities> MapNonNullableIGetClassById_Classes_Items_KeyAbilitiesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var stats = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                stats.Add(MapNonNullableIGetClassById_Classes_Items_KeyAbilities(
                    child,
                    snapshot));
            }

            return stats;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities MapNonNullableIGetClassById_Classes_Items_KeyAbilities(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Stat",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms> MapNonNullableIGetClassById_Classes_Items_MannerismsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var classMannerisms = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                classMannerisms.Add(MapNonNullableIGetClassById_Classes_Items_Mannerisms(
                    child,
                    snapshot));
            }

            return classMannerisms;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms MapNonNullableIGetClassById_Classes_Items_Mannerisms(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "ClassMannerism",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics> MapNonNullableIGetClassById_Classes_Items_CharacteristicsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var classCharacteristics = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                classCharacteristics.Add(MapNonNullableIGetClassById_Classes_Items_Characteristics(
                    child,
                    snapshot));
            }

            return classCharacteristics;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics MapNonNullableIGetClassById_Classes_Items_Characteristics(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "ClassCharacteristic",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetClassById_Classes_Items_Class.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_Class
        : global::System.IEquatable<GetClassById_Classes_Items_Class>
        , IGetClassById_Classes_Items_Class
    {
        public GetClassById_Classes_Items_Class(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32 baseHealth,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PerceptionProficiency perceptionProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_FortitudeProficiency fortitudeProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_WillProficiency willProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ReflexProficiency reflexProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ClassDcProficiency? classDcProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SimpleWeaponProficiency simpleWeaponProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MartialWeaponProficiency martialWeaponProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_AdvancedWeaponProficiency advancedWeaponProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmedWeaponProficiency unarmedWeaponProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_LightArmorProficiency lightArmorProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MediumArmorProficiency mediumArmorProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_HeavyArmorProficiency heavyArmorProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmoredProficiency unarmoredProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellDcProficiency? spellDcProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellAttackProficiency? spellAttackProficiency,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PredefinedMagicTradition? predefinedMagicTradition,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities> keyAbilities,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms> mannerisms,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics> characteristics,
            global::System.String duringCombatEncounters,
            global::System.String duringSocialEncounters,
            global::System.String whileExploring,
            global::System.String inDowntime)
        {
            Id = id;
            Name = name;
            Description = description;
            BaseHealth = baseHealth;
            PerceptionProficiency = perceptionProficiency;
            FortitudeProficiency = fortitudeProficiency;
            WillProficiency = willProficiency;
            ReflexProficiency = reflexProficiency;
            ClassDcProficiency = classDcProficiency;
            SimpleWeaponProficiency = simpleWeaponProficiency;
            MartialWeaponProficiency = martialWeaponProficiency;
            AdvancedWeaponProficiency = advancedWeaponProficiency;
            UnarmedWeaponProficiency = unarmedWeaponProficiency;
            LightArmorProficiency = lightArmorProficiency;
            MediumArmorProficiency = mediumArmorProficiency;
            HeavyArmorProficiency = heavyArmorProficiency;
            UnarmoredProficiency = unarmoredProficiency;
            SpellDcProficiency = spellDcProficiency;
            SpellAttackProficiency = spellAttackProficiency;
            PredefinedMagicTradition = predefinedMagicTradition;
            KeyAbilities = keyAbilities;
            Mannerisms = mannerisms;
            Characteristics = characteristics;
            DuringCombatEncounters = duringCombatEncounters;
            DuringSocialEncounters = duringSocialEncounters;
            WhileExploring = whileExploring;
            InDowntime = inDowntime;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PerceptionProficiency PerceptionProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_FortitudeProficiency FortitudeProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_WillProficiency WillProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ReflexProficiency ReflexProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ClassDcProficiency? ClassDcProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SimpleWeaponProficiency SimpleWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MartialWeaponProficiency MartialWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_AdvancedWeaponProficiency AdvancedWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmedWeaponProficiency UnarmedWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_LightArmorProficiency LightArmorProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MediumArmorProficiency MediumArmorProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_HeavyArmorProficiency HeavyArmorProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmoredProficiency UnarmoredProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellDcProficiency? SpellDcProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellAttackProficiency? SpellAttackProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PredefinedMagicTradition? PredefinedMagicTradition { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities> KeyAbilities { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms> Mannerisms { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics> Characteristics { get; }

        public global::System.String DuringCombatEncounters { get; }

        public global::System.String DuringSocialEncounters { get; }

        public global::System.String WhileExploring { get; }

        public global::System.String InDowntime { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_Class)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_Class? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && BaseHealth == other.BaseHealth
                && PerceptionProficiency.Equals(other.PerceptionProficiency)
                && FortitudeProficiency.Equals(other.FortitudeProficiency)
                && WillProficiency.Equals(other.WillProficiency)
                && ReflexProficiency.Equals(other.ReflexProficiency)
                && ((ClassDcProficiency is null && other.ClassDcProficiency is null) ||ClassDcProficiency != null && ClassDcProficiency.Equals(other.ClassDcProficiency))
                && SimpleWeaponProficiency.Equals(other.SimpleWeaponProficiency)
                && MartialWeaponProficiency.Equals(other.MartialWeaponProficiency)
                && AdvancedWeaponProficiency.Equals(other.AdvancedWeaponProficiency)
                && UnarmedWeaponProficiency.Equals(other.UnarmedWeaponProficiency)
                && LightArmorProficiency.Equals(other.LightArmorProficiency)
                && MediumArmorProficiency.Equals(other.MediumArmorProficiency)
                && HeavyArmorProficiency.Equals(other.HeavyArmorProficiency)
                && UnarmoredProficiency.Equals(other.UnarmoredProficiency)
                && ((SpellDcProficiency is null && other.SpellDcProficiency is null) ||SpellDcProficiency != null && SpellDcProficiency.Equals(other.SpellDcProficiency))
                && ((SpellAttackProficiency is null && other.SpellAttackProficiency is null) ||SpellAttackProficiency != null && SpellAttackProficiency.Equals(other.SpellAttackProficiency))
                && ((PredefinedMagicTradition is null && other.PredefinedMagicTradition is null) ||PredefinedMagicTradition != null && PredefinedMagicTradition.Equals(other.PredefinedMagicTradition))
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        KeyAbilities,
                        other.KeyAbilities)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Mannerisms,
                        other.Mannerisms)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Characteristics,
                        other.Characteristics)
                && DuringCombatEncounters.Equals(other.DuringCombatEncounters)
                && DuringSocialEncounters.Equals(other.DuringSocialEncounters)
                && WhileExploring.Equals(other.WhileExploring)
                && InDowntime.Equals(other.InDowntime);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                hash ^= 397 * BaseHealth.GetHashCode();

                hash ^= 397 * PerceptionProficiency.GetHashCode();

                hash ^= 397 * FortitudeProficiency.GetHashCode();

                hash ^= 397 * WillProficiency.GetHashCode();

                hash ^= 397 * ReflexProficiency.GetHashCode();

                if (!(ClassDcProficiency is null))
                {
                    hash ^= 397 * ClassDcProficiency.GetHashCode();
                }

                hash ^= 397 * SimpleWeaponProficiency.GetHashCode();

                hash ^= 397 * MartialWeaponProficiency.GetHashCode();

                hash ^= 397 * AdvancedWeaponProficiency.GetHashCode();

                hash ^= 397 * UnarmedWeaponProficiency.GetHashCode();

                hash ^= 397 * LightArmorProficiency.GetHashCode();

                hash ^= 397 * MediumArmorProficiency.GetHashCode();

                hash ^= 397 * HeavyArmorProficiency.GetHashCode();

                hash ^= 397 * UnarmoredProficiency.GetHashCode();

                if (!(SpellDcProficiency is null))
                {
                    hash ^= 397 * SpellDcProficiency.GetHashCode();
                }

                if (!(SpellAttackProficiency is null))
                {
                    hash ^= 397 * SpellAttackProficiency.GetHashCode();
                }

                if (!(PredefinedMagicTradition is null))
                {
                    hash ^= 397 * PredefinedMagicTradition.GetHashCode();
                }

                foreach (var KeyAbilities_elm in KeyAbilities)
                {
                    hash ^= 397 * KeyAbilities_elm.GetHashCode();
                }

                foreach (var Mannerisms_elm in Mannerisms)
                {
                    hash ^= 397 * Mannerisms_elm.GetHashCode();
                }

                foreach (var Characteristics_elm in Characteristics)
                {
                    hash ^= 397 * Characteristics_elm.GetHashCode();
                }

                hash ^= 397 * DuringCombatEncounters.GetHashCode();

                hash ^= 397 * DuringSocialEncounters.GetHashCode();

                hash ^= 397 * WhileExploring.GetHashCode();

                hash ^= 397 * InDowntime.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_PerceptionProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_PerceptionProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_PerceptionProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_PerceptionProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_PerceptionProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_PerceptionProficiency_Proficiency>
        , IGetClassById_Classes_Items_PerceptionProficiency_Proficiency
    {
        public GetClassById_Classes_Items_PerceptionProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_PerceptionProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_PerceptionProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_FortitudeProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_FortitudeProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_FortitudeProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_FortitudeProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_FortitudeProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_FortitudeProficiency_Proficiency>
        , IGetClassById_Classes_Items_FortitudeProficiency_Proficiency
    {
        public GetClassById_Classes_Items_FortitudeProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_FortitudeProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_FortitudeProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_WillProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_WillProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_WillProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_WillProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_WillProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_WillProficiency_Proficiency>
        , IGetClassById_Classes_Items_WillProficiency_Proficiency
    {
        public GetClassById_Classes_Items_WillProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_WillProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_WillProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ReflexProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_ReflexProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_ReflexProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_ReflexProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_ReflexProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_ReflexProficiency_Proficiency>
        , IGetClassById_Classes_Items_ReflexProficiency_Proficiency
    {
        public GetClassById_Classes_Items_ReflexProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_ReflexProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_ReflexProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_ClassDcProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_ClassDcProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_ClassDcProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_ClassDcProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_ClassDcProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_ClassDcProficiency_Proficiency>
        , IGetClassById_Classes_Items_ClassDcProficiency_Proficiency
    {
        public GetClassById_Classes_Items_ClassDcProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_ClassDcProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_ClassDcProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency>
        , IGetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency
    {
        public GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency>
        , IGetClassById_Classes_Items_MartialWeaponProficiency_Proficiency
    {
        public GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency>
        , IGetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency
    {
        public GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency>
        , IGetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency
    {
        public GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_LightArmorProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_LightArmorProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_LightArmorProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_LightArmorProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_LightArmorProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_LightArmorProficiency_Proficiency>
        , IGetClassById_Classes_Items_LightArmorProficiency_Proficiency
    {
        public GetClassById_Classes_Items_LightArmorProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_LightArmorProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_LightArmorProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_MediumArmorProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_MediumArmorProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_MediumArmorProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_MediumArmorProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_MediumArmorProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_MediumArmorProficiency_Proficiency>
        , IGetClassById_Classes_Items_MediumArmorProficiency_Proficiency
    {
        public GetClassById_Classes_Items_MediumArmorProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_MediumArmorProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_MediumArmorProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency>
        , IGetClassById_Classes_Items_HeavyArmorProficiency_Proficiency
    {
        public GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_UnarmoredProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_UnarmoredProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_UnarmoredProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_UnarmoredProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_UnarmoredProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_UnarmoredProficiency_Proficiency>
        , IGetClassById_Classes_Items_UnarmoredProficiency_Proficiency
    {
        public GetClassById_Classes_Items_UnarmoredProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_UnarmoredProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_UnarmoredProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellDcProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_SpellDcProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_SpellDcProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_SpellDcProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_SpellDcProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_SpellDcProficiency_Proficiency>
        , IGetClassById_Classes_Items_SpellDcProficiency_Proficiency
    {
        public GetClassById_Classes_Items_SpellDcProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_SpellDcProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_SpellDcProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, GetClassById_Classes_Items_SpellAttackProficiency_Proficiency>
    {
        public GetClassById_Classes_Items_SpellAttackProficiency_Proficiency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_SpellAttackProficiency_Proficiency(entity.Name);
        }
    }
}


// GetClassById_Classes_Items_SpellAttackProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_SpellAttackProficiency_Proficiency
        : global::System.IEquatable<GetClassById_Classes_Items_SpellAttackProficiency_Proficiency>
        , IGetClassById_Classes_Items_SpellAttackProficiency_Proficiency
    {
        public GetClassById_Classes_Items_SpellAttackProficiency_Proficiency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_SpellAttackProficiency_Proficiency)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_SpellAttackProficiency_Proficiency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition>
    {
        public GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition(
                entity.Id,
                entity.Name);
        }
    }
}


// GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition
        : global::System.IEquatable<GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition>
        , IGetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition
    {
        public GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity, GetClassById_Classes_Items_KeyAbilities_Stat>
    {
        public GetClassById_Classes_Items_KeyAbilities_Stat Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_KeyAbilities_Stat(
                entity.Id,
                entity.Name,
                entity.Abbreviation);
        }
    }
}


// GetClassById_Classes_Items_KeyAbilities_Stat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_KeyAbilities_Stat
        : global::System.IEquatable<GetClassById_Classes_Items_KeyAbilities_Stat>
        , IGetClassById_Classes_Items_KeyAbilities_Stat
    {
        public GetClassById_Classes_Items_KeyAbilities_Stat(
            global::System.Guid id,
            global::System.String name,
            global::System.String abbreviation)
        {
            Id = id;
            Name = name;
            Abbreviation = abbreviation;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Abbreviation { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_KeyAbilities_Stat)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_KeyAbilities_Stat? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Abbreviation.Equals(other.Abbreviation);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Abbreviation.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity, GetClassById_Classes_Items_Mannerisms_ClassMannerism>
    {
        public GetClassById_Classes_Items_Mannerisms_ClassMannerism Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_Mannerisms_ClassMannerism(entity.Text);
        }
    }
}


// GetClassById_Classes_Items_Mannerisms_ClassMannerism.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_Mannerisms_ClassMannerism
        : global::System.IEquatable<GetClassById_Classes_Items_Mannerisms_ClassMannerism>
        , IGetClassById_Classes_Items_Mannerisms_ClassMannerism
    {
        public GetClassById_Classes_Items_Mannerisms_ClassMannerism(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_Mannerisms_ClassMannerism)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_Mannerisms_ClassMannerism? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Text.Equals(other.Text));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// GetClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity, GetClassById_Classes_Items_Characteristics_ClassCharacteristic>
    {
        public GetClassById_Classes_Items_Characteristics_ClassCharacteristic Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassById_Classes_Items_Characteristics_ClassCharacteristic(entity.Text);
        }
    }
}


// GetClassById_Classes_Items_Characteristics_ClassCharacteristic.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassById_Classes_Items_Characteristics_ClassCharacteristic
        : global::System.IEquatable<GetClassById_Classes_Items_Characteristics_ClassCharacteristic>
        , IGetClassById_Classes_Items_Characteristics_ClassCharacteristic
    {
        public GetClassById_Classes_Items_Characteristics_ClassCharacteristic(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassById_Classes_Items_Characteristics_ClassCharacteristic)obj);
        }

        public global::System.Boolean Equals(GetClassById_Classes_Items_Characteristics_ClassCharacteristic? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Text.Equals(other.Text));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetClassByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes? Classes { get; }
    }
}


// IGetClassById_Classes.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items?>? Items { get; }
    }
}


// IGetClassById_Classes_ClassCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_ClassCollectionSegment
        : IGetClassById_Classes
    {
    }
}


// IGetClassById_Classes_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PerceptionProficiency PerceptionProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_FortitudeProficiency FortitudeProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_WillProficiency WillProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ReflexProficiency ReflexProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_ClassDcProficiency? ClassDcProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SimpleWeaponProficiency SimpleWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MartialWeaponProficiency MartialWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_AdvancedWeaponProficiency AdvancedWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmedWeaponProficiency UnarmedWeaponProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_LightArmorProficiency LightArmorProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_MediumArmorProficiency MediumArmorProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_HeavyArmorProficiency HeavyArmorProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_UnarmoredProficiency UnarmoredProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellDcProficiency? SpellDcProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_SpellAttackProficiency? SpellAttackProficiency { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_PredefinedMagicTradition? PredefinedMagicTradition { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_KeyAbilities> KeyAbilities { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Mannerisms> Mannerisms { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassById_Classes_Items_Characteristics> Characteristics { get; }

        public global::System.String DuringCombatEncounters { get; }

        public global::System.String DuringSocialEncounters { get; }

        public global::System.String WhileExploring { get; }

        public global::System.String InDowntime { get; }
    }
}


// IGetClassById_Classes_Items_Class.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_Class
        : IGetClassById_Classes_Items
    {
    }
}


// IGetClassById_Classes_Items_PerceptionProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_PerceptionProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_PerceptionProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_PerceptionProficiency_Proficiency
        : IGetClassById_Classes_Items_PerceptionProficiency
    {
    }
}


// IGetClassById_Classes_Items_FortitudeProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_FortitudeProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_FortitudeProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_FortitudeProficiency_Proficiency
        : IGetClassById_Classes_Items_FortitudeProficiency
    {
    }
}


// IGetClassById_Classes_Items_WillProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_WillProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_WillProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_WillProficiency_Proficiency
        : IGetClassById_Classes_Items_WillProficiency
    {
    }
}


// IGetClassById_Classes_Items_ReflexProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_ReflexProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_ReflexProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_ReflexProficiency_Proficiency
        : IGetClassById_Classes_Items_ReflexProficiency
    {
    }
}


// IGetClassById_Classes_Items_ClassDcProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_ClassDcProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_ClassDcProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_ClassDcProficiency_Proficiency
        : IGetClassById_Classes_Items_ClassDcProficiency
    {
    }
}


// IGetClassById_Classes_Items_SimpleWeaponProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_SimpleWeaponProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency
        : IGetClassById_Classes_Items_SimpleWeaponProficiency
    {
    }
}


// IGetClassById_Classes_Items_MartialWeaponProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_MartialWeaponProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_MartialWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_MartialWeaponProficiency_Proficiency
        : IGetClassById_Classes_Items_MartialWeaponProficiency
    {
    }
}


// IGetClassById_Classes_Items_AdvancedWeaponProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_AdvancedWeaponProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency
        : IGetClassById_Classes_Items_AdvancedWeaponProficiency
    {
    }
}


// IGetClassById_Classes_Items_UnarmedWeaponProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_UnarmedWeaponProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency
        : IGetClassById_Classes_Items_UnarmedWeaponProficiency
    {
    }
}


// IGetClassById_Classes_Items_LightArmorProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_LightArmorProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_LightArmorProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_LightArmorProficiency_Proficiency
        : IGetClassById_Classes_Items_LightArmorProficiency
    {
    }
}


// IGetClassById_Classes_Items_MediumArmorProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_MediumArmorProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_MediumArmorProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_MediumArmorProficiency_Proficiency
        : IGetClassById_Classes_Items_MediumArmorProficiency
    {
    }
}


// IGetClassById_Classes_Items_HeavyArmorProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_HeavyArmorProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_HeavyArmorProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_HeavyArmorProficiency_Proficiency
        : IGetClassById_Classes_Items_HeavyArmorProficiency
    {
    }
}


// IGetClassById_Classes_Items_UnarmoredProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_UnarmoredProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_UnarmoredProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_UnarmoredProficiency_Proficiency
        : IGetClassById_Classes_Items_UnarmoredProficiency
    {
    }
}


// IGetClassById_Classes_Items_SpellDcProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_SpellDcProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_SpellDcProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_SpellDcProficiency_Proficiency
        : IGetClassById_Classes_Items_SpellDcProficiency
    {
    }
}


// IGetClassById_Classes_Items_SpellAttackProficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_SpellAttackProficiency
    {
        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_SpellAttackProficiency_Proficiency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_SpellAttackProficiency_Proficiency
        : IGetClassById_Classes_Items_SpellAttackProficiency
    {
    }
}


// IGetClassById_Classes_Items_PredefinedMagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_PredefinedMagicTradition
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition
        : IGetClassById_Classes_Items_PredefinedMagicTradition
    {
    }
}


// IGetClassById_Classes_Items_KeyAbilities.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_KeyAbilities
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Abbreviation { get; }
    }
}


// IGetClassById_Classes_Items_KeyAbilities_Stat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_KeyAbilities_Stat
        : IGetClassById_Classes_Items_KeyAbilities
    {
    }
}


// IGetClassById_Classes_Items_Mannerisms.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_Mannerisms
    {
        public global::System.String Text { get; }
    }
}


// IGetClassById_Classes_Items_Mannerisms_ClassMannerism.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_Mannerisms_ClassMannerism
        : IGetClassById_Classes_Items_Mannerisms
    {
    }
}


// IGetClassById_Classes_Items_Characteristics.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_Characteristics
    {
        public global::System.String Text { get; }
    }
}


// IGetClassById_Classes_Items_Characteristics_ClassCharacteristic.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassById_Classes_Items_Characteristics_ClassCharacteristic
        : IGetClassById_Classes_Items_Characteristics
    {
    }
}


// GetClassesPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, GetClassesPage_Classes_Items_Class> _getClassesPage_Classes_Items_ClassFromClassEntityMapper;

        public GetClassesPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, GetClassesPage_Classes_Items_Class> getClassesPage_Classes_Items_ClassFromClassEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getClassesPage_Classes_Items_ClassFromClassEntityMapper = getClassesPage_Classes_Items_ClassFromClassEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getClassesPage_Classes_Items_ClassFromClassEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult);

        public GetClassesPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetClassesPageResultInfo info)
            {
                return new GetClassesPageResult(MapIGetClassesPage_Classes(
                    info.Classes,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetClassesPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes? MapIGetClassesPage_Classes(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetClassesPage_Classes returnValue = default!;

            if (data?.__typename.Equals(
                    "ClassCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetClassesPage_Classes_ClassCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetClassesPage_Classes_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes_Items?>? MapIGetClassesPage_Classes_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var classs = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                classs.Add(MapIGetClassesPage_Classes_Items(
                    child,
                    snapshot));
            }

            return classs;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes_Items? MapIGetClassesPage_Classes_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Class",
                    global::System.StringComparison.Ordinal))
            {
                return _getClassesPage_Classes_Items_ClassFromClassEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetClassesPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetClassesPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? classes,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Classes = classes;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? Classes { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetClassesPageResultInfo(
                Classes,
                _entityIds,
                version);
        }
    }
}


// GetClassesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPageResult
        : global::System.IEquatable<GetClassesPageResult>
        , IGetClassesPageResult
    {
        public GetClassesPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes? classes)
        {
            Classes = classes;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes? Classes { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassesPageResult)obj);
        }

        public global::System.Boolean Equals(GetClassesPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Classes is null && other.Classes is null) ||Classes != null && Classes.Equals(other.Classes)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Classes is null))
                {
                    hash ^= 397 * Classes.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetClassesPage_Classes_ClassCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPage_Classes_ClassCollectionSegment
        : global::System.IEquatable<GetClassesPage_Classes_ClassCollectionSegment>
        , IGetClassesPage_Classes_ClassCollectionSegment
    {
        public GetClassesPage_Classes_ClassCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassesPage_Classes_ClassCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetClassesPage_Classes_ClassCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetClassesPage_Classes_Items_ClassFromClassEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPage_Classes_Items_ClassFromClassEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, GetClassesPage_Classes_Items_Class>
    {
        public GetClassesPage_Classes_Items_Class Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetClassesPage_Classes_Items_Class(
                entity.Id,
                entity.Name,
                entity.BaseHealth,
                entity.Description);
        }
    }
}


// GetClassesPage_Classes_Items_Class.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPage_Classes_Items_Class
        : global::System.IEquatable<GetClassesPage_Classes_Items_Class>
        , IGetClassesPage_Classes_Items_Class
    {
        public GetClassesPage_Classes_Items_Class(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 baseHealth,
            global::System.String description)
        {
            Id = id;
            Name = name;
            BaseHealth = baseHealth;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetClassesPage_Classes_Items_Class)obj);
        }

        public global::System.Boolean Equals(GetClassesPage_Classes_Items_Class? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && BaseHealth == other.BaseHealth
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * BaseHealth.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetClassesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassesPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes? Classes { get; }
    }
}


// IGetClassesPage_Classes.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassesPage_Classes
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPage_Classes_Items?>? Items { get; }
    }
}


// IGetClassesPage_Classes_ClassCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassesPage_Classes_ClassCollectionSegment
        : IGetClassesPage_Classes
    {
    }
}


// IGetClassesPage_Classes_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassesPage_Classes_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::System.String Description { get; }
    }
}


// IGetClassesPage_Classes_Items_Class.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetClassesPage_Classes_Items_Class
        : IGetClassesPage_Classes_Items
    {
    }
}


// GetDeitiesPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeitiesPage_Deities_Items_Deity> _getDeitiesPage_Deities_Items_DeityFromDeityEntityMapper;

        public GetDeitiesPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeitiesPage_Deities_Items_Deity> getDeitiesPage_Deities_Items_DeityFromDeityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeitiesPage_Deities_Items_DeityFromDeityEntityMapper = getDeitiesPage_Deities_Items_DeityFromDeityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeitiesPage_Deities_Items_DeityFromDeityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult);

        public GetDeitiesPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDeitiesPageResultInfo info)
            {
                return new GetDeitiesPageResult(MapIGetDeitiesPage_Deities(
                    info.Deities,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetDeitiesPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities? MapIGetDeitiesPage_Deities(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDeitiesPage_Deities returnValue = default!;

            if (data?.__typename.Equals(
                    "DeityCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDeitiesPage_Deities_DeityCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetDeitiesPage_Deities_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities_Items?>? MapIGetDeitiesPage_Deities_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var deitys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                deitys.Add(MapIGetDeitiesPage_Deities_Items(
                    child,
                    snapshot));
            }

            return deitys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities_Items? MapIGetDeitiesPage_Deities_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeitiesPage_Deities_Items_DeityFromDeityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetDeitiesPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetDeitiesPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? deities,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Deities = deities;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? Deities { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDeitiesPageResultInfo(
                Deities,
                _entityIds,
                version);
        }
    }
}


// GetDeitiesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPageResult
        : global::System.IEquatable<GetDeitiesPageResult>
        , IGetDeitiesPageResult
    {
        public GetDeitiesPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities? deities)
        {
            Deities = deities;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities? Deities { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeitiesPageResult)obj);
        }

        public global::System.Boolean Equals(GetDeitiesPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Deities is null && other.Deities is null) ||Deities != null && Deities.Equals(other.Deities)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Deities is null))
                {
                    hash ^= 397 * Deities.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDeitiesPage_Deities_DeityCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPage_Deities_DeityCollectionSegment
        : global::System.IEquatable<GetDeitiesPage_Deities_DeityCollectionSegment>
        , IGetDeitiesPage_Deities_DeityCollectionSegment
    {
        public GetDeitiesPage_Deities_DeityCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeitiesPage_Deities_DeityCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetDeitiesPage_Deities_DeityCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetDeitiesPage_Deities_Items_DeityFromDeityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPage_Deities_Items_DeityFromDeityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeitiesPage_Deities_Items_Deity>
    {
        public GetDeitiesPage_Deities_Items_Deity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeitiesPage_Deities_Items_Deity(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetDeitiesPage_Deities_Items_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPage_Deities_Items_Deity
        : global::System.IEquatable<GetDeitiesPage_Deities_Items_Deity>
        , IGetDeitiesPage_Deities_Items_Deity
    {
        public GetDeitiesPage_Deities_Items_Deity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeitiesPage_Deities_Items_Deity)obj);
        }

        public global::System.Boolean Equals(GetDeitiesPage_Deities_Items_Deity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetDeitiesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeitiesPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities? Deities { get; }
    }
}


// IGetDeitiesPage_Deities.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeitiesPage_Deities
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPage_Deities_Items?>? Items { get; }
    }
}


// IGetDeitiesPage_Deities_DeityCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeitiesPage_Deities_DeityCollectionSegment
        : IGetDeitiesPage_Deities
    {
    }
}


// IGetDeitiesPage_Deities_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeitiesPage_Deities_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetDeitiesPage_Deities_Items_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeitiesPage_Deities_Items_Deity
        : IGetDeitiesPage_Deities_Items
    {
    }
}


// GetDeityByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityById_Deities_Items_Deity> _getDeityById_Deities_Items_DeityFromDeityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityById_Deities_Items_Category_DeityCategory> _getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_Alignment_Alignment> _getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment> _getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment> _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDeityById_Deities_Items_DivineFonts_DivineFont> _getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity, GetDeityById_Deities_Items_Domains_Domain> _getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper;

        public GetDeityByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityById_Deities_Items_Deity> getDeityById_Deities_Items_DeityFromDeityEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityById_Deities_Items_Category_DeityCategory> getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_Alignment_Alignment> getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment> getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment> getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDeityById_Deities_Items_DivineFonts_DivineFont> getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity, GetDeityById_Deities_Items_Domains_Domain> getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeityById_Deities_Items_DeityFromDeityEntityMapper = getDeityById_Deities_Items_DeityFromDeityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_DeityFromDeityEntityMapper));
            _getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper = getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper));
            _getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper = getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper));
            _getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper = getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper));
            _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper = getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper));
            _getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper = getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper));
            _getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper = getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult);

        public GetDeityByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDeityByIdResultInfo info)
            {
                return new GetDeityByIdResult(MapIGetDeityById_Deities(
                    info.Deities,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetDeityByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities? MapIGetDeityById_Deities(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDeityById_Deities returnValue = default!;

            if (data?.__typename.Equals(
                    "DeityCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDeityById_Deities_DeityCollectionSegment(MapIGetDeityById_Deities_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items?>? MapIGetDeityById_Deities_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var deitys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                deitys.Add(MapIGetDeityById_Deities_Items(
                    child,
                    snapshot));
            }

            return deitys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items? MapIGetDeityById_Deities_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_DeityFromDeityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Category MapNonNullableIGetDeityById_Deities_Items_Category(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Alignment MapNonNullableIGetDeityById_Deities_Items_Alignment(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments> MapNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var deityFollowerAlignments = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                deityFollowerAlignments.Add(MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments(
                    child,
                    snapshot));
            }

            return deityFollowerAlignments;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "DeityFollowerAlignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments_Alignment MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments_Alignment(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts> MapNonNullableIGetDeityById_Deities_Items_DivineFontsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var divineFonts = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                divineFonts.Add(MapNonNullableIGetDeityById_Deities_Items_DivineFonts(
                    child,
                    snapshot));
            }

            return divineFonts;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts MapNonNullableIGetDeityById_Deities_Items_DivineFonts(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "DivineFont",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains> MapNonNullableIGetDeityById_Deities_Items_DomainsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var domains = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                domains.Add(MapNonNullableIGetDeityById_Deities_Items_Domains(
                    child,
                    snapshot));
            }

            return domains;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains MapNonNullableIGetDeityById_Deities_Items_Domains(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Domain",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetDeityByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetDeityByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? deities,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Deities = deities;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? Deities { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDeityByIdResultInfo(
                Deities,
                _entityIds,
                version);
        }
    }
}


// GetDeityByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityByIdResult
        : global::System.IEquatable<GetDeityByIdResult>
        , IGetDeityByIdResult
    {
        public GetDeityByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities? deities)
        {
            Deities = deities;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities? Deities { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityByIdResult)obj);
        }

        public global::System.Boolean Equals(GetDeityByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Deities is null && other.Deities is null) ||Deities != null && Deities.Equals(other.Deities)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Deities is null))
                {
                    hash ^= 397 * Deities.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_DeityCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_DeityCollectionSegment
        : global::System.IEquatable<GetDeityById_Deities_DeityCollectionSegment>
        , IGetDeityById_Deities_DeityCollectionSegment
    {
        public GetDeityById_Deities_DeityCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_DeityCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_DeityCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_DeityFromDeityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_DeityFromDeityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityById_Deities_Items_Deity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityById_Deities_Items_Category_DeityCategory> _getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_Alignment_Alignment> _getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment> _getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment> _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDeityById_Deities_Items_DivineFonts_DivineFont> _getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity, GetDeityById_Deities_Items_Domains_Domain> _getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper;

        public GetDeityById_Deities_Items_DeityFromDeityEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityById_Deities_Items_Category_DeityCategory> getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_Alignment_Alignment> getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment> getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment> getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDeityById_Deities_Items_DivineFonts_DivineFont> getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity, GetDeityById_Deities_Items_Domains_Domain> getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper = getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper));
            _getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper = getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper));
            _getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper = getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper));
            _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper = getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper));
            _getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper = getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper));
            _getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper = getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper));
        }

        public GetDeityById_Deities_Items_Deity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDeityById_Deities_Items_Deity(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetDeityById_Deities_Items_Category(
                    entity.Category,
                    snapshot),
                MapNonNullableIGetDeityById_Deities_Items_Alignment(
                    entity.Alignment,
                    snapshot),
                MapNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsNonNullableArray(
                    entity.FollowerAlignments,
                    snapshot),
                MapNonNullableIGetDeityById_Deities_Items_DivineFontsNonNullableArray(
                    entity.DivineFonts,
                    snapshot),
                MapNonNullableIGetDeityById_Deities_Items_DomainsNonNullableArray(
                    entity.Domains,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Category MapNonNullableIGetDeityById_Deities_Items_Category(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Alignment MapNonNullableIGetDeityById_Deities_Items_Alignment(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments> MapNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var deityFollowerAlignments = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                deityFollowerAlignments.Add(MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments(
                    child,
                    snapshot));
            }

            return deityFollowerAlignments;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "DeityFollowerAlignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments_Alignment MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments_Alignment(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts> MapNonNullableIGetDeityById_Deities_Items_DivineFontsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var divineFonts = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                divineFonts.Add(MapNonNullableIGetDeityById_Deities_Items_DivineFonts(
                    child,
                    snapshot));
            }

            return divineFonts;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts MapNonNullableIGetDeityById_Deities_Items_DivineFonts(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "DivineFont",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains> MapNonNullableIGetDeityById_Deities_Items_DomainsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var domains = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                domains.Add(MapNonNullableIGetDeityById_Deities_Items_Domains(
                    child,
                    snapshot));
            }

            return domains;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains MapNonNullableIGetDeityById_Deities_Items_Domains(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Domain",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetDeityById_Deities_Items_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Deity
        : global::System.IEquatable<GetDeityById_Deities_Items_Deity>
        , IGetDeityById_Deities_Items_Deity
    {
        public GetDeityById_Deities_Items_Deity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Category category,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Alignment alignment,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments> followerAlignments,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts> divineFonts,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains> domains)
        {
            Id = id;
            Name = name;
            Description = description;
            Category = category;
            Alignment = alignment;
            FollowerAlignments = followerAlignments;
            DivineFonts = divineFonts;
            Domains = domains;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Category Category { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Alignment Alignment { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments> FollowerAlignments { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts> DivineFonts { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains> Domains { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_Deity)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_Deity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && Category.Equals(other.Category)
                && Alignment.Equals(other.Alignment)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        FollowerAlignments,
                        other.FollowerAlignments)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        DivineFonts,
                        other.DivineFonts)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Domains,
                        other.Domains);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                hash ^= 397 * Category.GetHashCode();

                hash ^= 397 * Alignment.GetHashCode();

                foreach (var FollowerAlignments_elm in FollowerAlignments)
                {
                    hash ^= 397 * FollowerAlignments_elm.GetHashCode();
                }

                foreach (var DivineFonts_elm in DivineFonts)
                {
                    hash ^= 397 * DivineFonts_elm.GetHashCode();
                }

                foreach (var Domains_elm in Domains)
                {
                    hash ^= 397 * Domains_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityById_Deities_Items_Category_DeityCategory>
    {
        public GetDeityById_Deities_Items_Category_DeityCategory Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityById_Deities_Items_Category_DeityCategory(
                entity.Id,
                entity.Name);
        }
    }
}


// GetDeityById_Deities_Items_Category_DeityCategory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Category_DeityCategory
        : global::System.IEquatable<GetDeityById_Deities_Items_Category_DeityCategory>
        , IGetDeityById_Deities_Items_Category_DeityCategory
    {
        public GetDeityById_Deities_Items_Category_DeityCategory(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_Category_DeityCategory)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_Category_DeityCategory? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_Alignment_Alignment>
    {
        public GetDeityById_Deities_Items_Alignment_Alignment Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityById_Deities_Items_Alignment_Alignment(
                entity.Id,
                entity.Name);
        }
    }
}


// GetDeityById_Deities_Items_Alignment_Alignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Alignment_Alignment
        : global::System.IEquatable<GetDeityById_Deities_Items_Alignment_Alignment>
        , IGetDeityById_Deities_Items_Alignment_Alignment
    {
        public GetDeityById_Deities_Items_Alignment_Alignment(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_Alignment_Alignment)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_Alignment_Alignment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment> _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper;

        public GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment> getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper = getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper));
        }

        public GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment(MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments_Alignment(
                entity.Alignment,
                snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments_Alignment MapNonNullableIGetDeityById_Deities_Items_FollowerAlignments_Alignment(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment
        : global::System.IEquatable<GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment>
        , IGetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment
    {
        public GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments_Alignment alignment)
        {
            Alignment = alignment;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments_Alignment Alignment { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Alignment.Equals(other.Alignment));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Alignment.GetHashCode();

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDeityById_Deities_Items_DivineFonts_DivineFont>
    {
        public GetDeityById_Deities_Items_DivineFonts_DivineFont Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityById_Deities_Items_DivineFonts_DivineFont(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetDeityById_Deities_Items_DivineFonts_DivineFont.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_DivineFonts_DivineFont
        : global::System.IEquatable<GetDeityById_Deities_Items_DivineFonts_DivineFont>
        , IGetDeityById_Deities_Items_DivineFonts_DivineFont
    {
        public GetDeityById_Deities_Items_DivineFonts_DivineFont(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_DivineFonts_DivineFont)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_DivineFonts_DivineFont? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity, GetDeityById_Deities_Items_Domains_Domain>
    {
        public GetDeityById_Deities_Items_Domains_Domain Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityById_Deities_Items_Domains_Domain(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetDeityById_Deities_Items_Domains_Domain.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_Domains_Domain
        : global::System.IEquatable<GetDeityById_Deities_Items_Domains_Domain>
        , IGetDeityById_Deities_Items_Domains_Domain
    {
        public GetDeityById_Deities_Items_Domains_Domain(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_Domains_Domain)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_Domains_Domain? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// GetDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment>
    {
        public GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment(
                entity.Id,
                entity.Name);
        }
    }
}


// GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment
        : global::System.IEquatable<GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment>
        , IGetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment
    {
        public GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment)obj);
        }

        public global::System.Boolean Equals(GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetDeityByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities? Deities { get; }
    }
}


// IGetDeityById_Deities.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items?>? Items { get; }
    }
}


// IGetDeityById_Deities_DeityCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_DeityCollectionSegment
        : IGetDeityById_Deities
    {
    }
}


// IGetDeityById_Deities_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Category Category { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Alignment Alignment { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments> FollowerAlignments { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_DivineFonts> DivineFonts { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_Domains> Domains { get; }
    }
}


// IGetDeityById_Deities_Items_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Deity
        : IGetDeityById_Deities_Items
    {
    }
}


// IGetDeityById_Deities_Items_Category.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Category
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetDeityById_Deities_Items_Category_DeityCategory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Category_DeityCategory
        : IGetDeityById_Deities_Items_Category
    {
    }
}


// IGetDeityById_Deities_Items_Alignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Alignment
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetDeityById_Deities_Items_Alignment_Alignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Alignment_Alignment
        : IGetDeityById_Deities_Items_Alignment
    {
    }
}


// IGetDeityById_Deities_Items_FollowerAlignments.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_FollowerAlignments
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityById_Deities_Items_FollowerAlignments_Alignment Alignment { get; }
    }
}


// IGetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment
        : IGetDeityById_Deities_Items_FollowerAlignments
    {
    }
}


// IGetDeityById_Deities_Items_DivineFonts.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_DivineFonts
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetDeityById_Deities_Items_DivineFonts_DivineFont.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_DivineFonts_DivineFont
        : IGetDeityById_Deities_Items_DivineFonts
    {
    }
}


// IGetDeityById_Deities_Items_Domains.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Domains
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetDeityById_Deities_Items_Domains_Domain.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_Domains_Domain
        : IGetDeityById_Deities_Items_Domains
    {
    }
}


// IGetDeityById_Deities_Items_FollowerAlignments_Alignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_FollowerAlignments_Alignment
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment
        : IGetDeityById_Deities_Items_FollowerAlignments_Alignment
    {
    }
}


// GetDeityCategoryByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityCategoryById_DeityCategories_Items_DeityCategory> _getDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityCategoryById_DeityCategories_Items_Deities_Deity> _getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper;

        public GetDeityCategoryByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityCategoryById_DeityCategories_Items_DeityCategory> getDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityCategoryById_DeityCategories_Items_Deities_Deity> getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper = getDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper));
            _getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper = getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult);

        public GetDeityCategoryByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDeityCategoryByIdResultInfo info)
            {
                return new GetDeityCategoryByIdResult(MapIGetDeityCategoryById_DeityCategories(
                    info.DeityCategories,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetDeityCategoryByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories? MapIGetDeityCategoryById_DeityCategories(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDeityCategoryById_DeityCategories returnValue = default!;

            if (data?.__typename.Equals(
                    "DeityCategoryCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment(MapIGetDeityCategoryById_DeityCategories_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items?>? MapIGetDeityCategoryById_DeityCategories_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var deityCategorys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                deityCategorys.Add(MapIGetDeityCategoryById_DeityCategories_Items(
                    child,
                    snapshot));
            }

            return deityCategorys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items? MapIGetDeityCategoryById_DeityCategories_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities> MapNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var deitys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                deitys.Add(MapNonNullableIGetDeityCategoryById_DeityCategories_Items_Deities(
                    child,
                    snapshot));
            }

            return deitys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities MapNonNullableIGetDeityCategoryById_DeityCategories_Items_Deities(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetDeityCategoryByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetDeityCategoryByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? deityCategories,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            DeityCategories = deityCategories;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? DeityCategories { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDeityCategoryByIdResultInfo(
                DeityCategories,
                _entityIds,
                version);
        }
    }
}


// GetDeityCategoryByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryByIdResult
        : global::System.IEquatable<GetDeityCategoryByIdResult>
        , IGetDeityCategoryByIdResult
    {
        public GetDeityCategoryByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories? deityCategories)
        {
            DeityCategories = deityCategories;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories? DeityCategories { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoryByIdResult)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoryByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DeityCategories is null && other.DeityCategories is null) ||DeityCategories != null && DeityCategories.Equals(other.DeityCategories)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(DeityCategories is null))
                {
                    hash ^= 397 * DeityCategories.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment
        : global::System.IEquatable<GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment>
        , IGetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment
    {
        public GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityCategoryById_DeityCategories_Items_DeityCategory>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityCategoryById_DeityCategories_Items_Deities_Deity> _getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper;

        public GetDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityCategoryById_DeityCategories_Items_Deities_Deity> getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper = getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper));
        }

        public GetDeityCategoryById_DeityCategories_Items_DeityCategory Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDeityCategoryById_DeityCategories_Items_DeityCategory(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesNonNullableArray(
                    entity.Deities,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities> MapNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var deitys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                deitys.Add(MapNonNullableIGetDeityCategoryById_DeityCategories_Items_Deities(
                    child,
                    snapshot));
            }

            return deitys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities MapNonNullableIGetDeityCategoryById_DeityCategories_Items_Deities(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetDeityCategoryById_DeityCategories_Items_DeityCategory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryById_DeityCategories_Items_DeityCategory
        : global::System.IEquatable<GetDeityCategoryById_DeityCategories_Items_DeityCategory>
        , IGetDeityCategoryById_DeityCategories_Items_DeityCategory
    {
        public GetDeityCategoryById_DeityCategories_Items_DeityCategory(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities> deities)
        {
            Id = id;
            Name = name;
            Description = description;
            Deities = deities;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities> Deities { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoryById_DeityCategories_Items_DeityCategory)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoryById_DeityCategories_Items_DeityCategory? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Deities,
                        other.Deities);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Deities_elm in Deities)
                {
                    hash ^= 397 * Deities_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDeityCategoryById_DeityCategories_Items_Deities_Deity>
    {
        public GetDeityCategoryById_DeityCategories_Items_Deities_Deity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityCategoryById_DeityCategories_Items_Deities_Deity(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetDeityCategoryById_DeityCategories_Items_Deities_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryById_DeityCategories_Items_Deities_Deity
        : global::System.IEquatable<GetDeityCategoryById_DeityCategories_Items_Deities_Deity>
        , IGetDeityCategoryById_DeityCategories_Items_Deities_Deity
    {
        public GetDeityCategoryById_DeityCategories_Items_Deities_Deity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoryById_DeityCategories_Items_Deities_Deity)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoryById_DeityCategories_Items_Deities_Deity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetDeityCategoryByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories? DeityCategories { get; }
    }
}


// IGetDeityCategoryById_DeityCategories.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryById_DeityCategories
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items?>? Items { get; }
    }
}


// IGetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryById_DeityCategories_DeityCategoryCollectionSegment
        : IGetDeityCategoryById_DeityCategories
    {
    }
}


// IGetDeityCategoryById_DeityCategories_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryById_DeityCategories_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryById_DeityCategories_Items_Deities> Deities { get; }
    }
}


// IGetDeityCategoryById_DeityCategories_Items_DeityCategory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryById_DeityCategories_Items_DeityCategory
        : IGetDeityCategoryById_DeityCategories_Items
    {
    }
}


// IGetDeityCategoryById_DeityCategories_Items_Deities.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryById_DeityCategories_Items_Deities
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetDeityCategoryById_DeityCategories_Items_Deities_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoryById_DeityCategories_Items_Deities_Deity
        : IGetDeityCategoryById_DeityCategories_Items_Deities
    {
    }
}


// GetDeityCategoriesPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityCategoriesPage_DeityCategories_Items_DeityCategory> _getDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper;

        public GetDeityCategoriesPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityCategoriesPage_DeityCategories_Items_DeityCategory> getDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper = getDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult);

        public GetDeityCategoriesPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDeityCategoriesPageResultInfo info)
            {
                return new GetDeityCategoriesPageResult(MapIGetDeityCategoriesPage_DeityCategories(
                    info.DeityCategories,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetDeityCategoriesPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories? MapIGetDeityCategoriesPage_DeityCategories(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDeityCategoriesPage_DeityCategories returnValue = default!;

            if (data?.__typename.Equals(
                    "DeityCategoryCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetDeityCategoriesPage_DeityCategories_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories_Items?>? MapIGetDeityCategoriesPage_DeityCategories_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var deityCategorys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                deityCategorys.Add(MapIGetDeityCategoriesPage_DeityCategories_Items(
                    child,
                    snapshot));
            }

            return deityCategorys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories_Items? MapIGetDeityCategoriesPage_DeityCategories_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                return _getDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetDeityCategoriesPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetDeityCategoriesPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? deityCategories,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            DeityCategories = deityCategories;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? DeityCategories { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDeityCategoriesPageResultInfo(
                DeityCategories,
                _entityIds,
                version);
        }
    }
}


// GetDeityCategoriesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPageResult
        : global::System.IEquatable<GetDeityCategoriesPageResult>
        , IGetDeityCategoriesPageResult
    {
        public GetDeityCategoriesPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories? deityCategories)
        {
            DeityCategories = deityCategories;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories? DeityCategories { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoriesPageResult)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoriesPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DeityCategories is null && other.DeityCategories is null) ||DeityCategories != null && DeityCategories.Equals(other.DeityCategories)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(DeityCategories is null))
                {
                    hash ^= 397 * DeityCategories.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment
        : global::System.IEquatable<GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment>
        , IGetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment
    {
        public GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, GetDeityCategoriesPage_DeityCategories_Items_DeityCategory>
    {
        public GetDeityCategoriesPage_DeityCategories_Items_DeityCategory Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDeityCategoriesPage_DeityCategories_Items_DeityCategory(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetDeityCategoriesPage_DeityCategories_Items_DeityCategory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPage_DeityCategories_Items_DeityCategory
        : global::System.IEquatable<GetDeityCategoriesPage_DeityCategories_Items_DeityCategory>
        , IGetDeityCategoriesPage_DeityCategories_Items_DeityCategory
    {
        public GetDeityCategoriesPage_DeityCategories_Items_DeityCategory(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDeityCategoriesPage_DeityCategories_Items_DeityCategory)obj);
        }

        public global::System.Boolean Equals(GetDeityCategoriesPage_DeityCategories_Items_DeityCategory? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetDeityCategoriesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoriesPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories? DeityCategories { get; }
    }
}


// IGetDeityCategoriesPage_DeityCategories.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoriesPage_DeityCategories
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPage_DeityCategories_Items?>? Items { get; }
    }
}


// IGetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoriesPage_DeityCategories_DeityCategoryCollectionSegment
        : IGetDeityCategoriesPage_DeityCategories
    {
    }
}


// IGetDeityCategoriesPage_DeityCategories_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoriesPage_DeityCategories_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetDeityCategoriesPage_DeityCategories_Items_DeityCategory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDeityCategoriesPage_DeityCategories_Items_DeityCategory
        : IGetDeityCategoriesPage_DeityCategories_Items
    {
    }
}


// GetDivineFontsResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFontsResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDivineFonts_DivineFonts_Items_DivineFont> _getDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDivineFonts_DivineFonts_Items_Deities_Deity> _getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper;

        public GetDivineFontsResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDivineFonts_DivineFonts_Items_DivineFont> getDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDivineFonts_DivineFonts_Items_Deities_Deity> getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper = getDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper));
            _getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper = getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult);

        public GetDivineFontsResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDivineFontsResultInfo info)
            {
                return new GetDivineFontsResult(MapIGetDivineFonts_DivineFonts(
                    info.DivineFonts,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetDivineFontsResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts? MapIGetDivineFonts_DivineFonts(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDivineFonts_DivineFonts returnValue = default!;

            if (data?.__typename.Equals(
                    "DivineFontCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDivineFonts_DivineFonts_DivineFontCollectionSegment(MapIGetDivineFonts_DivineFonts_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items?>? MapIGetDivineFonts_DivineFonts_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var divineFonts = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                divineFonts.Add(MapIGetDivineFonts_DivineFonts_Items(
                    child,
                    snapshot));
            }

            return divineFonts;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items? MapIGetDivineFonts_DivineFonts_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "DivineFont",
                    global::System.StringComparison.Ordinal))
            {
                return _getDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities> MapNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var deitys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                deitys.Add(MapNonNullableIGetDivineFonts_DivineFonts_Items_Deities(
                    child,
                    snapshot));
            }

            return deitys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities MapNonNullableIGetDivineFonts_DivineFonts_Items_Deities(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                return _getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetDivineFontsResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFontsResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetDivineFontsResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontCollectionSegmentData? divineFonts,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            DivineFonts = divineFonts;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontCollectionSegmentData? DivineFonts { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDivineFontsResultInfo(
                DivineFonts,
                _entityIds,
                version);
        }
    }
}


// GetDivineFontsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFontsResult
        : global::System.IEquatable<GetDivineFontsResult>
        , IGetDivineFontsResult
    {
        public GetDivineFontsResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts? divineFonts)
        {
            DivineFonts = divineFonts;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts? DivineFonts { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDivineFontsResult)obj);
        }

        public global::System.Boolean Equals(GetDivineFontsResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DivineFonts is null && other.DivineFonts is null) ||DivineFonts != null && DivineFonts.Equals(other.DivineFonts)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(DivineFonts is null))
                {
                    hash ^= 397 * DivineFonts.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDivineFonts_DivineFonts_DivineFontCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFonts_DivineFonts_DivineFontCollectionSegment
        : global::System.IEquatable<GetDivineFonts_DivineFonts_DivineFontCollectionSegment>
        , IGetDivineFonts_DivineFonts_DivineFontCollectionSegment
    {
        public GetDivineFonts_DivineFonts_DivineFontCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDivineFonts_DivineFonts_DivineFontCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetDivineFonts_DivineFonts_DivineFontCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, GetDivineFonts_DivineFonts_Items_DivineFont>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDivineFonts_DivineFonts_Items_Deities_Deity> _getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper;

        public GetDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDivineFonts_DivineFonts_Items_Deities_Deity> getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper = getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper));
        }

        public GetDivineFonts_DivineFonts_Items_DivineFont Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDivineFonts_DivineFonts_Items_DivineFont(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesNonNullableArray(
                    entity.Deities,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities> MapNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var deitys = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                deitys.Add(MapNonNullableIGetDivineFonts_DivineFonts_Items_Deities(
                    child,
                    snapshot));
            }

            return deitys;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities MapNonNullableIGetDivineFonts_DivineFonts_Items_Deities(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                return _getDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetDivineFonts_DivineFonts_Items_DivineFont.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFonts_DivineFonts_Items_DivineFont
        : global::System.IEquatable<GetDivineFonts_DivineFonts_Items_DivineFont>
        , IGetDivineFonts_DivineFonts_Items_DivineFont
    {
        public GetDivineFonts_DivineFonts_Items_DivineFont(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities> deities)
        {
            Id = id;
            Name = name;
            Description = description;
            Deities = deities;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities> Deities { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDivineFonts_DivineFonts_Items_DivineFont)obj);
        }

        public global::System.Boolean Equals(GetDivineFonts_DivineFonts_Items_DivineFont? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Deities,
                        other.Deities);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Deities_elm in Deities)
                {
                    hash ^= 397 * Deities_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, GetDivineFonts_DivineFonts_Items_Deities_Deity>
    {
        public GetDivineFonts_DivineFonts_Items_Deities_Deity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetDivineFonts_DivineFonts_Items_Deities_Deity(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetDivineFonts_DivineFonts_Items_Deities_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFonts_DivineFonts_Items_Deities_Deity
        : global::System.IEquatable<GetDivineFonts_DivineFonts_Items_Deities_Deity>
        , IGetDivineFonts_DivineFonts_Items_Deities_Deity
    {
        public GetDivineFonts_DivineFonts_Items_Deities_Deity(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDivineFonts_DivineFonts_Items_Deities_Deity)obj);
        }

        public global::System.Boolean Equals(GetDivineFonts_DivineFonts_Items_Deities_Deity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetDivineFontsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFontsResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts? DivineFonts { get; }
    }
}


// IGetDivineFonts_DivineFonts.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFonts_DivineFonts
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items?>? Items { get; }
    }
}


// IGetDivineFonts_DivineFonts_DivineFontCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFonts_DivineFonts_DivineFontCollectionSegment
        : IGetDivineFonts_DivineFonts
    {
    }
}


// IGetDivineFonts_DivineFonts_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFonts_DivineFonts_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFonts_DivineFonts_Items_Deities> Deities { get; }
    }
}


// IGetDivineFonts_DivineFonts_Items_DivineFont.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFonts_DivineFonts_Items_DivineFont
        : IGetDivineFonts_DivineFonts_Items
    {
    }
}


// IGetDivineFonts_DivineFonts_Items_Deities.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFonts_DivineFonts_Items_Deities
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetDivineFonts_DivineFonts_Items_Deities_Deity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetDivineFonts_DivineFonts_Items_Deities_Deity
        : IGetDivineFonts_DivineFonts_Items_Deities
    {
    }
}


// GetFeatByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetFeatById_Feats_Items_Feat> _getFeatById_Feats_Items_FeatFromFeatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity, GetFeatById_Feats_Items_Frequency_Frequency> _getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetFeatById_Feats_Items_Traits_Trait> _getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetFeatById_Feats_Items_RollableEffect_RollableEffect> _getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper;

        public GetFeatByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetFeatById_Feats_Items_Feat> getFeatById_Feats_Items_FeatFromFeatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity, GetFeatById_Feats_Items_Frequency_Frequency> getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetFeatById_Feats_Items_Traits_Trait> getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetFeatById_Feats_Items_RollableEffect_RollableEffect> getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatById_Feats_Items_FeatFromFeatEntityMapper = getFeatById_Feats_Items_FeatFromFeatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_FeatFromFeatEntityMapper));
            _getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper = getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper));
            _getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper = getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper));
            _getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper = getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult);

        public GetFeatByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFeatByIdResultInfo info)
            {
                return new GetFeatByIdResult(MapIGetFeatById_Feats(
                    info.Feats,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetFeatByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats? MapIGetFeatById_Feats(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFeatById_Feats returnValue = default!;

            if (data?.__typename.Equals(
                    "FeatCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFeatById_Feats_FeatCollectionSegment(MapIGetFeatById_Feats_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items?>? MapIGetFeatById_Feats_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                feats.Add(MapIGetFeatById_Feats_Items(
                    child,
                    snapshot));
            }

            return feats;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items? MapIGetFeatById_Feats_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_FeatFromFeatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Frequency? MapIGetFeatById_Feats_Items_Frequency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Frequency",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits> MapNonNullableIGetFeatById_Feats_Items_TraitsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var traits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                traits.Add(MapNonNullableIGetFeatById_Feats_Items_Traits(
                    child,
                    snapshot));
            }

            return traits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits MapNonNullableIGetFeatById_Feats_Items_Traits(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_RollableEffect? MapIGetFeatById_Feats_Items_RollableEffect(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "RollableEffect",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetFeatByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetFeatByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? feats,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Feats = feats;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? Feats { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFeatByIdResultInfo(
                Feats,
                _entityIds,
                version);
        }
    }
}


// GetFeatByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatByIdResult
        : global::System.IEquatable<GetFeatByIdResult>
        , IGetFeatByIdResult
    {
        public GetFeatByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats? feats)
        {
            Feats = feats;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats? Feats { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatByIdResult)obj);
        }

        public global::System.Boolean Equals(GetFeatByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Feats is null && other.Feats is null) ||Feats != null && Feats.Equals(other.Feats)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Feats is null))
                {
                    hash ^= 397 * Feats.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetFeatById_Feats_FeatCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_FeatCollectionSegment
        : global::System.IEquatable<GetFeatById_Feats_FeatCollectionSegment>
        , IGetFeatById_Feats_FeatCollectionSegment
    {
        public GetFeatById_Feats_FeatCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_FeatCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_FeatCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetFeatById_Feats_Items_FeatFromFeatEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_FeatFromFeatEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetFeatById_Feats_Items_Feat>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity, GetFeatById_Feats_Items_Frequency_Frequency> _getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetFeatById_Feats_Items_Traits_Trait> _getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetFeatById_Feats_Items_RollableEffect_RollableEffect> _getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper;

        public GetFeatById_Feats_Items_FeatFromFeatEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity, GetFeatById_Feats_Items_Frequency_Frequency> getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetFeatById_Feats_Items_Traits_Trait> getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetFeatById_Feats_Items_RollableEffect_RollableEffect> getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper = getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper));
            _getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper = getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper));
            _getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper = getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper));
        }

        public GetFeatById_Feats_Items_Feat Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatById_Feats_Items_Feat(
                entity.Id,
                entity.Name,
                entity.Level,
                entity.Special,
                entity.Trigger,
                MapIGetFeatById_Feats_Items_Frequency(
                    entity.Frequency,
                    snapshot),
                MapNonNullableIGetFeatById_Feats_Items_TraitsNonNullableArray(
                    entity.Traits,
                    snapshot),
                MapIGetFeatById_Feats_Items_RollableEffect(
                    entity.RollableEffect,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Frequency? MapIGetFeatById_Feats_Items_Frequency(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Frequency",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits> MapNonNullableIGetFeatById_Feats_Items_TraitsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var traits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                traits.Add(MapNonNullableIGetFeatById_Feats_Items_Traits(
                    child,
                    snapshot));
            }

            return traits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits MapNonNullableIGetFeatById_Feats_Items_Traits(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_RollableEffect? MapIGetFeatById_Feats_Items_RollableEffect(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "RollableEffect",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetFeatById_Feats_Items_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_Feat
        : global::System.IEquatable<GetFeatById_Feats_Items_Feat>
        , IGetFeatById_Feats_Items_Feat
    {
        public GetFeatById_Feats_Items_Feat(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 level,
            global::System.String? special,
            global::System.String? trigger,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Frequency? frequency,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits> traits,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_RollableEffect? rollableEffect)
        {
            Id = id;
            Name = name;
            Level = level;
            Special = special;
            Trigger = trigger;
            Frequency = frequency;
            Traits = traits;
            RollableEffect = rollableEffect;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.String? Special { get; }

        public global::System.String? Trigger { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Frequency? Frequency { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits> Traits { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_RollableEffect? RollableEffect { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_Feat)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_Feat? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Level == other.Level
                && ((Special is null && other.Special is null) ||Special != null && Special.Equals(other.Special))
                && ((Trigger is null && other.Trigger is null) ||Trigger != null && Trigger.Equals(other.Trigger))
                && ((Frequency is null && other.Frequency is null) ||Frequency != null && Frequency.Equals(other.Frequency))
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Traits,
                        other.Traits)
                && ((RollableEffect is null && other.RollableEffect is null) ||RollableEffect != null && RollableEffect.Equals(other.RollableEffect));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                if (!(Special is null))
                {
                    hash ^= 397 * Special.GetHashCode();
                }

                if (!(Trigger is null))
                {
                    hash ^= 397 * Trigger.GetHashCode();
                }

                if (!(Frequency is null))
                {
                    hash ^= 397 * Frequency.GetHashCode();
                }

                foreach (var Traits_elm in Traits)
                {
                    hash ^= 397 * Traits_elm.GetHashCode();
                }

                if (!(RollableEffect is null))
                {
                    hash ^= 397 * RollableEffect.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity, GetFeatById_Feats_Items_Frequency_Frequency>
    {
        public GetFeatById_Feats_Items_Frequency_Frequency Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetFeatById_Feats_Items_Frequency_Frequency(entity.Name);
        }
    }
}


// GetFeatById_Feats_Items_Frequency_Frequency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_Frequency_Frequency
        : global::System.IEquatable<GetFeatById_Feats_Items_Frequency_Frequency>
        , IGetFeatById_Feats_Items_Frequency_Frequency
    {
        public GetFeatById_Feats_Items_Frequency_Frequency(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_Frequency_Frequency)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_Frequency_Frequency? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetFeatById_Feats_Items_Traits_Trait>
    {
        public GetFeatById_Feats_Items_Traits_Trait Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetFeatById_Feats_Items_Traits_Trait(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetFeatById_Feats_Items_Traits_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_Traits_Trait
        : global::System.IEquatable<GetFeatById_Feats_Items_Traits_Trait>
        , IGetFeatById_Feats_Items_Traits_Trait
    {
        public GetFeatById_Feats_Items_Traits_Trait(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_Traits_Trait)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_Traits_Trait? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// GetFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetFeatById_Feats_Items_RollableEffect_RollableEffect>
    {
        public GetFeatById_Feats_Items_RollableEffect_RollableEffect Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetFeatById_Feats_Items_RollableEffect_RollableEffect(
                entity.CriticalSuccess,
                entity.Success,
                entity.Failure,
                entity.CriticalFailure);
        }
    }
}


// GetFeatById_Feats_Items_RollableEffect_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatById_Feats_Items_RollableEffect_RollableEffect
        : global::System.IEquatable<GetFeatById_Feats_Items_RollableEffect_RollableEffect>
        , IGetFeatById_Feats_Items_RollableEffect_RollableEffect
    {
        public GetFeatById_Feats_Items_RollableEffect_RollableEffect(
            global::System.String? criticalSuccess,
            global::System.String? success,
            global::System.String? failure,
            global::System.String? criticalFailure)
        {
            CriticalSuccess = criticalSuccess;
            Success = success;
            Failure = failure;
            CriticalFailure = criticalFailure;
        }

        public global::System.String? CriticalSuccess { get; }

        public global::System.String? Success { get; }

        public global::System.String? Failure { get; }

        public global::System.String? CriticalFailure { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatById_Feats_Items_RollableEffect_RollableEffect)obj);
        }

        public global::System.Boolean Equals(GetFeatById_Feats_Items_RollableEffect_RollableEffect? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CriticalSuccess is null && other.CriticalSuccess is null) ||CriticalSuccess != null && CriticalSuccess.Equals(other.CriticalSuccess)))
                && ((Success is null && other.Success is null) ||Success != null && Success.Equals(other.Success))
                && ((Failure is null && other.Failure is null) ||Failure != null && Failure.Equals(other.Failure))
                && ((CriticalFailure is null && other.CriticalFailure is null) ||CriticalFailure != null && CriticalFailure.Equals(other.CriticalFailure));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(CriticalSuccess is null))
                {
                    hash ^= 397 * CriticalSuccess.GetHashCode();
                }

                if (!(Success is null))
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (!(Failure is null))
                {
                    hash ^= 397 * Failure.GetHashCode();
                }

                if (!(CriticalFailure is null))
                {
                    hash ^= 397 * CriticalFailure.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// IGetFeatByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats? Feats { get; }
    }
}


// IGetFeatById_Feats.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items?>? Items { get; }
    }
}


// IGetFeatById_Feats_FeatCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_FeatCollectionSegment
        : IGetFeatById_Feats
    {
    }
}


// IFeatById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IFeatById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.String? Special { get; }

        public global::System.String? Trigger { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Frequency? Frequency { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_Traits> Traits { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatById_Feats_Items_RollableEffect? RollableEffect { get; }
    }
}


// IGetFeatById_Feats_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items
        : IFeatById
    {
    }
}


// IGetFeatById_Feats_Items_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_Feat
        : IGetFeatById_Feats_Items
    {
    }
}


// IGetFeatById_Feats_Items_Frequency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_Frequency
    {
        public global::System.String Name { get; }
    }
}


// IGetFeatById_Feats_Items_Frequency_Frequency.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_Frequency_Frequency
        : IGetFeatById_Feats_Items_Frequency
    {
    }
}


// IFeatById_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IFeatById_Trait
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetFeatById_Feats_Items_Traits.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_Traits
        : IFeatById_Trait
    {
    }
}


// IGetFeatById_Feats_Items_Traits_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_Traits_Trait
        : IGetFeatById_Feats_Items_Traits
    {
    }
}


// IFeatById_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IFeatById_RollableEffect
    {
        public global::System.String? CriticalSuccess { get; }

        public global::System.String? Success { get; }

        public global::System.String? Failure { get; }

        public global::System.String? CriticalFailure { get; }
    }
}


// IGetFeatById_Feats_Items_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_RollableEffect
        : IFeatById_RollableEffect
    {
    }
}


// IGetFeatById_Feats_Items_RollableEffect_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatById_Feats_Items_RollableEffect_RollableEffect
        : IGetFeatById_Feats_Items_RollableEffect
    {
    }
}


// GetFeatsPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetFeatsPage_Feats_Items_Feat> _getFeatsPage_Feats_Items_FeatFromFeatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper;

        public GetFeatsPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetFeatsPage_Feats_Items_Feat> getFeatsPage_Feats_Items_FeatFromFeatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatsPage_Feats_Items_FeatFromFeatEntityMapper = getFeatsPage_Feats_Items_FeatFromFeatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage_Feats_Items_FeatFromFeatEntityMapper));
            _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper = getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult);

        public GetFeatsPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFeatsPageResultInfo info)
            {
                return new GetFeatsPageResult(MapIGetFeatsPage_Feats(
                    info.Feats,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetFeatsPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats? MapIGetFeatsPage_Feats(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFeatsPage_Feats returnValue = default!;

            if (data?.__typename.Equals(
                    "FeatCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFeatsPage_Feats_FeatCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetFeatsPage_Feats_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items?>? MapIGetFeatsPage_Feats_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                feats.Add(MapIGetFeatsPage_Feats_Items(
                    child,
                    snapshot));
            }

            return feats;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items? MapIGetFeatsPage_Feats_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatsPage_Feats_Items_FeatFromFeatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details> MapNonNullableIGetFeatsPage_Feats_Items_DetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var featDetailsBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                featDetailsBlocks.Add(MapNonNullableIGetFeatsPage_Feats_Items_Details(
                    child,
                    snapshot));
            }

            return featDetailsBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details MapNonNullableIGetFeatsPage_Feats_Items_Details(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "FeatDetailsBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetFeatsPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetFeatsPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? feats,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Feats = feats;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? Feats { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFeatsPageResultInfo(
                Feats,
                _entityIds,
                version);
        }
    }
}


// GetFeatsPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPageResult
        : global::System.IEquatable<GetFeatsPageResult>
        , IGetFeatsPageResult
    {
        public GetFeatsPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats? feats)
        {
            Feats = feats;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats? Feats { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPageResult)obj);
        }

        public global::System.Boolean Equals(GetFeatsPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Feats is null && other.Feats is null) ||Feats != null && Feats.Equals(other.Feats)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Feats is null))
                {
                    hash ^= 397 * Feats.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetFeatsPage_Feats_FeatCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPage_Feats_FeatCollectionSegment
        : global::System.IEquatable<GetFeatsPage_Feats_FeatCollectionSegment>
        , IGetFeatsPage_Feats_FeatCollectionSegment
    {
        public GetFeatsPage_Feats_FeatCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPage_Feats_FeatCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetFeatsPage_Feats_FeatCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetFeatsPage_Feats_Items_Feat>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper;

        public GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock> getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper = getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper));
        }

        public GetFeatsPage_Feats_Items_Feat Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFeatsPage_Feats_Items_Feat(
                entity.Id,
                entity.Name,
                entity.Level,
                entity.CanBeLearnedMoreThanOnce,
                MapNonNullableIGetFeatsPage_Feats_Items_DetailsNonNullableArray(
                    entity.Details,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details> MapNonNullableIGetFeatsPage_Feats_Items_DetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var featDetailsBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                featDetailsBlocks.Add(MapNonNullableIGetFeatsPage_Feats_Items_Details(
                    child,
                    snapshot));
            }

            return featDetailsBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details MapNonNullableIGetFeatsPage_Feats_Items_Details(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "FeatDetailsBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetFeatsPage_Feats_Items_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPage_Feats_Items_Feat
        : global::System.IEquatable<GetFeatsPage_Feats_Items_Feat>
        , IGetFeatsPage_Feats_Items_Feat
    {
        public GetFeatsPage_Feats_Items_Feat(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 level,
            global::System.Boolean canBeLearnedMoreThanOnce,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details> details)
        {
            Id = id;
            Name = name;
            Level = level;
            CanBeLearnedMoreThanOnce = canBeLearnedMoreThanOnce;
            Details = details;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.Boolean CanBeLearnedMoreThanOnce { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details> Details { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPage_Feats_Items_Feat)obj);
        }

        public global::System.Boolean Equals(GetFeatsPage_Feats_Items_Feat? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Level == other.Level
                && CanBeLearnedMoreThanOnce == other.CanBeLearnedMoreThanOnce
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Details,
                        other.Details);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                hash ^= 397 * CanBeLearnedMoreThanOnce.GetHashCode();

                foreach (var Details_elm in Details)
                {
                    hash ^= 397 * Details_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity, GetFeatsPage_Feats_Items_Details_FeatDetailsBlock>
    {
        public GetFeatsPage_Feats_Items_Details_FeatDetailsBlock Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetFeatsPage_Feats_Items_Details_FeatDetailsBlock(entity.Text);
        }
    }
}


// GetFeatsPage_Feats_Items_Details_FeatDetailsBlock.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPage_Feats_Items_Details_FeatDetailsBlock
        : global::System.IEquatable<GetFeatsPage_Feats_Items_Details_FeatDetailsBlock>
        , IGetFeatsPage_Feats_Items_Details_FeatDetailsBlock
    {
        public GetFeatsPage_Feats_Items_Details_FeatDetailsBlock(global::System.String text)
        {
            Text = text;
        }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFeatsPage_Feats_Items_Details_FeatDetailsBlock)obj);
        }

        public global::System.Boolean Equals(GetFeatsPage_Feats_Items_Details_FeatDetailsBlock? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Text.Equals(other.Text));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetFeatsPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats? Feats { get; }
    }
}


// IGetFeatsPage_Feats.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPage_Feats
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items?>? Items { get; }
    }
}


// IGetFeatsPage_Feats_FeatCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPage_Feats_FeatCollectionSegment
        : IGetFeatsPage_Feats
    {
    }
}


// IFeatsPage.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IFeatsPage
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.Boolean CanBeLearnedMoreThanOnce { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPage_Feats_Items_Details> Details { get; }
    }
}


// IGetFeatsPage_Feats_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPage_Feats_Items
        : IFeatsPage
    {
    }
}


// IGetFeatsPage_Feats_Items_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPage_Feats_Items_Feat
        : IGetFeatsPage_Feats_Items
    {
    }
}


// IGetFeatsPage_Feats_Items_Details.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPage_Feats_Items_Details
    {
        public global::System.String Text { get; }
    }
}


// IGetFeatsPage_Feats_Items_Details_FeatDetailsBlock.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetFeatsPage_Feats_Items_Details_FeatDetailsBlock
        : IGetFeatsPage_Feats_Items_Details
    {
    }
}


// GetLanguageByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageById_Languages_Items_Language> _getLanguageById_Languages_Items_LanguageFromLanguageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetLanguageById_Languages_Items_Races_Race> _getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper;

        public GetLanguageByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageById_Languages_Items_Language> getLanguageById_Languages_Items_LanguageFromLanguageEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetLanguageById_Languages_Items_Races_Race> getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLanguageById_Languages_Items_LanguageFromLanguageEntityMapper = getLanguageById_Languages_Items_LanguageFromLanguageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageById_Languages_Items_LanguageFromLanguageEntityMapper));
            _getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper = getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult);

        public GetLanguageByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetLanguageByIdResultInfo info)
            {
                return new GetLanguageByIdResult(MapIGetLanguageById_Languages(
                    info.Languages,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetLanguageByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages? MapIGetLanguageById_Languages(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetLanguageById_Languages returnValue = default!;

            if (data?.__typename.Equals(
                    "LanguageCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetLanguageById_Languages_LanguageCollectionSegment(MapIGetLanguageById_Languages_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items?>? MapIGetLanguageById_Languages_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var languages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                languages.Add(MapIGetLanguageById_Languages_Items(
                    child,
                    snapshot));
            }

            return languages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items? MapIGetLanguageById_Languages_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageById_Languages_Items_LanguageFromLanguageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races> MapNonNullableIGetLanguageById_Languages_Items_RacesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var races = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                races.Add(MapNonNullableIGetLanguageById_Languages_Items_Races(
                    child,
                    snapshot));
            }

            return races;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races MapNonNullableIGetLanguageById_Languages_Items_Races(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetLanguageByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetLanguageByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? languages,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Languages = languages;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? Languages { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLanguageByIdResultInfo(
                Languages,
                _entityIds,
                version);
        }
    }
}


// GetLanguageByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageByIdResult
        : global::System.IEquatable<GetLanguageByIdResult>
        , IGetLanguageByIdResult
    {
        public GetLanguageByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages? languages)
        {
            Languages = languages;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages? Languages { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageByIdResult)obj);
        }

        public global::System.Boolean Equals(GetLanguageByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Languages is null && other.Languages is null) ||Languages != null && Languages.Equals(other.Languages)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Languages is null))
                {
                    hash ^= 397 * Languages.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetLanguageById_Languages_LanguageCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageById_Languages_LanguageCollectionSegment
        : global::System.IEquatable<GetLanguageById_Languages_LanguageCollectionSegment>
        , IGetLanguageById_Languages_LanguageCollectionSegment
    {
        public GetLanguageById_Languages_LanguageCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageById_Languages_LanguageCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetLanguageById_Languages_LanguageCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetLanguageById_Languages_Items_LanguageFromLanguageEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageById_Languages_Items_LanguageFromLanguageEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageById_Languages_Items_Language>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetLanguageById_Languages_Items_Races_Race> _getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper;

        public GetLanguageById_Languages_Items_LanguageFromLanguageEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetLanguageById_Languages_Items_Races_Race> getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper = getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper));
        }

        public GetLanguageById_Languages_Items_Language Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetLanguageById_Languages_Items_Language(
                entity.Id,
                entity.Name,
                MapNonNullableIGetLanguageById_Languages_Items_RacesNonNullableArray(
                    entity.Races,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races> MapNonNullableIGetLanguageById_Languages_Items_RacesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var races = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                races.Add(MapNonNullableIGetLanguageById_Languages_Items_Races(
                    child,
                    snapshot));
            }

            return races;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races MapNonNullableIGetLanguageById_Languages_Items_Races(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetLanguageById_Languages_Items_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageById_Languages_Items_Language
        : global::System.IEquatable<GetLanguageById_Languages_Items_Language>
        , IGetLanguageById_Languages_Items_Language
    {
        public GetLanguageById_Languages_Items_Language(
            global::System.Guid id,
            global::System.String name,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races> races)
        {
            Id = id;
            Name = name;
            Races = races;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races> Races { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageById_Languages_Items_Language)obj);
        }

        public global::System.Boolean Equals(GetLanguageById_Languages_Items_Language? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Races,
                        other.Races);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                foreach (var Races_elm in Races)
                {
                    hash ^= 397 * Races_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetLanguageById_Languages_Items_Races_Race>
    {
        public GetLanguageById_Languages_Items_Races_Race Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetLanguageById_Languages_Items_Races_Race(
                entity.Id,
                entity.Name);
        }
    }
}


// GetLanguageById_Languages_Items_Races_Race.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageById_Languages_Items_Races_Race
        : global::System.IEquatable<GetLanguageById_Languages_Items_Races_Race>
        , IGetLanguageById_Languages_Items_Races_Race
    {
        public GetLanguageById_Languages_Items_Races_Race(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageById_Languages_Items_Races_Race)obj);
        }

        public global::System.Boolean Equals(GetLanguageById_Languages_Items_Races_Race? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetLanguageByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages? Languages { get; }
    }
}


// IGetLanguageById_Languages.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageById_Languages
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items?>? Items { get; }
    }
}


// IGetLanguageById_Languages_LanguageCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageById_Languages_LanguageCollectionSegment
        : IGetLanguageById_Languages
    {
    }
}


// IGetLanguageById_Languages_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageById_Languages_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageById_Languages_Items_Races> Races { get; }
    }
}


// IGetLanguageById_Languages_Items_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageById_Languages_Items_Language
        : IGetLanguageById_Languages_Items
    {
    }
}


// IGetLanguageById_Languages_Items_Races.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageById_Languages_Items_Races
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetLanguageById_Languages_Items_Races_Race.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageById_Languages_Items_Races_Race
        : IGetLanguageById_Languages_Items_Races
    {
    }
}


// GetLanguagesPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguagesPage_Languages_Items_Language> _getLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper;

        public GetLanguagesPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguagesPage_Languages_Items_Language> getLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper = getLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult);

        public GetLanguagesPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetLanguagesPageResultInfo info)
            {
                return new GetLanguagesPageResult(MapIGetLanguagesPage_Languages(
                    info.Languages,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetLanguagesPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages? MapIGetLanguagesPage_Languages(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetLanguagesPage_Languages returnValue = default!;

            if (data?.__typename.Equals(
                    "LanguageCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetLanguagesPage_Languages_LanguageCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetLanguagesPage_Languages_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages_Items?>? MapIGetLanguagesPage_Languages_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var languages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                languages.Add(MapIGetLanguagesPage_Languages_Items(
                    child,
                    snapshot));
            }

            return languages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages_Items? MapIGetLanguagesPage_Languages_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetLanguagesPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetLanguagesPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? languages,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Languages = languages;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? Languages { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLanguagesPageResultInfo(
                Languages,
                _entityIds,
                version);
        }
    }
}


// GetLanguagesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPageResult
        : global::System.IEquatable<GetLanguagesPageResult>
        , IGetLanguagesPageResult
    {
        public GetLanguagesPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages? languages)
        {
            Languages = languages;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages? Languages { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguagesPageResult)obj);
        }

        public global::System.Boolean Equals(GetLanguagesPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Languages is null && other.Languages is null) ||Languages != null && Languages.Equals(other.Languages)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Languages is null))
                {
                    hash ^= 397 * Languages.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetLanguagesPage_Languages_LanguageCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPage_Languages_LanguageCollectionSegment
        : global::System.IEquatable<GetLanguagesPage_Languages_LanguageCollectionSegment>
        , IGetLanguagesPage_Languages_LanguageCollectionSegment
    {
        public GetLanguagesPage_Languages_LanguageCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguagesPage_Languages_LanguageCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetLanguagesPage_Languages_LanguageCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguagesPage_Languages_Items_Language>
    {
        public GetLanguagesPage_Languages_Items_Language Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetLanguagesPage_Languages_Items_Language(
                entity.Id,
                entity.Name);
        }
    }
}


// GetLanguagesPage_Languages_Items_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPage_Languages_Items_Language
        : global::System.IEquatable<GetLanguagesPage_Languages_Items_Language>
        , IGetLanguagesPage_Languages_Items_Language
    {
        public GetLanguagesPage_Languages_Items_Language(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguagesPage_Languages_Items_Language)obj);
        }

        public global::System.Boolean Equals(GetLanguagesPage_Languages_Items_Language? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetLanguagesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguagesPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages? Languages { get; }
    }
}


// IGetLanguagesPage_Languages.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguagesPage_Languages
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPage_Languages_Items?>? Items { get; }
    }
}


// IGetLanguagesPage_Languages_LanguageCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguagesPage_Languages_LanguageCollectionSegment
        : IGetLanguagesPage_Languages
    {
    }
}


// IGetLanguagesPage_Languages_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguagesPage_Languages_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetLanguagesPage_Languages_Items_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguagesPage_Languages_Items_Language
        : IGetLanguagesPage_Languages_Items
    {
    }
}


// GetLanguageTypeByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetLanguageTypeById_LanguageTypes_Items_LanguageType> _getLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageTypeById_LanguageTypes_Items_Languages_Language> _getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper;

        public GetLanguageTypeByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetLanguageTypeById_LanguageTypes_Items_LanguageType> getLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageTypeById_LanguageTypes_Items_Languages_Language> getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper = getLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper));
            _getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper = getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult);

        public GetLanguageTypeByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetLanguageTypeByIdResultInfo info)
            {
                return new GetLanguageTypeByIdResult(MapIGetLanguageTypeById_LanguageTypes(
                    info.LanguageTypes,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetLanguageTypeByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes? MapIGetLanguageTypeById_LanguageTypes(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetLanguageTypeById_LanguageTypes returnValue = default!;

            if (data?.__typename.Equals(
                    "LanguageTypeCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment(MapIGetLanguageTypeById_LanguageTypes_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items?>? MapIGetLanguageTypeById_LanguageTypes_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var languageTypes = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                languageTypes.Add(MapIGetLanguageTypeById_LanguageTypes_Items(
                    child,
                    snapshot));
            }

            return languageTypes;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items? MapIGetLanguageTypeById_LanguageTypes_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages> MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var languages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                languages.Add(MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_Languages(
                    child,
                    snapshot));
            }

            return languages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_Languages(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetLanguageTypeByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetLanguageTypeByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? languageTypes,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            LanguageTypes = languageTypes;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? LanguageTypes { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLanguageTypeByIdResultInfo(
                LanguageTypes,
                _entityIds,
                version);
        }
    }
}


// GetLanguageTypeByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeByIdResult
        : global::System.IEquatable<GetLanguageTypeByIdResult>
        , IGetLanguageTypeByIdResult
    {
        public GetLanguageTypeByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes? languageTypes)
        {
            LanguageTypes = languageTypes;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes? LanguageTypes { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypeByIdResult)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypeByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LanguageTypes is null && other.LanguageTypes is null) ||LanguageTypes != null && LanguageTypes.Equals(other.LanguageTypes)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(LanguageTypes is null))
                {
                    hash ^= 397 * LanguageTypes.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment
        : global::System.IEquatable<GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment>
        , IGetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment
    {
        public GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetLanguageTypeById_LanguageTypes_Items_LanguageType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageTypeById_LanguageTypes_Items_Languages_Language> _getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper;

        public GetLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageTypeById_LanguageTypes_Items_Languages_Language> getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper = getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper));
        }

        public GetLanguageTypeById_LanguageTypes_Items_LanguageType Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetLanguageTypeById_LanguageTypes_Items_LanguageType(
                entity.Id,
                entity.Name,
                MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesNonNullableArray(
                    entity.Languages,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages> MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var languages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                languages.Add(MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_Languages(
                    child,
                    snapshot));
            }

            return languages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages MapNonNullableIGetLanguageTypeById_LanguageTypes_Items_Languages(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetLanguageTypeById_LanguageTypes_Items_LanguageType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeById_LanguageTypes_Items_LanguageType
        : global::System.IEquatable<GetLanguageTypeById_LanguageTypes_Items_LanguageType>
        , IGetLanguageTypeById_LanguageTypes_Items_LanguageType
    {
        public GetLanguageTypeById_LanguageTypes_Items_LanguageType(
            global::System.Guid id,
            global::System.String name,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages> languages)
        {
            Id = id;
            Name = name;
            Languages = languages;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages> Languages { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypeById_LanguageTypes_Items_LanguageType)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypeById_LanguageTypes_Items_LanguageType? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Languages,
                        other.Languages);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                foreach (var Languages_elm in Languages)
                {
                    hash ^= 397 * Languages_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetLanguageTypeById_LanguageTypes_Items_Languages_Language>
    {
        public GetLanguageTypeById_LanguageTypes_Items_Languages_Language Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetLanguageTypeById_LanguageTypes_Items_Languages_Language(
                entity.Id,
                entity.Name);
        }
    }
}


// GetLanguageTypeById_LanguageTypes_Items_Languages_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeById_LanguageTypes_Items_Languages_Language
        : global::System.IEquatable<GetLanguageTypeById_LanguageTypes_Items_Languages_Language>
        , IGetLanguageTypeById_LanguageTypes_Items_Languages_Language
    {
        public GetLanguageTypeById_LanguageTypes_Items_Languages_Language(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypeById_LanguageTypes_Items_Languages_Language)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypeById_LanguageTypes_Items_Languages_Language? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetLanguageTypeByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes? LanguageTypes { get; }
    }
}


// IGetLanguageTypeById_LanguageTypes.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeById_LanguageTypes
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items?>? Items { get; }
    }
}


// IGetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeById_LanguageTypes_LanguageTypeCollectionSegment
        : IGetLanguageTypeById_LanguageTypes
    {
    }
}


// IGetLanguageTypeById_LanguageTypes_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeById_LanguageTypes_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeById_LanguageTypes_Items_Languages> Languages { get; }
    }
}


// IGetLanguageTypeById_LanguageTypes_Items_LanguageType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeById_LanguageTypes_Items_LanguageType
        : IGetLanguageTypeById_LanguageTypes_Items
    {
    }
}


// IGetLanguageTypeById_LanguageTypes_Items_Languages.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeById_LanguageTypes_Items_Languages
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetLanguageTypeById_LanguageTypes_Items_Languages_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypeById_LanguageTypes_Items_Languages_Language
        : IGetLanguageTypeById_LanguageTypes_Items_Languages
    {
    }
}


// GetLanguageTypesPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetLanguageTypesPage_LanguageTypes_Items_LanguageType> _getLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper;

        public GetLanguageTypesPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetLanguageTypesPage_LanguageTypes_Items_LanguageType> getLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper = getLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult);

        public GetLanguageTypesPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetLanguageTypesPageResultInfo info)
            {
                return new GetLanguageTypesPageResult(MapIGetLanguageTypesPage_LanguageTypes(
                    info.LanguageTypes,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetLanguageTypesPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes? MapIGetLanguageTypesPage_LanguageTypes(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetLanguageTypesPage_LanguageTypes returnValue = default!;

            if (data?.__typename.Equals(
                    "LanguageTypeCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetLanguageTypesPage_LanguageTypes_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes_Items?>? MapIGetLanguageTypesPage_LanguageTypes_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var languageTypes = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                languageTypes.Add(MapIGetLanguageTypesPage_LanguageTypes_Items(
                    child,
                    snapshot));
            }

            return languageTypes;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes_Items? MapIGetLanguageTypesPage_LanguageTypes_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                return _getLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetLanguageTypesPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetLanguageTypesPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? languageTypes,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            LanguageTypes = languageTypes;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? LanguageTypes { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetLanguageTypesPageResultInfo(
                LanguageTypes,
                _entityIds,
                version);
        }
    }
}


// GetLanguageTypesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPageResult
        : global::System.IEquatable<GetLanguageTypesPageResult>
        , IGetLanguageTypesPageResult
    {
        public GetLanguageTypesPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes? languageTypes)
        {
            LanguageTypes = languageTypes;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes? LanguageTypes { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypesPageResult)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypesPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LanguageTypes is null && other.LanguageTypes is null) ||LanguageTypes != null && LanguageTypes.Equals(other.LanguageTypes)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(LanguageTypes is null))
                {
                    hash ^= 397 * LanguageTypes.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment
        : global::System.IEquatable<GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment>
        , IGetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment
    {
        public GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetLanguageTypesPage_LanguageTypes_Items_LanguageType>
    {
        public GetLanguageTypesPage_LanguageTypes_Items_LanguageType Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetLanguageTypesPage_LanguageTypes_Items_LanguageType(
                entity.Id,
                entity.Name);
        }
    }
}


// GetLanguageTypesPage_LanguageTypes_Items_LanguageType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPage_LanguageTypes_Items_LanguageType
        : global::System.IEquatable<GetLanguageTypesPage_LanguageTypes_Items_LanguageType>
        , IGetLanguageTypesPage_LanguageTypes_Items_LanguageType
    {
        public GetLanguageTypesPage_LanguageTypes_Items_LanguageType(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetLanguageTypesPage_LanguageTypes_Items_LanguageType)obj);
        }

        public global::System.Boolean Equals(GetLanguageTypesPage_LanguageTypes_Items_LanguageType? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetLanguageTypesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypesPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes? LanguageTypes { get; }
    }
}


// IGetLanguageTypesPage_LanguageTypes.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypesPage_LanguageTypes
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPage_LanguageTypes_Items?>? Items { get; }
    }
}


// IGetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypesPage_LanguageTypes_LanguageTypeCollectionSegment
        : IGetLanguageTypesPage_LanguageTypes
    {
    }
}


// IGetLanguageTypesPage_LanguageTypes_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypesPage_LanguageTypes_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetLanguageTypesPage_LanguageTypes_Items_LanguageType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetLanguageTypesPage_LanguageTypes_Items_LanguageType
        : IGetLanguageTypesPage_LanguageTypes_Items
    {
    }
}


// GetMagicComponentByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetMagicComponentById_SpellComponents_Items_SpellComponent> _getMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicComponentById_SpellComponents_Items_Spells_Spell> _getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper;

        public GetMagicComponentByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetMagicComponentById_SpellComponents_Items_SpellComponent> getMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicComponentById_SpellComponents_Items_Spells_Spell> getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper = getMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper));
            _getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper = getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult);

        public GetMagicComponentByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicComponentByIdResultInfo info)
            {
                return new GetMagicComponentByIdResult(MapIGetMagicComponentById_SpellComponents(
                    info.SpellComponents,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicComponentByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents? MapIGetMagicComponentById_SpellComponents(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicComponentById_SpellComponents returnValue = default!;

            if (data?.__typename.Equals(
                    "SpellComponentCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment(MapIGetMagicComponentById_SpellComponents_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items?>? MapIGetMagicComponentById_SpellComponents_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var spellComponents = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                spellComponents.Add(MapIGetMagicComponentById_SpellComponents_Items(
                    child,
                    snapshot));
            }

            return spellComponents;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items? MapIGetMagicComponentById_SpellComponents_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells> MapNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetMagicComponentById_SpellComponents_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells MapNonNullableIGetMagicComponentById_SpellComponents_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicComponentByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicComponentByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? spellComponents,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            SpellComponents = spellComponents;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? SpellComponents { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicComponentByIdResultInfo(
                SpellComponents,
                _entityIds,
                version);
        }
    }
}


// GetMagicComponentByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentByIdResult
        : global::System.IEquatable<GetMagicComponentByIdResult>
        , IGetMagicComponentByIdResult
    {
        public GetMagicComponentByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents? spellComponents)
        {
            SpellComponents = spellComponents;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents? SpellComponents { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponentByIdResult)obj);
        }

        public global::System.Boolean Equals(GetMagicComponentByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SpellComponents is null && other.SpellComponents is null) ||SpellComponents != null && SpellComponents.Equals(other.SpellComponents)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(SpellComponents is null))
                {
                    hash ^= 397 * SpellComponents.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment
        : global::System.IEquatable<GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment>
        , IGetMagicComponentById_SpellComponents_SpellComponentCollectionSegment
    {
        public GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicComponentById_SpellComponents_SpellComponentCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetMagicComponentById_SpellComponents_Items_SpellComponent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicComponentById_SpellComponents_Items_Spells_Spell> _getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper;

        public GetMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicComponentById_SpellComponents_Items_Spells_Spell> getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper = getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper));
        }

        public GetMagicComponentById_SpellComponents_Items_SpellComponent Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMagicComponentById_SpellComponents_Items_SpellComponent(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsNonNullableArray(
                    entity.Spells,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells> MapNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetMagicComponentById_SpellComponents_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells MapNonNullableIGetMagicComponentById_SpellComponents_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetMagicComponentById_SpellComponents_Items_SpellComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentById_SpellComponents_Items_SpellComponent
        : global::System.IEquatable<GetMagicComponentById_SpellComponents_Items_SpellComponent>
        , IGetMagicComponentById_SpellComponents_Items_SpellComponent
    {
        public GetMagicComponentById_SpellComponents_Items_SpellComponent(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells> Spells { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponentById_SpellComponents_Items_SpellComponent)obj);
        }

        public global::System.Boolean Equals(GetMagicComponentById_SpellComponents_Items_SpellComponent? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Spells,
                        other.Spells);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Spells_elm in Spells)
                {
                    hash ^= 397 * Spells_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicComponentById_SpellComponents_Items_Spells_Spell>
    {
        public GetMagicComponentById_SpellComponents_Items_Spells_Spell Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicComponentById_SpellComponents_Items_Spells_Spell(
                entity.Id,
                entity.Name,
                entity.Description,
                entity.Level);
        }
    }
}


// GetMagicComponentById_SpellComponents_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentById_SpellComponents_Items_Spells_Spell
        : global::System.IEquatable<GetMagicComponentById_SpellComponents_Items_Spells_Spell>
        , IGetMagicComponentById_SpellComponents_Items_Spells_Spell
    {
        public GetMagicComponentById_SpellComponents_Items_Spells_Spell(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32 level)
        {
            Id = id;
            Name = name;
            Description = description;
            Level = level;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponentById_SpellComponents_Items_Spells_Spell)obj);
        }

        public global::System.Boolean Equals(GetMagicComponentById_SpellComponents_Items_Spells_Spell? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && Level == other.Level;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicComponentByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents? SpellComponents { get; }
    }
}


// IGetMagicComponentById_SpellComponents.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentById_SpellComponents
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items?>? Items { get; }
    }
}


// IGetMagicComponentById_SpellComponents_SpellComponentCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentById_SpellComponents_SpellComponentCollectionSegment
        : IGetMagicComponentById_SpellComponents
    {
    }
}


// IMagicComponentById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicComponentById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentById_SpellComponents_Items_Spells> Spells { get; }
    }
}


// IGetMagicComponentById_SpellComponents_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentById_SpellComponents_Items
        : IMagicComponentById
    {
    }
}


// IGetMagicComponentById_SpellComponents_Items_SpellComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentById_SpellComponents_Items_SpellComponent
        : IGetMagicComponentById_SpellComponents_Items
    {
    }
}


// IMagicComponentById_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicComponentById_Spell
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }
    }
}


// IGetMagicComponentById_SpellComponents_Items_Spells.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentById_SpellComponents_Items_Spells
        : IMagicComponentById_Spell
    {
    }
}


// IGetMagicComponentById_SpellComponents_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentById_SpellComponents_Items_Spells_Spell
        : IGetMagicComponentById_SpellComponents_Items_Spells
    {
    }
}


// GetMagicComponentsResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentsResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetMagicComponents_SpellComponents_Items_SpellComponent> _getMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper;

        public GetMagicComponentsResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetMagicComponents_SpellComponents_Items_SpellComponent> getMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper = getMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult);

        public GetMagicComponentsResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicComponentsResultInfo info)
            {
                return new GetMagicComponentsResult(MapIGetMagicComponents_SpellComponents(
                    info.SpellComponents,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicComponentsResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents? MapIGetMagicComponents_SpellComponents(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicComponents_SpellComponents returnValue = default!;

            if (data?.__typename.Equals(
                    "SpellComponentCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicComponents_SpellComponents_SpellComponentCollectionSegment(MapIGetMagicComponents_SpellComponents_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents_Items?>? MapIGetMagicComponents_SpellComponents_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var spellComponents = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                spellComponents.Add(MapIGetMagicComponents_SpellComponents_Items(
                    child,
                    snapshot));
            }

            return spellComponents;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents_Items? MapIGetMagicComponents_SpellComponents_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicComponentsResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentsResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicComponentsResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? spellComponents,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            SpellComponents = spellComponents;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? SpellComponents { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicComponentsResultInfo(
                SpellComponents,
                _entityIds,
                version);
        }
    }
}


// GetMagicComponentsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentsResult
        : global::System.IEquatable<GetMagicComponentsResult>
        , IGetMagicComponentsResult
    {
        public GetMagicComponentsResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents? spellComponents)
        {
            SpellComponents = spellComponents;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents? SpellComponents { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponentsResult)obj);
        }

        public global::System.Boolean Equals(GetMagicComponentsResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SpellComponents is null && other.SpellComponents is null) ||SpellComponents != null && SpellComponents.Equals(other.SpellComponents)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(SpellComponents is null))
                {
                    hash ^= 397 * SpellComponents.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicComponents_SpellComponents_SpellComponentCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponents_SpellComponents_SpellComponentCollectionSegment
        : global::System.IEquatable<GetMagicComponents_SpellComponents_SpellComponentCollectionSegment>
        , IGetMagicComponents_SpellComponents_SpellComponentCollectionSegment
    {
        public GetMagicComponents_SpellComponents_SpellComponentCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponents_SpellComponents_SpellComponentCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicComponents_SpellComponents_SpellComponentCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetMagicComponents_SpellComponents_Items_SpellComponent>
    {
        public GetMagicComponents_SpellComponents_Items_SpellComponent Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicComponents_SpellComponents_Items_SpellComponent(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetMagicComponents_SpellComponents_Items_SpellComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponents_SpellComponents_Items_SpellComponent
        : global::System.IEquatable<GetMagicComponents_SpellComponents_Items_SpellComponent>
        , IGetMagicComponents_SpellComponents_Items_SpellComponent
    {
        public GetMagicComponents_SpellComponents_Items_SpellComponent(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicComponents_SpellComponents_Items_SpellComponent)obj);
        }

        public global::System.Boolean Equals(GetMagicComponents_SpellComponents_Items_SpellComponent? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicComponentsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponentsResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents? SpellComponents { get; }
    }
}


// IGetMagicComponents_SpellComponents.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponents_SpellComponents
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponents_SpellComponents_Items?>? Items { get; }
    }
}


// IGetMagicComponents_SpellComponents_SpellComponentCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponents_SpellComponents_SpellComponentCollectionSegment
        : IGetMagicComponents_SpellComponents
    {
    }
}


// IMagicComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicComponent
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetMagicComponents_SpellComponents_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponents_SpellComponents_Items
        : IMagicComponent
    {
    }
}


// IGetMagicComponents_SpellComponents_Items_SpellComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicComponents_SpellComponents_Items_SpellComponent
        : IGetMagicComponents_SpellComponents_Items
    {
    }
}


// GetMagicEssencesResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssencesResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity, GetMagicEssences_MagicEssences_Items_MagicEssence> _getMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper;

        public GetMagicEssencesResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity, GetMagicEssences_MagicEssences_Items_MagicEssence> getMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper = getMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult);

        public GetMagicEssencesResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicEssencesResultInfo info)
            {
                return new GetMagicEssencesResult(MapIGetMagicEssences_MagicEssences(
                    info.MagicEssences,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicEssencesResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences? MapIGetMagicEssences_MagicEssences(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicEssences_MagicEssences returnValue = default!;

            if (data?.__typename.Equals(
                    "MagicEssenceCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment(MapIGetMagicEssences_MagicEssences_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences_Items?>? MapIGetMagicEssences_MagicEssences_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var magicEssences = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                magicEssences.Add(MapIGetMagicEssences_MagicEssences_Items(
                    child,
                    snapshot));
            }

            return magicEssences;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences_Items? MapIGetMagicEssences_MagicEssences_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicEssence",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicEssencesResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssencesResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicEssencesResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceCollectionSegmentData? magicEssences,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            MagicEssences = magicEssences;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceCollectionSegmentData? MagicEssences { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicEssencesResultInfo(
                MagicEssences,
                _entityIds,
                version);
        }
    }
}


// GetMagicEssencesResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssencesResult
        : global::System.IEquatable<GetMagicEssencesResult>
        , IGetMagicEssencesResult
    {
        public GetMagicEssencesResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences? magicEssences)
        {
            MagicEssences = magicEssences;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences? MagicEssences { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicEssencesResult)obj);
        }

        public global::System.Boolean Equals(GetMagicEssencesResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MagicEssences is null && other.MagicEssences is null) ||MagicEssences != null && MagicEssences.Equals(other.MagicEssences)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(MagicEssences is null))
                {
                    hash ^= 397 * MagicEssences.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment
        : global::System.IEquatable<GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment>
        , IGetMagicEssences_MagicEssences_MagicEssenceCollectionSegment
    {
        public GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicEssences_MagicEssences_MagicEssenceCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity, GetMagicEssences_MagicEssences_Items_MagicEssence>
    {
        public GetMagicEssences_MagicEssences_Items_MagicEssence Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicEssences_MagicEssences_Items_MagicEssence(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetMagicEssences_MagicEssences_Items_MagicEssence.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssences_MagicEssences_Items_MagicEssence
        : global::System.IEquatable<GetMagicEssences_MagicEssences_Items_MagicEssence>
        , IGetMagicEssences_MagicEssences_Items_MagicEssence
    {
        public GetMagicEssences_MagicEssences_Items_MagicEssence(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicEssences_MagicEssences_Items_MagicEssence)obj);
        }

        public global::System.Boolean Equals(GetMagicEssences_MagicEssences_Items_MagicEssence? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicEssencesResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicEssencesResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences? MagicEssences { get; }
    }
}


// IGetMagicEssences_MagicEssences.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicEssences_MagicEssences
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssences_MagicEssences_Items?>? Items { get; }
    }
}


// IGetMagicEssences_MagicEssences_MagicEssenceCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicEssences_MagicEssences_MagicEssenceCollectionSegment
        : IGetMagicEssences_MagicEssences
    {
    }
}


// IMagicEssence.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicEssence
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetMagicEssences_MagicEssences_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicEssences_MagicEssences_Items
        : IMagicEssence
    {
    }
}


// IGetMagicEssences_MagicEssences_Items_MagicEssence.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicEssences_MagicEssences_Items_MagicEssence
        : IGetMagicEssences_MagicEssences_Items
    {
    }
}


// GetMagicSchoolByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetMagicSchoolById_MagicSchools_Items_MagicSchool> _getMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicSchoolById_MagicSchools_Items_Spells_Spell> _getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper;

        public GetMagicSchoolByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetMagicSchoolById_MagicSchools_Items_MagicSchool> getMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicSchoolById_MagicSchools_Items_Spells_Spell> getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper = getMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper));
            _getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper = getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult);

        public GetMagicSchoolByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicSchoolByIdResultInfo info)
            {
                return new GetMagicSchoolByIdResult(MapIGetMagicSchoolById_MagicSchools(
                    info.MagicSchools,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicSchoolByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools? MapIGetMagicSchoolById_MagicSchools(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicSchoolById_MagicSchools returnValue = default!;

            if (data?.__typename.Equals(
                    "MagicSchoolCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment(MapIGetMagicSchoolById_MagicSchools_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items?>? MapIGetMagicSchoolById_MagicSchools_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var magicSchools = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                magicSchools.Add(MapIGetMagicSchoolById_MagicSchools_Items(
                    child,
                    snapshot));
            }

            return magicSchools;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items? MapIGetMagicSchoolById_MagicSchools_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells> MapNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetMagicSchoolById_MagicSchools_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells MapNonNullableIGetMagicSchoolById_MagicSchools_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicSchoolByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicSchoolByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? magicSchools,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            MagicSchools = magicSchools;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? MagicSchools { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicSchoolByIdResultInfo(
                MagicSchools,
                _entityIds,
                version);
        }
    }
}


// GetMagicSchoolByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolByIdResult
        : global::System.IEquatable<GetMagicSchoolByIdResult>
        , IGetMagicSchoolByIdResult
    {
        public GetMagicSchoolByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools? magicSchools)
        {
            MagicSchools = magicSchools;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools? MagicSchools { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchoolByIdResult)obj);
        }

        public global::System.Boolean Equals(GetMagicSchoolByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MagicSchools is null && other.MagicSchools is null) ||MagicSchools != null && MagicSchools.Equals(other.MagicSchools)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(MagicSchools is null))
                {
                    hash ^= 397 * MagicSchools.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment
        : global::System.IEquatable<GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment>
        , IGetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment
    {
        public GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetMagicSchoolById_MagicSchools_Items_MagicSchool>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicSchoolById_MagicSchools_Items_Spells_Spell> _getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper;

        public GetMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicSchoolById_MagicSchools_Items_Spells_Spell> getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper = getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper));
        }

        public GetMagicSchoolById_MagicSchools_Items_MagicSchool Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMagicSchoolById_MagicSchools_Items_MagicSchool(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsNonNullableArray(
                    entity.Spells,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells> MapNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetMagicSchoolById_MagicSchools_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells MapNonNullableIGetMagicSchoolById_MagicSchools_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetMagicSchoolById_MagicSchools_Items_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolById_MagicSchools_Items_MagicSchool
        : global::System.IEquatable<GetMagicSchoolById_MagicSchools_Items_MagicSchool>
        , IGetMagicSchoolById_MagicSchools_Items_MagicSchool
    {
        public GetMagicSchoolById_MagicSchools_Items_MagicSchool(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells> Spells { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchoolById_MagicSchools_Items_MagicSchool)obj);
        }

        public global::System.Boolean Equals(GetMagicSchoolById_MagicSchools_Items_MagicSchool? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Spells,
                        other.Spells);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Spells_elm in Spells)
                {
                    hash ^= 397 * Spells_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicSchoolById_MagicSchools_Items_Spells_Spell>
    {
        public GetMagicSchoolById_MagicSchools_Items_Spells_Spell Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicSchoolById_MagicSchools_Items_Spells_Spell(
                entity.Id,
                entity.Name,
                entity.Description,
                entity.Level);
        }
    }
}


// GetMagicSchoolById_MagicSchools_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolById_MagicSchools_Items_Spells_Spell
        : global::System.IEquatable<GetMagicSchoolById_MagicSchools_Items_Spells_Spell>
        , IGetMagicSchoolById_MagicSchools_Items_Spells_Spell
    {
        public GetMagicSchoolById_MagicSchools_Items_Spells_Spell(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32 level)
        {
            Id = id;
            Name = name;
            Description = description;
            Level = level;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchoolById_MagicSchools_Items_Spells_Spell)obj);
        }

        public global::System.Boolean Equals(GetMagicSchoolById_MagicSchools_Items_Spells_Spell? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && Level == other.Level;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicSchoolByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools? MagicSchools { get; }
    }
}


// IGetMagicSchoolById_MagicSchools.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolById_MagicSchools
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items?>? Items { get; }
    }
}


// IGetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolById_MagicSchools_MagicSchoolCollectionSegment
        : IGetMagicSchoolById_MagicSchools
    {
    }
}


// IMagicSchoolById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicSchoolById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolById_MagicSchools_Items_Spells> Spells { get; }
    }
}


// IGetMagicSchoolById_MagicSchools_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolById_MagicSchools_Items
        : IMagicSchoolById
    {
    }
}


// IGetMagicSchoolById_MagicSchools_Items_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolById_MagicSchools_Items_MagicSchool
        : IGetMagicSchoolById_MagicSchools_Items
    {
    }
}


// IMagicSchoolById_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicSchoolById_Spell
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }
    }
}


// IGetMagicSchoolById_MagicSchools_Items_Spells.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolById_MagicSchools_Items_Spells
        : IMagicSchoolById_Spell
    {
    }
}


// IGetMagicSchoolById_MagicSchools_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolById_MagicSchools_Items_Spells_Spell
        : IGetMagicSchoolById_MagicSchools_Items_Spells
    {
    }
}


// GetMagicSchoolsResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolsResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetMagicSchools_MagicSchools_Items_MagicSchool> _getMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper;

        public GetMagicSchoolsResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetMagicSchools_MagicSchools_Items_MagicSchool> getMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper = getMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult);

        public GetMagicSchoolsResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicSchoolsResultInfo info)
            {
                return new GetMagicSchoolsResult(MapIGetMagicSchools_MagicSchools(
                    info.MagicSchools,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicSchoolsResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools? MapIGetMagicSchools_MagicSchools(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicSchools_MagicSchools returnValue = default!;

            if (data?.__typename.Equals(
                    "MagicSchoolCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment(MapIGetMagicSchools_MagicSchools_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools_Items?>? MapIGetMagicSchools_MagicSchools_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var magicSchools = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                magicSchools.Add(MapIGetMagicSchools_MagicSchools_Items(
                    child,
                    snapshot));
            }

            return magicSchools;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools_Items? MapIGetMagicSchools_MagicSchools_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicSchoolsResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolsResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicSchoolsResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? magicSchools,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            MagicSchools = magicSchools;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? MagicSchools { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicSchoolsResultInfo(
                MagicSchools,
                _entityIds,
                version);
        }
    }
}


// GetMagicSchoolsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolsResult
        : global::System.IEquatable<GetMagicSchoolsResult>
        , IGetMagicSchoolsResult
    {
        public GetMagicSchoolsResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools? magicSchools)
        {
            MagicSchools = magicSchools;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools? MagicSchools { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchoolsResult)obj);
        }

        public global::System.Boolean Equals(GetMagicSchoolsResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MagicSchools is null && other.MagicSchools is null) ||MagicSchools != null && MagicSchools.Equals(other.MagicSchools)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(MagicSchools is null))
                {
                    hash ^= 397 * MagicSchools.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment
        : global::System.IEquatable<GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment>
        , IGetMagicSchools_MagicSchools_MagicSchoolCollectionSegment
    {
        public GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicSchools_MagicSchools_MagicSchoolCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetMagicSchools_MagicSchools_Items_MagicSchool>
    {
        public GetMagicSchools_MagicSchools_Items_MagicSchool Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicSchools_MagicSchools_Items_MagicSchool(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetMagicSchools_MagicSchools_Items_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchools_MagicSchools_Items_MagicSchool
        : global::System.IEquatable<GetMagicSchools_MagicSchools_Items_MagicSchool>
        , IGetMagicSchools_MagicSchools_Items_MagicSchool
    {
        public GetMagicSchools_MagicSchools_Items_MagicSchool(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicSchools_MagicSchools_Items_MagicSchool)obj);
        }

        public global::System.Boolean Equals(GetMagicSchools_MagicSchools_Items_MagicSchool? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicSchoolsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchoolsResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools? MagicSchools { get; }
    }
}


// IGetMagicSchools_MagicSchools.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchools_MagicSchools
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchools_MagicSchools_Items?>? Items { get; }
    }
}


// IGetMagicSchools_MagicSchools_MagicSchoolCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchools_MagicSchools_MagicSchoolCollectionSegment
        : IGetMagicSchools_MagicSchools
    {
    }
}


// IMagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicSchool
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetMagicSchools_MagicSchools_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchools_MagicSchools_Items
        : IMagicSchool
    {
    }
}


// IGetMagicSchools_MagicSchools_Items_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicSchools_MagicSchools_Items_MagicSchool
        : IGetMagicSchools_MagicSchools_Items
    {
    }
}


// GetMagicTraditionByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetMagicTraditionById_MagicTraditions_Items_MagicTradition> _getMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicTraditionById_MagicTraditions_Items_Spells_Spell> _getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper;

        public GetMagicTraditionByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetMagicTraditionById_MagicTraditions_Items_MagicTradition> getMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicTraditionById_MagicTraditions_Items_Spells_Spell> getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper = getMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper));
            _getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper = getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult);

        public GetMagicTraditionByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicTraditionByIdResultInfo info)
            {
                return new GetMagicTraditionByIdResult(MapIGetMagicTraditionById_MagicTraditions(
                    info.MagicTraditions,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicTraditionByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions? MapIGetMagicTraditionById_MagicTraditions(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicTraditionById_MagicTraditions returnValue = default!;

            if (data?.__typename.Equals(
                    "MagicTraditionCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment(MapIGetMagicTraditionById_MagicTraditions_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items?>? MapIGetMagicTraditionById_MagicTraditions_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var magicTraditions = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                magicTraditions.Add(MapIGetMagicTraditionById_MagicTraditions_Items(
                    child,
                    snapshot));
            }

            return magicTraditions;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items? MapIGetMagicTraditionById_MagicTraditions_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells> MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicTraditionByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicTraditionByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? magicTraditions,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            MagicTraditions = magicTraditions;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? MagicTraditions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicTraditionByIdResultInfo(
                MagicTraditions,
                _entityIds,
                version);
        }
    }
}


// GetMagicTraditionByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionByIdResult
        : global::System.IEquatable<GetMagicTraditionByIdResult>
        , IGetMagicTraditionByIdResult
    {
        public GetMagicTraditionByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions? magicTraditions)
        {
            MagicTraditions = magicTraditions;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions? MagicTraditions { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditionByIdResult)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditionByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MagicTraditions is null && other.MagicTraditions is null) ||MagicTraditions != null && MagicTraditions.Equals(other.MagicTraditions)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(MagicTraditions is null))
                {
                    hash ^= 397 * MagicTraditions.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment
        : global::System.IEquatable<GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment>
        , IGetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment
    {
        public GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetMagicTraditionById_MagicTraditions_Items_MagicTradition>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicTraditionById_MagicTraditions_Items_Spells_Spell> _getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper;

        public GetMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicTraditionById_MagicTraditions_Items_Spells_Spell> getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper = getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper));
        }

        public GetMagicTraditionById_MagicTraditions_Items_MagicTradition Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMagicTraditionById_MagicTraditions_Items_MagicTradition(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsNonNullableArray(
                    entity.Spells,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells> MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells MapNonNullableIGetMagicTraditionById_MagicTraditions_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetMagicTraditionById_MagicTraditions_Items_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionById_MagicTraditions_Items_MagicTradition
        : global::System.IEquatable<GetMagicTraditionById_MagicTraditions_Items_MagicTradition>
        , IGetMagicTraditionById_MagicTraditions_Items_MagicTradition
    {
        public GetMagicTraditionById_MagicTraditions_Items_MagicTradition(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells> Spells { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditionById_MagicTraditions_Items_MagicTradition)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditionById_MagicTraditions_Items_MagicTradition? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Spells,
                        other.Spells);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Spells_elm in Spells)
                {
                    hash ^= 397 * Spells_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetMagicTraditionById_MagicTraditions_Items_Spells_Spell>
    {
        public GetMagicTraditionById_MagicTraditions_Items_Spells_Spell Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicTraditionById_MagicTraditions_Items_Spells_Spell(
                entity.Id,
                entity.Name,
                entity.Description,
                entity.Level);
        }
    }
}


// GetMagicTraditionById_MagicTraditions_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionById_MagicTraditions_Items_Spells_Spell
        : global::System.IEquatable<GetMagicTraditionById_MagicTraditions_Items_Spells_Spell>
        , IGetMagicTraditionById_MagicTraditions_Items_Spells_Spell
    {
        public GetMagicTraditionById_MagicTraditions_Items_Spells_Spell(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32 level)
        {
            Id = id;
            Name = name;
            Description = description;
            Level = level;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditionById_MagicTraditions_Items_Spells_Spell)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditionById_MagicTraditions_Items_Spells_Spell? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && Level == other.Level;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicTraditionByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions? MagicTraditions { get; }
    }
}


// IGetMagicTraditionById_MagicTraditions.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionById_MagicTraditions
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items?>? Items { get; }
    }
}


// IGetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionById_MagicTraditions_MagicTraditionCollectionSegment
        : IGetMagicTraditionById_MagicTraditions
    {
    }
}


// IMagicTraditionById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicTraditionById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionById_MagicTraditions_Items_Spells> Spells { get; }
    }
}


// IGetMagicTraditionById_MagicTraditions_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionById_MagicTraditions_Items
        : IMagicTraditionById
    {
    }
}


// IGetMagicTraditionById_MagicTraditions_Items_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionById_MagicTraditions_Items_MagicTradition
        : IGetMagicTraditionById_MagicTraditions_Items
    {
    }
}


// IMagicTraditionById_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicTraditionById_Spell
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Level { get; }
    }
}


// IGetMagicTraditionById_MagicTraditions_Items_Spells.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionById_MagicTraditions_Items_Spells
        : IMagicTraditionById_Spell
    {
    }
}


// IGetMagicTraditionById_MagicTraditions_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionById_MagicTraditions_Items_Spells_Spell
        : IGetMagicTraditionById_MagicTraditions_Items_Spells
    {
    }
}


// GetMagicTraditionsResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionsResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetMagicTraditions_MagicTraditions_Items_MagicTradition> _getMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper;

        public GetMagicTraditionsResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetMagicTraditions_MagicTraditions_Items_MagicTradition> getMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper = getMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult);

        public GetMagicTraditionsResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMagicTraditionsResultInfo info)
            {
                return new GetMagicTraditionsResult(MapIGetMagicTraditions_MagicTraditions(
                    info.MagicTraditions,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetMagicTraditionsResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions? MapIGetMagicTraditions_MagicTraditions(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMagicTraditions_MagicTraditions returnValue = default!;

            if (data?.__typename.Equals(
                    "MagicTraditionCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment(MapIGetMagicTraditions_MagicTraditions_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions_Items?>? MapIGetMagicTraditions_MagicTraditions_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var magicTraditions = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                magicTraditions.Add(MapIGetMagicTraditions_MagicTraditions_Items(
                    child,
                    snapshot));
            }

            return magicTraditions;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions_Items? MapIGetMagicTraditions_MagicTraditions_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                return _getMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetMagicTraditionsResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionsResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetMagicTraditionsResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? magicTraditions,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            MagicTraditions = magicTraditions;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? MagicTraditions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMagicTraditionsResultInfo(
                MagicTraditions,
                _entityIds,
                version);
        }
    }
}


// GetMagicTraditionsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionsResult
        : global::System.IEquatable<GetMagicTraditionsResult>
        , IGetMagicTraditionsResult
    {
        public GetMagicTraditionsResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions? magicTraditions)
        {
            MagicTraditions = magicTraditions;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions? MagicTraditions { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditionsResult)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditionsResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MagicTraditions is null && other.MagicTraditions is null) ||MagicTraditions != null && MagicTraditions.Equals(other.MagicTraditions)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(MagicTraditions is null))
                {
                    hash ^= 397 * MagicTraditions.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment
        : global::System.IEquatable<GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment>
        , IGetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment
    {
        public GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetMagicTraditions_MagicTraditions_Items_MagicTradition>
    {
        public GetMagicTraditions_MagicTraditions_Items_MagicTradition Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetMagicTraditions_MagicTraditions_Items_MagicTradition(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetMagicTraditions_MagicTraditions_Items_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditions_MagicTraditions_Items_MagicTradition
        : global::System.IEquatable<GetMagicTraditions_MagicTraditions_Items_MagicTradition>
        , IGetMagicTraditions_MagicTraditions_Items_MagicTradition
    {
        public GetMagicTraditions_MagicTraditions_Items_MagicTradition(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMagicTraditions_MagicTraditions_Items_MagicTradition)obj);
        }

        public global::System.Boolean Equals(GetMagicTraditions_MagicTraditions_Items_MagicTradition? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetMagicTraditionsResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditionsResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions? MagicTraditions { get; }
    }
}


// IGetMagicTraditions_MagicTraditions.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditions_MagicTraditions
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditions_MagicTraditions_Items?>? Items { get; }
    }
}


// IGetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditions_MagicTraditions_MagicTraditionCollectionSegment
        : IGetMagicTraditions_MagicTraditions
    {
    }
}


// IMagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IMagicTradition
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetMagicTraditions_MagicTraditions_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditions_MagicTraditions_Items
        : IMagicTradition
    {
    }
}


// IGetMagicTraditions_MagicTraditions_Items_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetMagicTraditions_MagicTraditions_Items_MagicTradition
        : IGetMagicTraditions_MagicTraditions_Items
    {
    }
}


// GetRaceByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetRaceById_Races_Items_Race> _getRaceById_Races_Items_RaceFromRaceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRaceById_Races_Items_RaceSize_RaceSize> _getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRaceById_Races_Items_RaceRarity_RaceRarity> _getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetRaceById_Races_Items_Languages_Language> _getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType> _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity, GetRaceById_Races_Items_RaceTraits_RaceTrait> _getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity, GetRaceById_Races_Items_Heritages_Heritage> _getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity> _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper;

        public GetRaceByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetRaceById_Races_Items_Race> getRaceById_Races_Items_RaceFromRaceEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRaceById_Races_Items_RaceSize_RaceSize> getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRaceById_Races_Items_RaceRarity_RaceRarity> getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetRaceById_Races_Items_Languages_Language> getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType> getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity, GetRaceById_Races_Items_RaceTraits_RaceTrait> getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity, GetRaceById_Races_Items_Heritages_Heritage> getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity> getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRaceById_Races_Items_RaceFromRaceEntityMapper = getRaceById_Races_Items_RaceFromRaceEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceFromRaceEntityMapper));
            _getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper = getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper));
            _getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper = getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper));
            _getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper = getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper));
            _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper = getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper));
            _getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper = getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper));
            _getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper = getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper));
            _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper = getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult);

        public GetRaceByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRaceByIdResultInfo info)
            {
                return new GetRaceByIdResult(MapIGetRaceById_Races(
                    info.Races,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetRaceByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races? MapIGetRaceById_Races(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRaceById_Races returnValue = default!;

            if (data?.__typename.Equals(
                    "RaceCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRaceById_Races_RaceCollectionSegment(MapIGetRaceById_Races_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items?>? MapIGetRaceById_Races_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var races = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                races.Add(MapIGetRaceById_Races_Items(
                    child,
                    snapshot));
            }

            return races;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items? MapIGetRaceById_Races_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceFromRaceEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceSize MapNonNullableIGetRaceById_Races_Items_RaceSize(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceSize",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceRarity MapNonNullableIGetRaceById_Races_Items_RaceRarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages> MapNonNullableIGetRaceById_Races_Items_LanguagesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var languages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                languages.Add(MapNonNullableIGetRaceById_Races_Items_Languages(
                    child,
                    snapshot));
            }

            return languages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages MapNonNullableIGetRaceById_Races_Items_Languages(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages_Type MapNonNullableIGetRaceById_Races_Items_Languages_Type(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits> MapNonNullableIGetRaceById_Races_Items_RaceTraitsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var raceTraits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                raceTraits.Add(MapNonNullableIGetRaceById_Races_Items_RaceTraits(
                    child,
                    snapshot));
            }

            return raceTraits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits MapNonNullableIGetRaceById_Races_Items_RaceTraits(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceTrait",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages> MapNonNullableIGetRaceById_Races_Items_HeritagesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var heritages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                heritages.Add(MapNonNullableIGetRaceById_Races_Items_Heritages(
                    child,
                    snapshot));
            }

            return heritages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages MapNonNullableIGetRaceById_Races_Items_Heritages(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Heritage",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages_Rarity MapNonNullableIGetRaceById_Races_Items_Heritages_Rarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "HeritageRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetRaceByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetRaceByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? races,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Races = races;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? Races { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRaceByIdResultInfo(
                Races,
                _entityIds,
                version);
        }
    }
}


// GetRaceByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceByIdResult
        : global::System.IEquatable<GetRaceByIdResult>
        , IGetRaceByIdResult
    {
        public GetRaceByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races? races)
        {
            Races = races;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races? Races { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceByIdResult)obj);
        }

        public global::System.Boolean Equals(GetRaceByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Races is null && other.Races is null) ||Races != null && Races.Equals(other.Races)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Races is null))
                {
                    hash ^= 397 * Races.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetRaceById_Races_RaceCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_RaceCollectionSegment
        : global::System.IEquatable<GetRaceById_Races_RaceCollectionSegment>
        , IGetRaceById_Races_RaceCollectionSegment
    {
        public GetRaceById_Races_RaceCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_RaceCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_RaceCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_RaceFromRaceEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceFromRaceEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetRaceById_Races_Items_Race>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRaceById_Races_Items_RaceSize_RaceSize> _getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRaceById_Races_Items_RaceRarity_RaceRarity> _getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetRaceById_Races_Items_Languages_Language> _getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType> _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity, GetRaceById_Races_Items_RaceTraits_RaceTrait> _getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity, GetRaceById_Races_Items_Heritages_Heritage> _getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity> _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper;

        public GetRaceById_Races_Items_RaceFromRaceEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRaceById_Races_Items_RaceSize_RaceSize> getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRaceById_Races_Items_RaceRarity_RaceRarity> getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetRaceById_Races_Items_Languages_Language> getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType> getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity, GetRaceById_Races_Items_RaceTraits_RaceTrait> getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity, GetRaceById_Races_Items_Heritages_Heritage> getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity> getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper = getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper));
            _getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper = getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper));
            _getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper = getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper));
            _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper = getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper));
            _getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper = getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper));
            _getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper = getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper));
            _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper = getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper));
        }

        public GetRaceById_Races_Items_Race Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRaceById_Races_Items_Race(
                MapNonNullableIGetRaceById_Races_Items_RaceSize(
                    entity.RaceSize,
                    snapshot),
                MapNonNullableIGetRaceById_Races_Items_RaceRarity(
                    entity.RaceRarity,
                    snapshot),
                entity.Id,
                entity.Name,
                entity.BaseSpeed,
                entity.BaseHealth,
                MapNonNullableIGetRaceById_Races_Items_LanguagesNonNullableArray(
                    entity.Languages,
                    snapshot),
                MapNonNullableIGetRaceById_Races_Items_RaceTraitsNonNullableArray(
                    entity.RaceTraits,
                    snapshot),
                MapNonNullableIGetRaceById_Races_Items_HeritagesNonNullableArray(
                    entity.Heritages,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceSize MapNonNullableIGetRaceById_Races_Items_RaceSize(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceSize",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceRarity MapNonNullableIGetRaceById_Races_Items_RaceRarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages> MapNonNullableIGetRaceById_Races_Items_LanguagesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var languages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                languages.Add(MapNonNullableIGetRaceById_Races_Items_Languages(
                    child,
                    snapshot));
            }

            return languages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages MapNonNullableIGetRaceById_Races_Items_Languages(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages_Type MapNonNullableIGetRaceById_Races_Items_Languages_Type(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits> MapNonNullableIGetRaceById_Races_Items_RaceTraitsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var raceTraits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                raceTraits.Add(MapNonNullableIGetRaceById_Races_Items_RaceTraits(
                    child,
                    snapshot));
            }

            return raceTraits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits MapNonNullableIGetRaceById_Races_Items_RaceTraits(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceTrait",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages> MapNonNullableIGetRaceById_Races_Items_HeritagesNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var heritages = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                heritages.Add(MapNonNullableIGetRaceById_Races_Items_Heritages(
                    child,
                    snapshot));
            }

            return heritages;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages MapNonNullableIGetRaceById_Races_Items_Heritages(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Heritage",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages_Rarity MapNonNullableIGetRaceById_Races_Items_Heritages_Rarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "HeritageRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetRaceById_Races_Items_Race.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Race
        : global::System.IEquatable<GetRaceById_Races_Items_Race>
        , IGetRaceById_Races_Items_Race
    {
        public GetRaceById_Races_Items_Race(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceSize raceSize,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceRarity raceRarity,
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 baseSpeed,
            global::System.Int32 baseHealth,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages> languages,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits> raceTraits,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages> heritages)
        {
            RaceSize = raceSize;
            RaceRarity = raceRarity;
            Id = id;
            Name = name;
            BaseSpeed = baseSpeed;
            BaseHealth = baseHealth;
            Languages = languages;
            RaceTraits = raceTraits;
            Heritages = heritages;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceSize RaceSize { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceRarity RaceRarity { get; }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 BaseSpeed { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages> Languages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits> RaceTraits { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages> Heritages { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_Race)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_Race? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RaceSize.Equals(other.RaceSize))
                && RaceRarity.Equals(other.RaceRarity)
                && Id == other.Id
                && Name.Equals(other.Name)
                && BaseSpeed == other.BaseSpeed
                && BaseHealth == other.BaseHealth
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Languages,
                        other.Languages)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        RaceTraits,
                        other.RaceTraits)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Heritages,
                        other.Heritages);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * RaceSize.GetHashCode();

                hash ^= 397 * RaceRarity.GetHashCode();

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * BaseSpeed.GetHashCode();

                hash ^= 397 * BaseHealth.GetHashCode();

                foreach (var Languages_elm in Languages)
                {
                    hash ^= 397 * Languages_elm.GetHashCode();
                }

                foreach (var RaceTraits_elm in RaceTraits)
                {
                    hash ^= 397 * RaceTraits_elm.GetHashCode();
                }

                foreach (var Heritages_elm in Heritages)
                {
                    hash ^= 397 * Heritages_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRaceById_Races_Items_RaceSize_RaceSize>
    {
        public GetRaceById_Races_Items_RaceSize_RaceSize Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRaceById_Races_Items_RaceSize_RaceSize(
                entity.Id,
                entity.Name);
        }
    }
}


// GetRaceById_Races_Items_RaceSize_RaceSize.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceSize_RaceSize
        : global::System.IEquatable<GetRaceById_Races_Items_RaceSize_RaceSize>
        , IGetRaceById_Races_Items_RaceSize_RaceSize
    {
        public GetRaceById_Races_Items_RaceSize_RaceSize(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_RaceSize_RaceSize)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_RaceSize_RaceSize? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRaceById_Races_Items_RaceRarity_RaceRarity>
    {
        public GetRaceById_Races_Items_RaceRarity_RaceRarity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRaceById_Races_Items_RaceRarity_RaceRarity(
                entity.Id,
                entity.Name);
        }
    }
}


// GetRaceById_Races_Items_RaceRarity_RaceRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceRarity_RaceRarity
        : global::System.IEquatable<GetRaceById_Races_Items_RaceRarity_RaceRarity>
        , IGetRaceById_Races_Items_RaceRarity_RaceRarity
    {
        public GetRaceById_Races_Items_RaceRarity_RaceRarity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_RaceRarity_RaceRarity)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_RaceRarity_RaceRarity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, GetRaceById_Races_Items_Languages_Language>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType> _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper;

        public GetRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType> getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper = getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper));
        }

        public GetRaceById_Races_Items_Languages_Language Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRaceById_Races_Items_Languages_Language(
                entity.Id,
                entity.Name,
                MapNonNullableIGetRaceById_Races_Items_Languages_Type(
                    entity.Type,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages_Type MapNonNullableIGetRaceById_Races_Items_Languages_Type(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetRaceById_Races_Items_Languages_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Languages_Language
        : global::System.IEquatable<GetRaceById_Races_Items_Languages_Language>
        , IGetRaceById_Races_Items_Languages_Language
    {
        public GetRaceById_Races_Items_Languages_Language(
            global::System.Guid id,
            global::System.String name,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages_Type type)
        {
            Id = id;
            Name = name;
            Type = type;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages_Type Type { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_Languages_Language)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_Languages_Language? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Type.Equals(other.Type);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Type.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity, GetRaceById_Races_Items_RaceTraits_RaceTrait>
    {
        public GetRaceById_Races_Items_RaceTraits_RaceTrait Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRaceById_Races_Items_RaceTraits_RaceTrait(
                entity.Id,
                entity.Name);
        }
    }
}


// GetRaceById_Races_Items_RaceTraits_RaceTrait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_RaceTraits_RaceTrait
        : global::System.IEquatable<GetRaceById_Races_Items_RaceTraits_RaceTrait>
        , IGetRaceById_Races_Items_RaceTraits_RaceTrait
    {
        public GetRaceById_Races_Items_RaceTraits_RaceTrait(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_RaceTraits_RaceTrait)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_RaceTraits_RaceTrait? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity, GetRaceById_Races_Items_Heritages_Heritage>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity> _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper;

        public GetRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity> getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper = getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper));
        }

        public GetRaceById_Races_Items_Heritages_Heritage Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRaceById_Races_Items_Heritages_Heritage(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetRaceById_Races_Items_Heritages_Rarity(
                    entity.Rarity,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages_Rarity MapNonNullableIGetRaceById_Races_Items_Heritages_Rarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "HeritageRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetRaceById_Races_Items_Heritages_Heritage.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Heritages_Heritage
        : global::System.IEquatable<GetRaceById_Races_Items_Heritages_Heritage>
        , IGetRaceById_Races_Items_Heritages_Heritage
    {
        public GetRaceById_Races_Items_Heritages_Heritage(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages_Rarity rarity)
        {
            Id = id;
            Name = name;
            Description = description;
            Rarity = rarity;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages_Rarity Rarity { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_Heritages_Heritage)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_Heritages_Heritage? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && Rarity.Equals(other.Rarity);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                hash ^= 397 * Rarity.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, GetRaceById_Races_Items_Languages_Type_LanguageType>
    {
        public GetRaceById_Races_Items_Languages_Type_LanguageType Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRaceById_Races_Items_Languages_Type_LanguageType(
                entity.Id,
                entity.Name);
        }
    }
}


// GetRaceById_Races_Items_Languages_Type_LanguageType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Languages_Type_LanguageType
        : global::System.IEquatable<GetRaceById_Races_Items_Languages_Type_LanguageType>
        , IGetRaceById_Races_Items_Languages_Type_LanguageType
    {
        public GetRaceById_Races_Items_Languages_Type_LanguageType(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_Languages_Type_LanguageType)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_Languages_Type_LanguageType? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity>
    {
        public GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity(
                entity.Id,
                entity.Name);
        }
    }
}


// GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity
        : global::System.IEquatable<GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity>
        , IGetRaceById_Races_Items_Heritages_Rarity_HeritageRarity
    {
        public GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity)obj);
        }

        public global::System.Boolean Equals(GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetRaceByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races? Races { get; }
    }
}


// IGetRaceById_Races.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items?>? Items { get; }
    }
}


// IGetRaceById_Races_RaceCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_RaceCollectionSegment
        : IGetRaceById_Races
    {
    }
}


// IRaceById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRaceById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 BaseSpeed { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages> Languages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceTraits> RaceTraits { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages> Heritages { get; }
    }
}


// IGetRaceById_Races_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items
        : IRaceById
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceSize RaceSize { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_RaceRarity RaceRarity { get; }
    }
}


// IGetRaceById_Races_Items_Race.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Race
        : IGetRaceById_Races_Items
    {
    }
}


// IGetRaceById_Races_Items_RaceSize.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_RaceSize
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetRaceById_Races_Items_RaceSize_RaceSize.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_RaceSize_RaceSize
        : IGetRaceById_Races_Items_RaceSize
    {
    }
}


// IGetRaceById_Races_Items_RaceRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_RaceRarity
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetRaceById_Races_Items_RaceRarity_RaceRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_RaceRarity_RaceRarity
        : IGetRaceById_Races_Items_RaceRarity
    {
    }
}


// IRaceById_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRaceById_Language
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Languages_Type Type { get; }
    }
}


// IGetRaceById_Races_Items_Languages.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Languages
        : IRaceById_Language
    {
    }
}


// IGetRaceById_Races_Items_Languages_Language.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Languages_Language
        : IGetRaceById_Races_Items_Languages
    {
    }
}


// IRaceById_RaceTrait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRaceById_RaceTrait
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetRaceById_Races_Items_RaceTraits.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_RaceTraits
        : IRaceById_RaceTrait
    {
    }
}


// IGetRaceById_Races_Items_RaceTraits_RaceTrait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_RaceTraits_RaceTrait
        : IGetRaceById_Races_Items_RaceTraits
    {
    }
}


// IRaceById_Heritage.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRaceById_Heritage
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceById_Races_Items_Heritages_Rarity Rarity { get; }
    }
}


// IGetRaceById_Races_Items_Heritages.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Heritages
        : IRaceById_Heritage
    {
    }
}


// IGetRaceById_Races_Items_Heritages_Heritage.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Heritages_Heritage
        : IGetRaceById_Races_Items_Heritages
    {
    }
}


// IRaceById_Language_Type.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRaceById_Language_Type
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetRaceById_Races_Items_Languages_Type.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Languages_Type
        : IRaceById_Language_Type
    {
    }
}


// IGetRaceById_Races_Items_Languages_Type_LanguageType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Languages_Type_LanguageType
        : IGetRaceById_Races_Items_Languages_Type
    {
    }
}


// IRaceById_Heritage_Rarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRaceById_Heritage_Rarity
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetRaceById_Races_Items_Heritages_Rarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Heritages_Rarity
        : IRaceById_Heritage_Rarity
    {
    }
}


// IGetRaceById_Races_Items_Heritages_Rarity_HeritageRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRaceById_Races_Items_Heritages_Rarity_HeritageRarity
        : IGetRaceById_Races_Items_Heritages_Rarity
    {
    }
}


// GetRacesPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetRacesPage_Races_Items_Race> _getRacesPage_Races_Items_RaceFromRaceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRacesPage_Races_Items_Size_RaceSize> _getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRacesPage_Races_Items_Rarity_RaceRarity> _getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper;

        public GetRacesPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetRacesPage_Races_Items_Race> getRacesPage_Races_Items_RaceFromRaceEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRacesPage_Races_Items_Size_RaceSize> getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRacesPage_Races_Items_Rarity_RaceRarity> getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRacesPage_Races_Items_RaceFromRaceEntityMapper = getRacesPage_Races_Items_RaceFromRaceEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRacesPage_Races_Items_RaceFromRaceEntityMapper));
            _getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper = getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper));
            _getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper = getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult);

        public GetRacesPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRacesPageResultInfo info)
            {
                return new GetRacesPageResult(MapIGetRacesPage_Races(
                    info.Races,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetRacesPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races? MapIGetRacesPage_Races(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRacesPage_Races returnValue = default!;

            if (data?.__typename.Equals(
                    "RaceCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRacesPage_Races_RaceCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetRacesPage_Races_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items?>? MapIGetRacesPage_Races_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var races = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                races.Add(MapIGetRacesPage_Races_Items(
                    child,
                    snapshot));
            }

            return races;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items? MapIGetRacesPage_Races_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                return _getRacesPage_Races_Items_RaceFromRaceEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Size MapNonNullableIGetRacesPage_Races_Items_Size(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceSize",
                    global::System.StringComparison.Ordinal))
            {
                return _getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Rarity MapNonNullableIGetRacesPage_Races_Items_Rarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetRacesPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetRacesPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? races,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Races = races;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? Races { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRacesPageResultInfo(
                Races,
                _entityIds,
                version);
        }
    }
}


// GetRacesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPageResult
        : global::System.IEquatable<GetRacesPageResult>
        , IGetRacesPageResult
    {
        public GetRacesPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races? races)
        {
            Races = races;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races? Races { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRacesPageResult)obj);
        }

        public global::System.Boolean Equals(GetRacesPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Races is null && other.Races is null) ||Races != null && Races.Equals(other.Races)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Races is null))
                {
                    hash ^= 397 * Races.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetRacesPage_Races_RaceCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_RaceCollectionSegment
        : global::System.IEquatable<GetRacesPage_Races_RaceCollectionSegment>
        , IGetRacesPage_Races_RaceCollectionSegment
    {
        public GetRacesPage_Races_RaceCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRacesPage_Races_RaceCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetRacesPage_Races_RaceCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetRacesPage_Races_Items_RaceFromRaceEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_Items_RaceFromRaceEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, GetRacesPage_Races_Items_Race>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRacesPage_Races_Items_Size_RaceSize> _getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRacesPage_Races_Items_Rarity_RaceRarity> _getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper;

        public GetRacesPage_Races_Items_RaceFromRaceEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRacesPage_Races_Items_Size_RaceSize> getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRacesPage_Races_Items_Rarity_RaceRarity> getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper = getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper));
            _getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper = getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper));
        }

        public GetRacesPage_Races_Items_Race Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRacesPage_Races_Items_Race(
                entity.Id,
                entity.Name,
                entity.BaseSpeed,
                entity.BaseHealth,
                MapNonNullableIGetRacesPage_Races_Items_Size(
                    entity.Size,
                    snapshot),
                MapNonNullableIGetRacesPage_Races_Items_Rarity(
                    entity.Rarity,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Size MapNonNullableIGetRacesPage_Races_Items_Size(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceSize",
                    global::System.StringComparison.Ordinal))
            {
                return _getRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Rarity MapNonNullableIGetRacesPage_Races_Items_Rarity(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "RaceRarity",
                    global::System.StringComparison.Ordinal))
            {
                return _getRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetRacesPage_Races_Items_Race.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_Items_Race
        : global::System.IEquatable<GetRacesPage_Races_Items_Race>
        , IGetRacesPage_Races_Items_Race
    {
        public GetRacesPage_Races_Items_Race(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 baseSpeed,
            global::System.Int32 baseHealth,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Size size,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Rarity rarity)
        {
            Id = id;
            Name = name;
            BaseSpeed = baseSpeed;
            BaseHealth = baseHealth;
            Size = size;
            Rarity = rarity;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 BaseSpeed { get; }

        public global::System.Int32 BaseHealth { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Size Size { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Rarity Rarity { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRacesPage_Races_Items_Race)obj);
        }

        public global::System.Boolean Equals(GetRacesPage_Races_Items_Race? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && BaseSpeed == other.BaseSpeed
                && BaseHealth == other.BaseHealth
                && Size.Equals(other.Size)
                && Rarity.Equals(other.Rarity);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * BaseSpeed.GetHashCode();

                hash ^= 397 * BaseHealth.GetHashCode();

                hash ^= 397 * Size.GetHashCode();

                hash ^= 397 * Rarity.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, GetRacesPage_Races_Items_Size_RaceSize>
    {
        public GetRacesPage_Races_Items_Size_RaceSize Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRacesPage_Races_Items_Size_RaceSize(entity.Name);
        }
    }
}


// GetRacesPage_Races_Items_Size_RaceSize.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_Items_Size_RaceSize
        : global::System.IEquatable<GetRacesPage_Races_Items_Size_RaceSize>
        , IGetRacesPage_Races_Items_Size_RaceSize
    {
        public GetRacesPage_Races_Items_Size_RaceSize(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRacesPage_Races_Items_Size_RaceSize)obj);
        }

        public global::System.Boolean Equals(GetRacesPage_Races_Items_Size_RaceSize? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, GetRacesPage_Races_Items_Rarity_RaceRarity>
    {
        public GetRacesPage_Races_Items_Rarity_RaceRarity Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetRacesPage_Races_Items_Rarity_RaceRarity(entity.Name);
        }
    }
}


// GetRacesPage_Races_Items_Rarity_RaceRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPage_Races_Items_Rarity_RaceRarity
        : global::System.IEquatable<GetRacesPage_Races_Items_Rarity_RaceRarity>
        , IGetRacesPage_Races_Items_Rarity_RaceRarity
    {
        public GetRacesPage_Races_Items_Rarity_RaceRarity(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRacesPage_Races_Items_Rarity_RaceRarity)obj);
        }

        public global::System.Boolean Equals(GetRacesPage_Races_Items_Rarity_RaceRarity? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetRacesPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races? Races { get; }
    }
}


// IGetRacesPage_Races.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items?>? Items { get; }
    }
}


// IGetRacesPage_Races_RaceCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_RaceCollectionSegment
        : IGetRacesPage_Races
    {
    }
}


// IRacesPage.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IRacesPage
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 BaseSpeed { get; }

        public global::System.Int32 BaseHealth { get; }
    }
}


// IGetRacesPage_Races_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_Items
        : IRacesPage
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Size Size { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPage_Races_Items_Rarity Rarity { get; }
    }
}


// IGetRacesPage_Races_Items_Race.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_Items_Race
        : IGetRacesPage_Races_Items
    {
    }
}


// IGetRacesPage_Races_Items_Size.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_Items_Size
    {
        public global::System.String Name { get; }
    }
}


// IGetRacesPage_Races_Items_Size_RaceSize.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_Items_Size_RaceSize
        : IGetRacesPage_Races_Items_Size
    {
    }
}


// IGetRacesPage_Races_Items_Rarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_Items_Rarity
    {
        public global::System.String Name { get; }
    }
}


// IGetRacesPage_Races_Items_Rarity_RaceRarity.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetRacesPage_Races_Items_Rarity_RaceRarity
        : IGetRacesPage_Races_Items_Rarity
    {
    }
}


// GetSpellByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetSpellById_Spells_Items_Spell> _getSpellById_Spells_Items_SpellFromSpellEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetSpellById_Spells_Items_RollableEffect_RollableEffect> _getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetSpellById_Spells_Items_Traditions_MagicTradition> _getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity, GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock> _getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetSpellById_Spells_Items_Components_SpellComponent> _getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetSpellById_Spells_Items_Traits_Trait> _getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity, GetSpellById_Spells_Items_Heightenings_SpellHeightening> _getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock> _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity, GetSpellById_Spells_Items_Triggers_SpellTrigger> _getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity, GetSpellById_Spells_Items_Requirements_SpellRequirement> _getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper;

        public GetSpellByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetSpellById_Spells_Items_Spell> getSpellById_Spells_Items_SpellFromSpellEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetSpellById_Spells_Items_RollableEffect_RollableEffect> getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetSpellById_Spells_Items_Traditions_MagicTradition> getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity, GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock> getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetSpellById_Spells_Items_Components_SpellComponent> getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetSpellById_Spells_Items_Traits_Trait> getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity, GetSpellById_Spells_Items_Heightenings_SpellHeightening> getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock> getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity, GetSpellById_Spells_Items_Triggers_SpellTrigger> getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity, GetSpellById_Spells_Items_Requirements_SpellRequirement> getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSpellById_Spells_Items_SpellFromSpellEntityMapper = getSpellById_Spells_Items_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_SpellFromSpellEntityMapper));
            _getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper = getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper));
            _getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper = getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper));
            _getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper = getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper));
            _getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper = getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper));
            _getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper = getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper));
            _getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper = getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper));
            _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper = getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper));
            _getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper = getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper));
            _getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper = getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult);

        public GetSpellByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSpellByIdResultInfo info)
            {
                return new GetSpellByIdResult(MapIGetSpellById_Spells(
                    info.Spells,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetSpellByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells? MapIGetSpellById_Spells(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSpellById_Spells returnValue = default!;

            if (data?.__typename.Equals(
                    "SpellCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSpellById_Spells_SpellCollectionSegment(MapIGetSpellById_Spells_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items?>? MapIGetSpellById_Spells_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                spells.Add(MapIGetSpellById_Spells_Items(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items? MapIGetSpellById_Spells_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_RollableEffect? MapIGetSpellById_Spells_Items_RollableEffect(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "RollableEffect",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions> MapNonNullableIGetSpellById_Spells_Items_TraditionsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var magicTraditions = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                magicTraditions.Add(MapNonNullableIGetSpellById_Spells_Items_Traditions(
                    child,
                    snapshot));
            }

            return magicTraditions;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions MapNonNullableIGetSpellById_Spells_Items_Traditions(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails> MapNonNullableIGetSpellById_Spells_Items_AdditionalDetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellDetailBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellDetailBlocks.Add(MapNonNullableIGetSpellById_Spells_Items_AdditionalDetails(
                    child,
                    snapshot));
            }

            return spellDetailBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails MapNonNullableIGetSpellById_Spells_Items_AdditionalDetails(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components> MapNonNullableIGetSpellById_Spells_Items_ComponentsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellComponents = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellComponents.Add(MapNonNullableIGetSpellById_Spells_Items_Components(
                    child,
                    snapshot));
            }

            return spellComponents;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components MapNonNullableIGetSpellById_Spells_Items_Components(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits> MapNonNullableIGetSpellById_Spells_Items_TraitsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var traits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                traits.Add(MapNonNullableIGetSpellById_Spells_Items_Traits(
                    child,
                    snapshot));
            }

            return traits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits MapNonNullableIGetSpellById_Spells_Items_Traits(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings> MapNonNullableIGetSpellById_Spells_Items_HeighteningsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellHeightenings = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellHeightenings.Add(MapNonNullableIGetSpellById_Spells_Items_Heightenings(
                    child,
                    snapshot));
            }

            return spellHeightenings;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings MapNonNullableIGetSpellById_Spells_Items_Heightenings(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellHeightening",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details> MapNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellHeighteningDetailBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellHeighteningDetailBlocks.Add(MapNonNullableIGetSpellById_Spells_Items_Heightenings_Details(
                    child,
                    snapshot));
            }

            return spellHeighteningDetailBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details MapNonNullableIGetSpellById_Spells_Items_Heightenings_Details(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellHeighteningDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers> MapNonNullableIGetSpellById_Spells_Items_TriggersNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellTriggers = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellTriggers.Add(MapNonNullableIGetSpellById_Spells_Items_Triggers(
                    child,
                    snapshot));
            }

            return spellTriggers;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers MapNonNullableIGetSpellById_Spells_Items_Triggers(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellTrigger",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements> MapNonNullableIGetSpellById_Spells_Items_RequirementsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellRequirements = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellRequirements.Add(MapNonNullableIGetSpellById_Spells_Items_Requirements(
                    child,
                    snapshot));
            }

            return spellRequirements;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements MapNonNullableIGetSpellById_Spells_Items_Requirements(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellRequirement",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetSpellByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetSpellByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? spells,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Spells = spells;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? Spells { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSpellByIdResultInfo(
                Spells,
                _entityIds,
                version);
        }
    }
}


// GetSpellByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellByIdResult
        : global::System.IEquatable<GetSpellByIdResult>
        , IGetSpellByIdResult
    {
        public GetSpellByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells? spells)
        {
            Spells = spells;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells? Spells { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellByIdResult)obj);
        }

        public global::System.Boolean Equals(GetSpellByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Spells is null && other.Spells is null) ||Spells != null && Spells.Equals(other.Spells)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Spells is null))
                {
                    hash ^= 397 * Spells.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_SpellCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_SpellCollectionSegment
        : global::System.IEquatable<GetSpellById_Spells_SpellCollectionSegment>
        , IGetSpellById_Spells_SpellCollectionSegment
    {
        public GetSpellById_Spells_SpellCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_SpellCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_SpellCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_SpellFromSpellEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_SpellFromSpellEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetSpellById_Spells_Items_Spell>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetSpellById_Spells_Items_RollableEffect_RollableEffect> _getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetSpellById_Spells_Items_Traditions_MagicTradition> _getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity, GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock> _getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetSpellById_Spells_Items_Components_SpellComponent> _getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetSpellById_Spells_Items_Traits_Trait> _getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity, GetSpellById_Spells_Items_Heightenings_SpellHeightening> _getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock> _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity, GetSpellById_Spells_Items_Triggers_SpellTrigger> _getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity, GetSpellById_Spells_Items_Requirements_SpellRequirement> _getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper;

        public GetSpellById_Spells_Items_SpellFromSpellEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetSpellById_Spells_Items_RollableEffect_RollableEffect> getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetSpellById_Spells_Items_Traditions_MagicTradition> getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity, GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock> getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetSpellById_Spells_Items_Components_SpellComponent> getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetSpellById_Spells_Items_Traits_Trait> getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity, GetSpellById_Spells_Items_Heightenings_SpellHeightening> getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock> getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity, GetSpellById_Spells_Items_Triggers_SpellTrigger> getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity, GetSpellById_Spells_Items_Requirements_SpellRequirement> getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper = getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper));
            _getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper = getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper));
            _getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper = getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper));
            _getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper = getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper));
            _getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper = getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper));
            _getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper = getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper));
            _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper = getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper));
            _getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper = getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper));
            _getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper = getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper));
        }

        public GetSpellById_Spells_Items_Spell Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSpellById_Spells_Items_Spell(
                MapIGetSpellById_Spells_Items_RollableEffect(
                    entity.RollableEffect,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_TraditionsNonNullableArray(
                    entity.Traditions,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_AdditionalDetailsNonNullableArray(
                    entity.AdditionalDetails,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_ComponentsNonNullableArray(
                    entity.Components,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_TraitsNonNullableArray(
                    entity.Traits,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_HeighteningsNonNullableArray(
                    entity.Heightenings,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_TriggersNonNullableArray(
                    entity.Triggers,
                    snapshot),
                MapNonNullableIGetSpellById_Spells_Items_RequirementsNonNullableArray(
                    entity.Requirements,
                    snapshot),
                entity.Id,
                entity.Name,
                entity.Description,
                entity.Range,
                entity.CastTime,
                entity.Level,
                entity.Targets,
                entity.IsDismissable,
                entity.Area,
                entity.Duration);
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_RollableEffect? MapIGetSpellById_Spells_Items_RollableEffect(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "RollableEffect",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions> MapNonNullableIGetSpellById_Spells_Items_TraditionsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var magicTraditions = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                magicTraditions.Add(MapNonNullableIGetSpellById_Spells_Items_Traditions(
                    child,
                    snapshot));
            }

            return magicTraditions;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions MapNonNullableIGetSpellById_Spells_Items_Traditions(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails> MapNonNullableIGetSpellById_Spells_Items_AdditionalDetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellDetailBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellDetailBlocks.Add(MapNonNullableIGetSpellById_Spells_Items_AdditionalDetails(
                    child,
                    snapshot));
            }

            return spellDetailBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails MapNonNullableIGetSpellById_Spells_Items_AdditionalDetails(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components> MapNonNullableIGetSpellById_Spells_Items_ComponentsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellComponents = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellComponents.Add(MapNonNullableIGetSpellById_Spells_Items_Components(
                    child,
                    snapshot));
            }

            return spellComponents;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components MapNonNullableIGetSpellById_Spells_Items_Components(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits> MapNonNullableIGetSpellById_Spells_Items_TraitsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var traits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                traits.Add(MapNonNullableIGetSpellById_Spells_Items_Traits(
                    child,
                    snapshot));
            }

            return traits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits MapNonNullableIGetSpellById_Spells_Items_Traits(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings> MapNonNullableIGetSpellById_Spells_Items_HeighteningsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellHeightenings = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellHeightenings.Add(MapNonNullableIGetSpellById_Spells_Items_Heightenings(
                    child,
                    snapshot));
            }

            return spellHeightenings;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings MapNonNullableIGetSpellById_Spells_Items_Heightenings(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellHeightening",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details> MapNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellHeighteningDetailBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellHeighteningDetailBlocks.Add(MapNonNullableIGetSpellById_Spells_Items_Heightenings_Details(
                    child,
                    snapshot));
            }

            return spellHeighteningDetailBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details MapNonNullableIGetSpellById_Spells_Items_Heightenings_Details(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellHeighteningDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers> MapNonNullableIGetSpellById_Spells_Items_TriggersNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellTriggers = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellTriggers.Add(MapNonNullableIGetSpellById_Spells_Items_Triggers(
                    child,
                    snapshot));
            }

            return spellTriggers;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers MapNonNullableIGetSpellById_Spells_Items_Triggers(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellTrigger",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements> MapNonNullableIGetSpellById_Spells_Items_RequirementsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellRequirements = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellRequirements.Add(MapNonNullableIGetSpellById_Spells_Items_Requirements(
                    child,
                    snapshot));
            }

            return spellRequirements;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements MapNonNullableIGetSpellById_Spells_Items_Requirements(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellRequirement",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetSpellById_Spells_Items_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Spell
        : global::System.IEquatable<GetSpellById_Spells_Items_Spell>
        , IGetSpellById_Spells_Items_Spell
    {
        public GetSpellById_Spells_Items_Spell(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_RollableEffect? rollableEffect,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions> traditions,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails> additionalDetails,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components> components,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits> traits,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings> heightenings,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers> triggers,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements> requirements,
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Int32? range,
            global::System.TimeSpan? castTime,
            global::System.Int32 level,
            global::System.String? targets,
            global::System.Boolean isDismissable,
            global::System.String? area,
            global::System.String? duration)
        {
            RollableEffect = rollableEffect;
            Traditions = traditions;
            AdditionalDetails = additionalDetails;
            Components = components;
            Traits = traits;
            Heightenings = heightenings;
            Triggers = triggers;
            Requirements = requirements;
            Id = id;
            Name = name;
            Description = description;
            Range = range;
            CastTime = castTime;
            Level = level;
            Targets = targets;
            IsDismissable = isDismissable;
            Area = area;
            Duration = duration;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_RollableEffect? RollableEffect { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions> Traditions { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails> AdditionalDetails { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components> Components { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits> Traits { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings> Heightenings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers> Triggers { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements> Requirements { get; }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32? Range { get; }

        public global::System.TimeSpan? CastTime { get; }

        public global::System.Int32 Level { get; }

        public global::System.String? Targets { get; }

        public global::System.Boolean IsDismissable { get; }

        public global::System.String? Area { get; }

        public global::System.String? Duration { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Spell)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Spell? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RollableEffect is null && other.RollableEffect is null) ||RollableEffect != null && RollableEffect.Equals(other.RollableEffect)))
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Traditions,
                        other.Traditions)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        AdditionalDetails,
                        other.AdditionalDetails)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Components,
                        other.Components)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Traits,
                        other.Traits)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Heightenings,
                        other.Heightenings)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Triggers,
                        other.Triggers)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Requirements,
                        other.Requirements)
                && Id == other.Id
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && Range == other.Range
                && ((CastTime is null && other.CastTime is null) ||CastTime != null && CastTime.Equals(other.CastTime))
                && Level == other.Level
                && ((Targets is null && other.Targets is null) ||Targets != null && Targets.Equals(other.Targets))
                && IsDismissable == other.IsDismissable
                && ((Area is null && other.Area is null) ||Area != null && Area.Equals(other.Area))
                && ((Duration is null && other.Duration is null) ||Duration != null && Duration.Equals(other.Duration));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(RollableEffect is null))
                {
                    hash ^= 397 * RollableEffect.GetHashCode();
                }

                foreach (var Traditions_elm in Traditions)
                {
                    hash ^= 397 * Traditions_elm.GetHashCode();
                }

                foreach (var AdditionalDetails_elm in AdditionalDetails)
                {
                    hash ^= 397 * AdditionalDetails_elm.GetHashCode();
                }

                foreach (var Components_elm in Components)
                {
                    hash ^= 397 * Components_elm.GetHashCode();
                }

                foreach (var Traits_elm in Traits)
                {
                    hash ^= 397 * Traits_elm.GetHashCode();
                }

                foreach (var Heightenings_elm in Heightenings)
                {
                    hash ^= 397 * Heightenings_elm.GetHashCode();
                }

                foreach (var Triggers_elm in Triggers)
                {
                    hash ^= 397 * Triggers_elm.GetHashCode();
                }

                foreach (var Requirements_elm in Requirements)
                {
                    hash ^= 397 * Requirements_elm.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                if (!(Range is null))
                {
                    hash ^= 397 * Range.GetHashCode();
                }

                if (!(CastTime is null))
                {
                    hash ^= 397 * CastTime.GetHashCode();
                }

                hash ^= 397 * Level.GetHashCode();

                if (!(Targets is null))
                {
                    hash ^= 397 * Targets.GetHashCode();
                }

                hash ^= 397 * IsDismissable.GetHashCode();

                if (!(Area is null))
                {
                    hash ^= 397 * Area.GetHashCode();
                }

                if (!(Duration is null))
                {
                    hash ^= 397 * Duration.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, GetSpellById_Spells_Items_RollableEffect_RollableEffect>
    {
        public GetSpellById_Spells_Items_RollableEffect_RollableEffect Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_RollableEffect_RollableEffect(
                entity.CriticalSuccess,
                entity.Success,
                entity.Failure,
                entity.CriticalFailure);
        }
    }
}


// GetSpellById_Spells_Items_RollableEffect_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_RollableEffect_RollableEffect
        : global::System.IEquatable<GetSpellById_Spells_Items_RollableEffect_RollableEffect>
        , IGetSpellById_Spells_Items_RollableEffect_RollableEffect
    {
        public GetSpellById_Spells_Items_RollableEffect_RollableEffect(
            global::System.String? criticalSuccess,
            global::System.String? success,
            global::System.String? failure,
            global::System.String? criticalFailure)
        {
            CriticalSuccess = criticalSuccess;
            Success = success;
            Failure = failure;
            CriticalFailure = criticalFailure;
        }

        public global::System.String? CriticalSuccess { get; }

        public global::System.String? Success { get; }

        public global::System.String? Failure { get; }

        public global::System.String? CriticalFailure { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_RollableEffect_RollableEffect)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_RollableEffect_RollableEffect? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CriticalSuccess is null && other.CriticalSuccess is null) ||CriticalSuccess != null && CriticalSuccess.Equals(other.CriticalSuccess)))
                && ((Success is null && other.Success is null) ||Success != null && Success.Equals(other.Success))
                && ((Failure is null && other.Failure is null) ||Failure != null && Failure.Equals(other.Failure))
                && ((CriticalFailure is null && other.CriticalFailure is null) ||CriticalFailure != null && CriticalFailure.Equals(other.CriticalFailure));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(CriticalSuccess is null))
                {
                    hash ^= 397 * CriticalSuccess.GetHashCode();
                }

                if (!(Success is null))
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                if (!(Failure is null))
                {
                    hash ^= 397 * Failure.GetHashCode();
                }

                if (!(CriticalFailure is null))
                {
                    hash ^= 397 * CriticalFailure.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, GetSpellById_Spells_Items_Traditions_MagicTradition>
    {
        public GetSpellById_Spells_Items_Traditions_MagicTradition Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_Traditions_MagicTradition(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetSpellById_Spells_Items_Traditions_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Traditions_MagicTradition
        : global::System.IEquatable<GetSpellById_Spells_Items_Traditions_MagicTradition>
        , IGetSpellById_Spells_Items_Traditions_MagicTradition
    {
        public GetSpellById_Spells_Items_Traditions_MagicTradition(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Traditions_MagicTradition)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Traditions_MagicTradition? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity, GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock>
    {
        public GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock(
                entity.Id,
                entity.Text);
        }
    }
}


// GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock
        : global::System.IEquatable<GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock>
        , IGetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock
    {
        public GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Text.Equals(other.Text);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, GetSpellById_Spells_Items_Components_SpellComponent>
    {
        public GetSpellById_Spells_Items_Components_SpellComponent Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_Components_SpellComponent(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetSpellById_Spells_Items_Components_SpellComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Components_SpellComponent
        : global::System.IEquatable<GetSpellById_Spells_Items_Components_SpellComponent>
        , IGetSpellById_Spells_Items_Components_SpellComponent
    {
        public GetSpellById_Spells_Items_Components_SpellComponent(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Components_SpellComponent)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Components_SpellComponent? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetSpellById_Spells_Items_Traits_Trait>
    {
        public GetSpellById_Spells_Items_Traits_Trait Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_Traits_Trait(
                entity.Id,
                entity.Name);
        }
    }
}


// GetSpellById_Spells_Items_Traits_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Traits_Trait
        : global::System.IEquatable<GetSpellById_Spells_Items_Traits_Trait>
        , IGetSpellById_Spells_Items_Traits_Trait
    {
        public GetSpellById_Spells_Items_Traits_Trait(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Traits_Trait)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Traits_Trait? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity, GetSpellById_Spells_Items_Heightenings_SpellHeightening>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock> _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper;

        public GetSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock> getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper = getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper));
        }

        public GetSpellById_Spells_Items_Heightenings_SpellHeightening Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSpellById_Spells_Items_Heightenings_SpellHeightening(
                entity.Id,
                entity.Level,
                entity.Description,
                MapNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsNonNullableArray(
                    entity.Details,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details> MapNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spellHeighteningDetailBlocks = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spellHeighteningDetailBlocks.Add(MapNonNullableIGetSpellById_Spells_Items_Heightenings_Details(
                    child,
                    snapshot));
            }

            return spellHeighteningDetailBlocks;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details MapNonNullableIGetSpellById_Spells_Items_Heightenings_Details(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellHeighteningDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetSpellById_Spells_Items_Heightenings_SpellHeightening.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Heightenings_SpellHeightening
        : global::System.IEquatable<GetSpellById_Spells_Items_Heightenings_SpellHeightening>
        , IGetSpellById_Spells_Items_Heightenings_SpellHeightening
    {
        public GetSpellById_Spells_Items_Heightenings_SpellHeightening(
            global::System.Guid id,
            global::System.Int32 level,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details> details)
        {
            Id = id;
            Level = level;
            Description = description;
            Details = details;
        }

        public global::System.Guid Id { get; }

        public global::System.Int32 Level { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details> Details { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Heightenings_SpellHeightening)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Heightenings_SpellHeightening? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Level == other.Level
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Details,
                        other.Details);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Details_elm in Details)
                {
                    hash ^= 397 * Details_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity, GetSpellById_Spells_Items_Triggers_SpellTrigger>
    {
        public GetSpellById_Spells_Items_Triggers_SpellTrigger Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_Triggers_SpellTrigger(
                entity.Id,
                entity.Text);
        }
    }
}


// GetSpellById_Spells_Items_Triggers_SpellTrigger.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Triggers_SpellTrigger
        : global::System.IEquatable<GetSpellById_Spells_Items_Triggers_SpellTrigger>
        , IGetSpellById_Spells_Items_Triggers_SpellTrigger
    {
        public GetSpellById_Spells_Items_Triggers_SpellTrigger(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Triggers_SpellTrigger)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Triggers_SpellTrigger? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Text.Equals(other.Text);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity, GetSpellById_Spells_Items_Requirements_SpellRequirement>
    {
        public GetSpellById_Spells_Items_Requirements_SpellRequirement Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_Requirements_SpellRequirement(
                entity.Id,
                entity.Text);
        }
    }
}


// GetSpellById_Spells_Items_Requirements_SpellRequirement.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Requirements_SpellRequirement
        : global::System.IEquatable<GetSpellById_Spells_Items_Requirements_SpellRequirement>
        , IGetSpellById_Spells_Items_Requirements_SpellRequirement
    {
        public GetSpellById_Spells_Items_Requirements_SpellRequirement(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Requirements_SpellRequirement)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Requirements_SpellRequirement? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Text.Equals(other.Text);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock>
    {
        public GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock(
                entity.Id,
                entity.Text);
        }
    }
}


// GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock
        : global::System.IEquatable<GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock>
        , IGetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock
    {
        public GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock(
            global::System.Guid id,
            global::System.String text)
        {
            Id = id;
            Text = text;
        }

        public global::System.Guid Id { get; }

        public global::System.String Text { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock)obj);
        }

        public global::System.Boolean Equals(GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Text.Equals(other.Text);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Text.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetSpellByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells? Spells { get; }
    }
}


// IGetSpellById_Spells.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items?>? Items { get; }
    }
}


// IGetSpellById_Spells_SpellCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_SpellCollectionSegment
        : IGetSpellById_Spells
    {
    }
}


// ISpellById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ISpellById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Int32? Range { get; }

        public global::System.TimeSpan? CastTime { get; }

        public global::System.Int32 Level { get; }

        public global::System.String? Targets { get; }

        public global::System.Boolean IsDismissable { get; }

        public global::System.String? Area { get; }

        public global::System.String? Duration { get; }
    }
}


// IGetSpellById_Spells_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items
        : ISpellById
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_RollableEffect? RollableEffect { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traditions> Traditions { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_AdditionalDetails> AdditionalDetails { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Components> Components { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Traits> Traits { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings> Heightenings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Triggers> Triggers { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Requirements> Requirements { get; }
    }
}


// IGetSpellById_Spells_Items_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Spell
        : IGetSpellById_Spells_Items
    {
    }
}


// IGetSpellById_Spells_Items_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_RollableEffect
    {
        public global::System.String? CriticalSuccess { get; }

        public global::System.String? Success { get; }

        public global::System.String? Failure { get; }

        public global::System.String? CriticalFailure { get; }
    }
}


// IGetSpellById_Spells_Items_RollableEffect_RollableEffect.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_RollableEffect_RollableEffect
        : IGetSpellById_Spells_Items_RollableEffect
    {
    }
}


// IGetSpellById_Spells_Items_Traditions.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Traditions
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetSpellById_Spells_Items_Traditions_MagicTradition.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Traditions_MagicTradition
        : IGetSpellById_Spells_Items_Traditions
    {
    }
}


// IGetSpellById_Spells_Items_AdditionalDetails.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_AdditionalDetails
    {
        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// IGetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock
        : IGetSpellById_Spells_Items_AdditionalDetails
    {
    }
}


// IGetSpellById_Spells_Items_Components.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Components
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetSpellById_Spells_Items_Components_SpellComponent.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Components_SpellComponent
        : IGetSpellById_Spells_Items_Components
    {
    }
}


// IGetSpellById_Spells_Items_Traits.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Traits
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetSpellById_Spells_Items_Traits_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Traits_Trait
        : IGetSpellById_Spells_Items_Traits
    {
    }
}


// IGetSpellById_Spells_Items_Heightenings.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Heightenings
    {
        public global::System.Guid Id { get; }

        public global::System.Int32 Level { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellById_Spells_Items_Heightenings_Details> Details { get; }
    }
}


// IGetSpellById_Spells_Items_Heightenings_SpellHeightening.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Heightenings_SpellHeightening
        : IGetSpellById_Spells_Items_Heightenings
    {
    }
}


// IGetSpellById_Spells_Items_Triggers.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Triggers
    {
        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// IGetSpellById_Spells_Items_Triggers_SpellTrigger.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Triggers_SpellTrigger
        : IGetSpellById_Spells_Items_Triggers
    {
    }
}


// IGetSpellById_Spells_Items_Requirements.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Requirements
    {
        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// IGetSpellById_Spells_Items_Requirements_SpellRequirement.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Requirements_SpellRequirement
        : IGetSpellById_Spells_Items_Requirements
    {
    }
}


// IGetSpellById_Spells_Items_Heightenings_Details.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Heightenings_Details
    {
        public global::System.Guid Id { get; }

        public global::System.String Text { get; }
    }
}


// IGetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock
        : IGetSpellById_Spells_Items_Heightenings_Details
    {
    }
}


// GetSpellsPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetSpellsPage_Spells_Items_Spell> _getSpellsPage_Spells_Items_SpellFromSpellEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity, GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat> _getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity, GetSpellsPage_Spells_Items_ActionType_ActionType> _getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper;

        public GetSpellsPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetSpellsPage_Spells_Items_Spell> getSpellsPage_Spells_Items_SpellFromSpellEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity, GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat> getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity, GetSpellsPage_Spells_Items_ActionType_ActionType> getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSpellsPage_Spells_Items_SpellFromSpellEntityMapper = getSpellsPage_Spells_Items_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellsPage_Spells_Items_SpellFromSpellEntityMapper));
            _getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper = getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper));
            _getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper = getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult);

        public GetSpellsPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSpellsPageResultInfo info)
            {
                return new GetSpellsPageResult(MapIGetSpellsPage_Spells(
                    info.Spells,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetSpellsPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells? MapIGetSpellsPage_Spells(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSpellsPage_Spells returnValue = default!;

            if (data?.__typename.Equals(
                    "SpellCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSpellsPage_Spells_SpellCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetSpellsPage_Spells_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items?>? MapIGetSpellsPage_Spells_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                spells.Add(MapIGetSpellsPage_Spells_Items(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items? MapIGetSpellsPage_Spells_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellsPage_Spells_Items_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_SavingThrowStat? MapIGetSpellsPage_Spells_Items_SavingThrowStat(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "SavingThrowStat",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_ActionType? MapIGetSpellsPage_Spells_Items_ActionType(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "ActionType",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetSpellsPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetSpellsPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? spells,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Spells = spells;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? Spells { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSpellsPageResultInfo(
                Spells,
                _entityIds,
                version);
        }
    }
}


// GetSpellsPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPageResult
        : global::System.IEquatable<GetSpellsPageResult>
        , IGetSpellsPageResult
    {
        public GetSpellsPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells? spells)
        {
            Spells = spells;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells? Spells { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellsPageResult)obj);
        }

        public global::System.Boolean Equals(GetSpellsPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Spells is null && other.Spells is null) ||Spells != null && Spells.Equals(other.Spells)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Spells is null))
                {
                    hash ^= 397 * Spells.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetSpellsPage_Spells_SpellCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_SpellCollectionSegment
        : global::System.IEquatable<GetSpellsPage_Spells_SpellCollectionSegment>
        , IGetSpellsPage_Spells_SpellCollectionSegment
    {
        public GetSpellsPage_Spells_SpellCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellsPage_Spells_SpellCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetSpellsPage_Spells_SpellCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetSpellsPage_Spells_Items_SpellFromSpellEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_Items_SpellFromSpellEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetSpellsPage_Spells_Items_Spell>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity, GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat> _getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity, GetSpellsPage_Spells_Items_ActionType_ActionType> _getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper;

        public GetSpellsPage_Spells_Items_SpellFromSpellEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity, GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat> getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity, GetSpellsPage_Spells_Items_ActionType_ActionType> getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper = getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper));
            _getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper = getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper));
        }

        public GetSpellsPage_Spells_Items_Spell Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSpellsPage_Spells_Items_Spell(
                entity.Id,
                entity.Name,
                entity.Level,
                MapIGetSpellsPage_Spells_Items_SavingThrowStat(
                    entity.SavingThrowStat,
                    snapshot),
                MapIGetSpellsPage_Spells_Items_ActionType(
                    entity.ActionType,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_SavingThrowStat? MapIGetSpellsPage_Spells_Items_SavingThrowStat(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "SavingThrowStat",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_ActionType? MapIGetSpellsPage_Spells_Items_ActionType(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "ActionType",
                    global::System.StringComparison.Ordinal))
            {
                return _getSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetSpellsPage_Spells_Items_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_Items_Spell
        : global::System.IEquatable<GetSpellsPage_Spells_Items_Spell>
        , IGetSpellsPage_Spells_Items_Spell
    {
        public GetSpellsPage_Spells_Items_Spell(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 level,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_SavingThrowStat? savingThrowStat,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_ActionType? actionType)
        {
            Id = id;
            Name = name;
            Level = level;
            SavingThrowStat = savingThrowStat;
            ActionType = actionType;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_SavingThrowStat? SavingThrowStat { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_ActionType? ActionType { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellsPage_Spells_Items_Spell)obj);
        }

        public global::System.Boolean Equals(GetSpellsPage_Spells_Items_Spell? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Level == other.Level
                && ((SavingThrowStat is null && other.SavingThrowStat is null) ||SavingThrowStat != null && SavingThrowStat.Equals(other.SavingThrowStat))
                && ((ActionType is null && other.ActionType is null) ||ActionType != null && ActionType.Equals(other.ActionType));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                if (!(SavingThrowStat is null))
                {
                    hash ^= 397 * SavingThrowStat.GetHashCode();
                }

                if (!(ActionType is null))
                {
                    hash ^= 397 * ActionType.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity, GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat>
    {
        public GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat(entity.Name);
        }
    }
}


// GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat
        : global::System.IEquatable<GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat>
        , IGetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat
    {
        public GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat)obj);
        }

        public global::System.Boolean Equals(GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity, GetSpellsPage_Spells_Items_ActionType_ActionType>
    {
        public GetSpellsPage_Spells_Items_ActionType_ActionType Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetSpellsPage_Spells_Items_ActionType_ActionType(entity.Name);
        }
    }
}


// GetSpellsPage_Spells_Items_ActionType_ActionType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPage_Spells_Items_ActionType_ActionType
        : global::System.IEquatable<GetSpellsPage_Spells_Items_ActionType_ActionType>
        , IGetSpellsPage_Spells_Items_ActionType_ActionType
    {
        public GetSpellsPage_Spells_Items_ActionType_ActionType(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSpellsPage_Spells_Items_ActionType_ActionType)obj);
        }

        public global::System.Boolean Equals(GetSpellsPage_Spells_Items_ActionType_ActionType? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetSpellsPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells? Spells { get; }
    }
}


// IGetSpellsPage_Spells.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items?>? Items { get; }
    }
}


// IGetSpellsPage_Spells_SpellCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_SpellCollectionSegment
        : IGetSpellsPage_Spells
    {
    }
}


// IGetSpellsPage_Spells_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_Items
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_SavingThrowStat? SavingThrowStat { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPage_Spells_Items_ActionType? ActionType { get; }
    }
}


// IGetSpellsPage_Spells_Items_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_Items_Spell
        : IGetSpellsPage_Spells_Items
    {
    }
}


// IGetSpellsPage_Spells_Items_SavingThrowStat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_Items_SavingThrowStat
    {
        public global::System.String Name { get; }
    }
}


// IGetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat
        : IGetSpellsPage_Spells_Items_SavingThrowStat
    {
    }
}


// IGetSpellsPage_Spells_Items_ActionType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_Items_ActionType
    {
        public global::System.String Name { get; }
    }
}


// IGetSpellsPage_Spells_Items_ActionType_ActionType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetSpellsPage_Spells_Items_ActionType_ActionType
        : IGetSpellsPage_Spells_Items_ActionType
    {
    }
}


// GetTraitByIdResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitByIdResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetTraitById_Traits_Items_Trait> _getTraitById_Traits_Items_TraitFromTraitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetTraitById_Traits_Items_Feats_Feat> _getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetTraitById_Traits_Items_Spells_Spell> _getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool> _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType> _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper;

        public GetTraitByIdResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetTraitById_Traits_Items_Trait> getTraitById_Traits_Items_TraitFromTraitEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetTraitById_Traits_Items_Feats_Feat> getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetTraitById_Traits_Items_Spells_Spell> getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool> getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType> getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTraitById_Traits_Items_TraitFromTraitEntityMapper = getTraitById_Traits_Items_TraitFromTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_TraitFromTraitEntityMapper));
            _getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper = getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper));
            _getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper = getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper));
            _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper = getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper));
            _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper = getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult);

        public GetTraitByIdResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTraitByIdResultInfo info)
            {
                return new GetTraitByIdResult(MapIGetTraitById_Traits(
                    info.Traits,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetTraitByIdResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits? MapIGetTraitById_Traits(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetTraitById_Traits returnValue = default!;

            if (data?.__typename.Equals(
                    "TraitCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTraitById_Traits_TraitCollectionSegment(MapIGetTraitById_Traits_ItemsArray(
                    data.Items,
                    snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items?>? MapIGetTraitById_Traits_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var traits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                traits.Add(MapIGetTraitById_Traits_Items(
                    child,
                    snapshot));
            }

            return traits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items? MapIGetTraitById_Traits_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_TraitFromTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats> MapNonNullableIGetTraitById_Traits_Items_FeatsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var feats = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                feats.Add(MapNonNullableIGetTraitById_Traits_Items_Feats(
                    child,
                    snapshot));
            }

            return feats;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats MapNonNullableIGetTraitById_Traits_Items_Feats(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells> MapNonNullableIGetTraitById_Traits_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetTraitById_Traits_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells MapNonNullableIGetTraitById_Traits_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_MagicSchool MapNonNullableIGetTraitById_Traits_Items_Spells_MagicSchool(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_SpellType MapNonNullableIGetTraitById_Traits_Items_Spells_SpellType(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellType",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetTraitByIdResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitByIdResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetTraitByIdResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? traits,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Traits = traits;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? Traits { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTraitByIdResultInfo(
                Traits,
                _entityIds,
                version);
        }
    }
}


// GetTraitByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitByIdResult
        : global::System.IEquatable<GetTraitByIdResult>
        , IGetTraitByIdResult
    {
        public GetTraitByIdResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits? traits)
        {
            Traits = traits;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits? Traits { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitByIdResult)obj);
        }

        public global::System.Boolean Equals(GetTraitByIdResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Traits is null && other.Traits is null) ||Traits != null && Traits.Equals(other.Traits)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Traits is null))
                {
                    hash ^= 397 * Traits.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetTraitById_Traits_TraitCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_TraitCollectionSegment
        : global::System.IEquatable<GetTraitById_Traits_TraitCollectionSegment>
        , IGetTraitById_Traits_TraitCollectionSegment
    {
        public GetTraitById_Traits_TraitCollectionSegment(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitById_Traits_TraitCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetTraitById_Traits_TraitCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetTraitById_Traits_Items_TraitFromTraitEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_TraitFromTraitEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetTraitById_Traits_Items_Trait>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetTraitById_Traits_Items_Feats_Feat> _getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetTraitById_Traits_Items_Spells_Spell> _getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool> _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType> _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper;

        public GetTraitById_Traits_Items_TraitFromTraitEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetTraitById_Traits_Items_Feats_Feat> getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetTraitById_Traits_Items_Spells_Spell> getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool> getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType> getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper = getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper));
            _getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper = getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper));
            _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper = getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper));
            _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper = getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper));
        }

        public GetTraitById_Traits_Items_Trait Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetTraitById_Traits_Items_Trait(
                entity.Id,
                entity.Name,
                entity.Description,
                MapNonNullableIGetTraitById_Traits_Items_FeatsNonNullableArray(
                    entity.Feats,
                    snapshot),
                MapNonNullableIGetTraitById_Traits_Items_SpellsNonNullableArray(
                    entity.Spells,
                    snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats> MapNonNullableIGetTraitById_Traits_Items_FeatsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var feats = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                feats.Add(MapNonNullableIGetTraitById_Traits_Items_Feats(
                    child,
                    snapshot));
            }

            return feats;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats MapNonNullableIGetTraitById_Traits_Items_Feats(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells> MapNonNullableIGetTraitById_Traits_Items_SpellsNonNullableArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            var spells = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells>();

            foreach (global::StrawberryShake.EntityId child in list)
            {
                spells.Add(MapNonNullableIGetTraitById_Traits_Items_Spells(
                    child,
                    snapshot));
            }

            return spells;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells MapNonNullableIGetTraitById_Traits_Items_Spells(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_MagicSchool MapNonNullableIGetTraitById_Traits_Items_Spells_MagicSchool(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_SpellType MapNonNullableIGetTraitById_Traits_Items_Spells_SpellType(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellType",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetTraitById_Traits_Items_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Trait
        : global::System.IEquatable<GetTraitById_Traits_Items_Trait>
        , IGetTraitById_Traits_Items_Trait
    {
        public GetTraitById_Traits_Items_Trait(
            global::System.Guid id,
            global::System.String name,
            global::System.String description,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats> feats,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells> spells)
        {
            Id = id;
            Name = name;
            Description = description;
            Feats = feats;
            Spells = spells;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats> Feats { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells> Spells { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitById_Traits_Items_Trait)obj);
        }

        public global::System.Boolean Equals(GetTraitById_Traits_Items_Trait? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Feats,
                        other.Feats)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Spells,
                        other.Spells);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                foreach (var Feats_elm in Feats)
                {
                    hash ^= 397 * Feats_elm.GetHashCode();
                }

                foreach (var Spells_elm in Spells)
                {
                    hash ^= 397 * Spells_elm.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, GetTraitById_Traits_Items_Feats_Feat>
    {
        public GetTraitById_Traits_Items_Feats_Feat Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetTraitById_Traits_Items_Feats_Feat(
                entity.Id,
                entity.Name,
                entity.Level,
                entity.CanBeLearnedMoreThanOnce);
        }
    }
}


// GetTraitById_Traits_Items_Feats_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Feats_Feat
        : global::System.IEquatable<GetTraitById_Traits_Items_Feats_Feat>
        , IGetTraitById_Traits_Items_Feats_Feat
    {
        public GetTraitById_Traits_Items_Feats_Feat(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 level,
            global::System.Boolean canBeLearnedMoreThanOnce)
        {
            Id = id;
            Name = name;
            Level = level;
            CanBeLearnedMoreThanOnce = canBeLearnedMoreThanOnce;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.Boolean CanBeLearnedMoreThanOnce { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitById_Traits_Items_Feats_Feat)obj);
        }

        public global::System.Boolean Equals(GetTraitById_Traits_Items_Feats_Feat? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Level == other.Level
                && CanBeLearnedMoreThanOnce == other.CanBeLearnedMoreThanOnce;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                hash ^= 397 * CanBeLearnedMoreThanOnce.GetHashCode();

                return hash;
            }
        }
    }
}


// GetTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, GetTraitById_Traits_Items_Spells_Spell>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool> _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType> _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper;

        public GetTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool> getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType> getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper = getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper));
            _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper = getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper));
        }

        public GetTraitById_Traits_Items_Spells_Spell Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetTraitById_Traits_Items_Spells_Spell(
                entity.Id,
                entity.Name,
                entity.Level,
                MapNonNullableIGetTraitById_Traits_Items_Spells_MagicSchool(
                    entity.MagicSchool,
                    snapshot),
                MapNonNullableIGetTraitById_Traits_Items_Spells_SpellType(
                    entity.SpellType,
                    snapshot));
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_MagicSchool MapNonNullableIGetTraitById_Traits_Items_Spells_MagicSchool(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_SpellType MapNonNullableIGetTraitById_Traits_Items_Spells_SpellType(
            global::StrawberryShake.EntityId entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {

            if (entityId.Name.Equals(
                    "SpellType",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity>(entityId)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }
    }
}


// GetTraitById_Traits_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Spells_Spell
        : global::System.IEquatable<GetTraitById_Traits_Items_Spells_Spell>
        , IGetTraitById_Traits_Items_Spells_Spell
    {
        public GetTraitById_Traits_Items_Spells_Spell(
            global::System.Guid id,
            global::System.String name,
            global::System.Int32 level,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_MagicSchool magicSchool,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_SpellType spellType)
        {
            Id = id;
            Name = name;
            Level = level;
            MagicSchool = magicSchool;
            SpellType = spellType;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_MagicSchool MagicSchool { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_SpellType SpellType { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitById_Traits_Items_Spells_Spell)obj);
        }

        public global::System.Boolean Equals(GetTraitById_Traits_Items_Spells_Spell? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Level == other.Level
                && MagicSchool.Equals(other.MagicSchool)
                && SpellType.Equals(other.SpellType);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Level.GetHashCode();

                hash ^= 397 * MagicSchool.GetHashCode();

                hash ^= 397 * SpellType.GetHashCode();

                return hash;
            }
        }
    }
}


// GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool>
    {
        public GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool(
                entity.Id,
                entity.Name);
        }
    }
}


// GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool
        : global::System.IEquatable<GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool>
        , IGetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool
    {
        public GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool)obj);
        }

        public global::System.Boolean Equals(GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// GetTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, GetTraitById_Traits_Items_Spells_SpellType_SpellType>
    {
        public GetTraitById_Traits_Items_Spells_SpellType_SpellType Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetTraitById_Traits_Items_Spells_SpellType_SpellType(
                entity.Id,
                entity.Name);
        }
    }
}


// GetTraitById_Traits_Items_Spells_SpellType_SpellType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitById_Traits_Items_Spells_SpellType_SpellType
        : global::System.IEquatable<GetTraitById_Traits_Items_Spells_SpellType_SpellType>
        , IGetTraitById_Traits_Items_Spells_SpellType_SpellType
    {
        public GetTraitById_Traits_Items_Spells_SpellType_SpellType(
            global::System.Guid id,
            global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitById_Traits_Items_Spells_SpellType_SpellType)obj);
        }

        public global::System.Boolean Equals(GetTraitById_Traits_Items_Spells_SpellType_SpellType? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetTraitByIdResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitByIdResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits? Traits { get; }
    }
}


// IGetTraitById_Traits.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items?>? Items { get; }
    }
}


// IGetTraitById_Traits_TraitCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_TraitCollectionSegment
        : IGetTraitById_Traits
    {
    }
}


// ITraitById.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ITraitById
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Feats> Feats { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells> Spells { get; }
    }
}


// IGetTraitById_Traits_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items
        : ITraitById
    {
    }
}


// IGetTraitById_Traits_Items_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Trait
        : IGetTraitById_Traits_Items
    {
    }
}


// ITraitById_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ITraitById_Feat
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::System.Boolean CanBeLearnedMoreThanOnce { get; }
    }
}


// IGetTraitById_Traits_Items_Feats.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Feats
        : ITraitById_Feat
    {
    }
}


// IGetTraitById_Traits_Items_Feats_Feat.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Feats_Feat
        : IGetTraitById_Traits_Items_Feats
    {
    }
}


// ITraitById_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ITraitById_Spell
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.Int32 Level { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_MagicSchool MagicSchool { get; }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitById_Traits_Items_Spells_SpellType SpellType { get; }
    }
}


// IGetTraitById_Traits_Items_Spells.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Spells
        : ITraitById_Spell
    {
    }
}


// IGetTraitById_Traits_Items_Spells_Spell.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Spells_Spell
        : IGetTraitById_Traits_Items_Spells
    {
    }
}


// ITraitById_Spell_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ITraitById_Spell_MagicSchool
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetTraitById_Traits_Items_Spells_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Spells_MagicSchool
        : ITraitById_Spell_MagicSchool
    {
    }
}


// IGetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool
        : IGetTraitById_Traits_Items_Spells_MagicSchool
    {
    }
}


// ITraitById_Spell_Type.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ITraitById_Spell_Type
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }
    }
}


// IGetTraitById_Traits_Items_Spells_SpellType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Spells_SpellType
        : ITraitById_Spell_Type
    {
    }
}


// IGetTraitById_Traits_Items_Spells_SpellType_SpellType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitById_Traits_Items_Spells_SpellType_SpellType
        : IGetTraitById_Traits_Items_Spells_SpellType
    {
    }
}


// GetTraitsPageResultFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPageResultFactory
        : global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetTraitsPage_Traits_Items_Trait> _getTraitsPage_Traits_Items_TraitFromTraitEntityMapper;

        public GetTraitsPageResultFactory(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetTraitsPage_Traits_Items_Trait> getTraitsPage_Traits_Items_TraitFromTraitEntityMapper)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getTraitsPage_Traits_Items_TraitFromTraitEntityMapper = getTraitsPage_Traits_Items_TraitFromTraitEntityMapper
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitsPage_Traits_Items_TraitFromTraitEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult);

        public GetTraitsPageResult Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetTraitsPageResultInfo info)
            {
                return new GetTraitsPageResult(MapIGetTraitsPage_Traits(
                    info.Traits,
                    snapshot));
            }

            throw new global::System.ArgumentException("GetTraitsPageResultInfo expected.");
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits? MapIGetTraitsPage_Traits(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? data,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetTraitsPage_Traits returnValue = default!;

            if (data?.__typename.Equals(
                    "TraitCollectionSegment",
                    global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetTraitsPage_Traits_TraitCollectionSegment(
                    data.TotalCount ?? throw new global::System.ArgumentNullException(),
                    MapIGetTraitsPage_Traits_ItemsArray(
                        data.Items,
                        snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }
            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits_Items?>? MapIGetTraitsPage_Traits_ItemsArray(
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var traits = new global::System.Collections.Generic.List<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits_Items?>();

            foreach (global::StrawberryShake.EntityId? child in list)
            {
                traits.Add(MapIGetTraitsPage_Traits_Items(
                    child,
                    snapshot));
            }

            return traits;
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits_Items? MapIGetTraitsPage_Traits_Items(
            global::StrawberryShake.EntityId? entityId,
            global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }


            if (entityId.Value.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                return _getTraitsPage_Traits_Items_TraitFromTraitEntityMapper.Map(
                    snapshot.GetEntity<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity>(entityId.Value)
                        ?? throw new global::StrawberryShake.GraphQLClientException());
            }
            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(
            global::StrawberryShake.IOperationResultDataInfo dataInfo,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(
                dataInfo,
                snapshot);
        }
    }
}


// GetTraitsPageResultInfo.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPageResultInfo
        : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;

        public GetTraitsPageResultInfo(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? traits,
            global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds,
            global::System.UInt64 version)
        {
            Traits = traits;
            _entityIds = entityIds
                 ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? Traits { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;

        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetTraitsPageResultInfo(
                Traits,
                _entityIds,
                version);
        }
    }
}


// GetTraitsPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPageResult
        : global::System.IEquatable<GetTraitsPageResult>
        , IGetTraitsPageResult
    {
        public GetTraitsPageResult(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits? traits)
        {
            Traits = traits;
        }

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits? Traits { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitsPageResult)obj);
        }

        public global::System.Boolean Equals(GetTraitsPageResult? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Traits is null && other.Traits is null) ||Traits != null && Traits.Equals(other.Traits)));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                if (!(Traits is null))
                {
                    hash ^= 397 * Traits.GetHashCode();
                }

                return hash;
            }
        }
    }
}


// GetTraitsPage_Traits_TraitCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPage_Traits_TraitCollectionSegment
        : global::System.IEquatable<GetTraitsPage_Traits_TraitCollectionSegment>
        , IGetTraitsPage_Traits_TraitCollectionSegment
    {
        public GetTraitsPage_Traits_TraitCollectionSegment(
            global::System.Int32 totalCount,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits_Items?>? items)
        {
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits_Items?>? Items { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitsPage_Traits_TraitCollectionSegment)obj);
        }

        public global::System.Boolean Equals(GetTraitsPage_Traits_TraitCollectionSegment? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount)
                && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(
                        Items,
                        other.Items);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * TotalCount.GetHashCode();

                if (!(Items is null))
                {
                    foreach (var Items_elm in Items)
                    {
                        if (!(Items_elm is null))
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }
}


// GetTraitsPage_Traits_Items_TraitFromTraitEntityMapper.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPage_Traits_Items_TraitFromTraitEntityMapper
        : global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, GetTraitsPage_Traits_Items_Trait>
    {
        public GetTraitsPage_Traits_Items_Trait Map(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity entity,
            global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            return new GetTraitsPage_Traits_Items_Trait(
                entity.Id,
                entity.Name,
                entity.Description);
        }
    }
}


// GetTraitsPage_Traits_Items_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPage_Traits_Items_Trait
        : global::System.IEquatable<GetTraitsPage_Traits_Items_Trait>
        , IGetTraitsPage_Traits_Items_Trait
    {
        public GetTraitsPage_Traits_Items_Trait(
            global::System.Guid id,
            global::System.String name,
            global::System.String description)
        {
            Id = id;
            Name = name;
            Description = description;
        }

        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(
                    null,
                    obj))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetTraitsPage_Traits_Items_Trait)obj);
        }

        public global::System.Boolean Equals(GetTraitsPage_Traits_Items_Trait? other)
        {
            if (ReferenceEquals(
                    null,
                    other))
            {
                return false;
            }

            if (ReferenceEquals(
                    this,
                    other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id)
                && Name.Equals(other.Name)
                && Description.Equals(other.Description);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;

                hash ^= 397 * Id.GetHashCode();

                hash ^= 397 * Name.GetHashCode();

                hash ^= 397 * Description.GetHashCode();

                return hash;
            }
        }
    }
}


// IGetTraitsPageResult.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitsPageResult
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits? Traits { get; }
    }
}


// IGetTraitsPage_Traits.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitsPage_Traits
    {
        public global::System.Int32 TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPage_Traits_Items?>? Items { get; }
    }
}


// IGetTraitsPage_Traits_TraitCollectionSegment.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitsPage_Traits_TraitCollectionSegment
        : IGetTraitsPage_Traits
    {
    }
}


// ITraitsPage.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface ITraitsPage
    {
        public global::System.Guid Id { get; }

        public global::System.String Name { get; }

        public global::System.String Description { get; }
    }
}


// IGetTraitsPage_Traits_Items.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitsPage_Traits_Items
        : ITraitsPage
    {
    }
}


// IGetTraitsPage_Traits_Items_Trait.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public interface IGetTraitsPage_Traits_Items_Trait
        : IGetTraitsPage_Traits_Items
    {
    }
}


// ClassSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ClassSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _proficiencySortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _magicTraditionSortInputFormatter = default!;

        public global::System.String TypeName => "ClassSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _proficiencySortInputFormatter = serializerResolver.GetInputValueFormatter("ProficiencySortInput");
            _magicTraditionSortInputFormatter = serializerResolver.GetInputValueFormatter("MagicTraditionSortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is ClassSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "baseHealth",
                    FormatBaseHealth(d.BaseHealth)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "duringCombatEncounters",
                    FormatDuringCombatEncounters(d.DuringCombatEncounters)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "duringSocialEncounters",
                    FormatDuringSocialEncounters(d.DuringSocialEncounters)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "whileExploring",
                    FormatWhileExploring(d.WhileExploring)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "inDowntime",
                    FormatInDowntime(d.InDowntime)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "perceptionProficiencyId",
                    FormatPerceptionProficiencyId(d.PerceptionProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "perceptionProficiency",
                    FormatPerceptionProficiency(d.PerceptionProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "fortitudeProficiencyId",
                    FormatFortitudeProficiencyId(d.FortitudeProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "fortitudeProficiency",
                    FormatFortitudeProficiency(d.FortitudeProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "willProficiencyId",
                    FormatWillProficiencyId(d.WillProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "willProficiency",
                    FormatWillProficiency(d.WillProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "reflexProficiencyId",
                    FormatReflexProficiencyId(d.ReflexProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "reflexProficiency",
                    FormatReflexProficiency(d.ReflexProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "simpleWeaponProficiencyId",
                    FormatSimpleWeaponProficiencyId(d.SimpleWeaponProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "simpleWeaponProficiency",
                    FormatSimpleWeaponProficiency(d.SimpleWeaponProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "martialWeaponProficiencyId",
                    FormatMartialWeaponProficiencyId(d.MartialWeaponProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "martialWeaponProficiency",
                    FormatMartialWeaponProficiency(d.MartialWeaponProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "advancedWeaponProficiencyId",
                    FormatAdvancedWeaponProficiencyId(d.AdvancedWeaponProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "advancedWeaponProficiency",
                    FormatAdvancedWeaponProficiency(d.AdvancedWeaponProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "unarmedWeaponProficiencyId",
                    FormatUnarmedWeaponProficiencyId(d.UnarmedWeaponProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "unarmedWeaponProficiency",
                    FormatUnarmedWeaponProficiency(d.UnarmedWeaponProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "unarmoredProficiencyId",
                    FormatUnarmoredProficiencyId(d.UnarmoredProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "unarmoredProficiency",
                    FormatUnarmoredProficiency(d.UnarmoredProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "lightArmorProficiencyId",
                    FormatLightArmorProficiencyId(d.LightArmorProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "lightArmorProficiency",
                    FormatLightArmorProficiency(d.LightArmorProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "mediumArmorProficiencyId",
                    FormatMediumArmorProficiencyId(d.MediumArmorProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "mediumArmorProficiency",
                    FormatMediumArmorProficiency(d.MediumArmorProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "heavyArmorProficiencyId",
                    FormatHeavyArmorProficiencyId(d.HeavyArmorProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "heavyArmorProficiency",
                    FormatHeavyArmorProficiency(d.HeavyArmorProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "classDcProficiencyId",
                    FormatClassDcProficiencyId(d.ClassDcProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "classDcProficiency",
                    FormatClassDcProficiency(d.ClassDcProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "spellDcProficiencyId",
                    FormatSpellDcProficiencyId(d.SpellDcProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "spellDcProficiency",
                    FormatSpellDcProficiency(d.SpellDcProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "spellAttackProficiencyId",
                    FormatSpellAttackProficiencyId(d.SpellAttackProficiencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "spellAttackProficiency",
                    FormatSpellAttackProficiency(d.SpellAttackProficiency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "predefinedMagicTraditionId",
                    FormatPredefinedMagicTraditionId(d.PredefinedMagicTraditionId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "predefinedMagicTradition",
                    FormatPredefinedMagicTradition(d.PredefinedMagicTradition)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatBaseHealth(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDuringCombatEncounters(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDuringSocialEncounters(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatWhileExploring(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatInDowntime(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatPerceptionProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatPerceptionProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatFortitudeProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatFortitudeProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatWillProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatWillProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatReflexProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatReflexProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatSimpleWeaponProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSimpleWeaponProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatMartialWeaponProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatMartialWeaponProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatAdvancedWeaponProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatAdvancedWeaponProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatUnarmedWeaponProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatUnarmedWeaponProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatUnarmoredProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatUnarmoredProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatLightArmorProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatLightArmorProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatMediumArmorProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatMediumArmorProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatHeavyArmorProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatHeavyArmorProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatClassDcProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatClassDcProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatSpellDcProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSpellDcProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatSpellAttackProficiencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSpellAttackProficiency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? value)
        {
            return _proficiencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatPredefinedMagicTraditionId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatPredefinedMagicTradition(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.MagicTraditionSortInput? value)
        {
            return _magicTraditionSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// ClassSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ClassSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? BaseHealth { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? DuringCombatEncounters { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? DuringSocialEncounters { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? WhileExploring { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? InDowntime { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? PerceptionProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? PerceptionProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? FortitudeProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? FortitudeProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? WillProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? WillProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? ReflexProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? ReflexProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? SimpleWeaponProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? SimpleWeaponProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? MartialWeaponProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? MartialWeaponProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? AdvancedWeaponProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? AdvancedWeaponProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? UnarmedWeaponProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? UnarmedWeaponProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? UnarmoredProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? UnarmoredProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? LightArmorProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? LightArmorProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? MediumArmorProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? MediumArmorProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? HeavyArmorProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? HeavyArmorProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? ClassDcProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? ClassDcProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? SpellDcProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? SpellDcProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? SpellAttackProficiencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInput? SpellAttackProficiency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? PredefinedMagicTraditionId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.MagicTraditionSortInput? PredefinedMagicTradition { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// ProficiencySortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ProficiencySortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "ProficiencySortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is ProficiencySortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// ProficiencySortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ProficiencySortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// MagicTraditionSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicTraditionSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "MagicTraditionSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is MagicTraditionSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// MagicTraditionSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicTraditionSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// DeitySortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeitySortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _deityCategorySortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _alignmentSortInputFormatter = default!;

        public global::System.String TypeName => "DeitySortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _deityCategorySortInputFormatter = serializerResolver.GetInputValueFormatter("DeityCategorySortInput");
            _alignmentSortInputFormatter = serializerResolver.GetInputValueFormatter("AlignmentSortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is DeitySortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "categoryId",
                    FormatCategoryId(d.CategoryId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "category",
                    FormatCategory(d.Category)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "alignmentId",
                    FormatAlignmentId(d.AlignmentId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "alignment",
                    FormatAlignment(d.Alignment)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatCategoryId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatCategory(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInput? value)
        {
            return _deityCategorySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatAlignmentId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatAlignment(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.AlignmentSortInput? value)
        {
            return _alignmentSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// DeitySortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeitySortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? CategoryId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInput? Category { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? AlignmentId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.AlignmentSortInput? Alignment { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// DeityCategorySortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityCategorySortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "DeityCategorySortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is DeityCategorySortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// DeityCategorySortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityCategorySortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// AlignmentSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class AlignmentSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "AlignmentSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is AlignmentSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// AlignmentSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class AlignmentSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// FeatSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _actionTypeSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _featTypeSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _frequencySortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _rollableEffectSortInputFormatter = default!;

        public global::System.String TypeName => "FeatSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _actionTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("ActionTypeSortInput");
            _featTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("FeatTypeSortInput");
            _frequencySortInputFormatter = serializerResolver.GetInputValueFormatter("FrequencySortInput");
            _rollableEffectSortInputFormatter = serializerResolver.GetInputValueFormatter("RollableEffectSortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is FeatSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "canBeLearnedMoreThanOnce",
                    FormatCanBeLearnedMoreThanOnce(d.CanBeLearnedMoreThanOnce)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "special",
                    FormatSpecial(d.Special)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "trigger",
                    FormatTrigger(d.Trigger)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "level",
                    FormatLevel(d.Level)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "actionTypeId",
                    FormatActionTypeId(d.ActionTypeId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "actionType",
                    FormatActionType(d.ActionType)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "featTypeId",
                    FormatFeatTypeId(d.FeatTypeId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "featType",
                    FormatFeatType(d.FeatType)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "frequencyId",
                    FormatFrequencyId(d.FrequencyId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "frequency",
                    FormatFrequency(d.Frequency)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "rollableEffect",
                    FormatRollableEffect(d.RollableEffect)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "rollableEffectId",
                    FormatRollableEffectId(d.RollableEffectId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatCanBeLearnedMoreThanOnce(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSpecial(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatTrigger(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatLevel(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatActionTypeId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatActionType(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ActionTypeSortInput? value)
        {
            return _actionTypeSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatFeatTypeId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatFeatType(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatTypeSortInput? value)
        {
            return _featTypeSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatFrequencyId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatFrequency(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FrequencySortInput? value)
        {
            return _frequencySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatRollableEffect(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RollableEffectSortInput? value)
        {
            return _rollableEffectSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatRollableEffectId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// FeatSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? CanBeLearnedMoreThanOnce { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Special { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Trigger { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Level { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? ActionTypeId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ActionTypeSortInput? ActionType { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? FeatTypeId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatTypeSortInput? FeatType { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? FrequencyId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FrequencySortInput? Frequency { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RollableEffectSortInput? RollableEffect { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? RollableEffectId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// ActionTypeSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ActionTypeSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "ActionTypeSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is ActionTypeSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// ActionTypeSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ActionTypeSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// FeatTypeSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatTypeSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "FeatTypeSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is FeatTypeSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// FeatTypeSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatTypeSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// FrequencySortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FrequencySortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "FrequencySortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is FrequencySortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "amount",
                    FormatAmount(d.Amount)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "timeSpan",
                    FormatTimeSpan(d.TimeSpan)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatAmount(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatTimeSpan(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// FrequencySortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FrequencySortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Amount { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? TimeSpan { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// RollableEffectSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RollableEffectSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "RollableEffectSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is RollableEffectSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "criticalSuccess",
                    FormatCriticalSuccess(d.CriticalSuccess)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "success",
                    FormatSuccess(d.Success)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "failure",
                    FormatFailure(d.Failure)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "criticalFailure",
                    FormatCriticalFailure(d.CriticalFailure)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatCriticalSuccess(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSuccess(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatFailure(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatCriticalFailure(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// RollableEffectSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RollableEffectSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? CriticalSuccess { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Success { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Failure { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? CriticalFailure { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// LanguageSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _languageTypeSortInputFormatter = default!;

        public global::System.String TypeName => "LanguageSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _languageTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("LanguageTypeSortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is LanguageSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "typeId",
                    FormatTypeId(d.TypeId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "type",
                    FormatType(d.Type)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatTypeId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatType(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInput? value)
        {
            return _languageTypeSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// LanguageSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? TypeId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInput? Type { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// LanguageTypeSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageTypeSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "LanguageTypeSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is LanguageTypeSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// LanguageTypeSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageTypeSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// RaceSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _raceSizeSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _raceRaritySortInputFormatter = default!;

        public global::System.String TypeName => "RaceSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _raceSizeSortInputFormatter = serializerResolver.GetInputValueFormatter("RaceSizeSortInput");
            _raceRaritySortInputFormatter = serializerResolver.GetInputValueFormatter("RaceRaritySortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is RaceSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "baseSpeed",
                    FormatBaseSpeed(d.BaseSpeed)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "baseHealth",
                    FormatBaseHealth(d.BaseHealth)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "sizeId",
                    FormatSizeId(d.SizeId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "size",
                    FormatSize(d.Size)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "rarityId",
                    FormatRarityId(d.RarityId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "rarity",
                    FormatRarity(d.Rarity)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatBaseSpeed(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatBaseHealth(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSizeId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSize(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSizeSortInput? value)
        {
            return _raceSizeSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatRarityId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatRarity(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceRaritySortInput? value)
        {
            return _raceRaritySortInputFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// RaceSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? BaseSpeed { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? BaseHealth { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? SizeId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSizeSortInput? Size { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? RarityId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceRaritySortInput? Rarity { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// RaceSizeSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceSizeSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "RaceSizeSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is RaceSizeSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "space",
                    FormatSpace(d.Space)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "heightReach",
                    FormatHeightReach(d.HeightReach)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "breadthReach",
                    FormatBreadthReach(d.BreadthReach)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSpace(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatHeightReach(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatBreadthReach(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// RaceSizeSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceSizeSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Space { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? HeightReach { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? BreadthReach { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// RaceRaritySortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceRaritySortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "RaceRaritySortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is RaceRaritySortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// RaceRaritySortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceRaritySortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// SpellSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _actionTypeSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _spellTypeSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _savingThrowStatSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _rollableEffectSortInputFormatter = default!;
        private global::StrawberryShake.Serialization.IInputValueFormatter _magicSchoolSortInputFormatter = default!;

        public global::System.String TypeName => "SpellSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
            _actionTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("ActionTypeSortInput");
            _spellTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("SpellTypeSortInput");
            _savingThrowStatSortInputFormatter = serializerResolver.GetInputValueFormatter("SavingThrowStatSortInput");
            _rollableEffectSortInputFormatter = serializerResolver.GetInputValueFormatter("RollableEffectSortInput");
            _magicSchoolSortInputFormatter = serializerResolver.GetInputValueFormatter("MagicSchoolSortInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is SpellSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "range",
                    FormatRange(d.Range)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "castTime",
                    FormatCastTime(d.CastTime)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "level",
                    FormatLevel(d.Level)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "targets",
                    FormatTargets(d.Targets)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "isDismissable",
                    FormatIsDismissable(d.IsDismissable)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "area",
                    FormatArea(d.Area)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "duration",
                    FormatDuration(d.Duration)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "actionTypeId",
                    FormatActionTypeId(d.ActionTypeId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "actionType",
                    FormatActionType(d.ActionType)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "spellTypeId",
                    FormatSpellTypeId(d.SpellTypeId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "spellType",
                    FormatSpellType(d.SpellType)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "savingThrowStatId",
                    FormatSavingThrowStatId(d.SavingThrowStatId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "savingThrowStat",
                    FormatSavingThrowStat(d.SavingThrowStat)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "rollableEffect",
                    FormatRollableEffect(d.RollableEffect)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "rollableEffectId",
                    FormatRollableEffectId(d.RollableEffectId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "magicSchool",
                    FormatMagicSchool(d.MagicSchool)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "magicSchoolId",
                    FormatMagicSchoolId(d.MagicSchoolId)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatRange(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatCastTime(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatLevel(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatTargets(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatIsDismissable(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatArea(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDuration(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatActionTypeId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatActionType(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ActionTypeSortInput? value)
        {
            return _actionTypeSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatSpellTypeId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSpellType(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellTypeSortInput? value)
        {
            return _spellTypeSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatSavingThrowStatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatSavingThrowStat(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SavingThrowStatSortInput? value)
        {
            return _savingThrowStatSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatRollableEffect(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RollableEffectSortInput? value)
        {
            return _rollableEffectSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatRollableEffectId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatMagicSchool(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.MagicSchoolSortInput? value)
        {
            return _magicSchoolSortInputFormatter.Format(value);
        }

        private global::System.Object? FormatMagicSchoolId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// SpellSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Range { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? CastTime { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Level { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Targets { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? IsDismissable { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Area { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Duration { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? ActionTypeId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ActionTypeSortInput? ActionType { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? SpellTypeId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellTypeSortInput? SpellType { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? SavingThrowStatId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SavingThrowStatSortInput? SavingThrowStat { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RollableEffectSortInput? RollableEffect { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? RollableEffectId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.MagicSchoolSortInput? MagicSchool { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? MagicSchoolId { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// SpellTypeSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellTypeSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "SpellTypeSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is SpellTypeSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// SpellTypeSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellTypeSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// SavingThrowStatSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SavingThrowStatSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "SavingThrowStatSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is SavingThrowStatSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// SavingThrowStatSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SavingThrowStatSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// MagicSchoolSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicSchoolSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "MagicSchoolSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is MagicSchoolSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "abbreviation",
                    FormatAbbreviation(d.Abbreviation)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatAbbreviation(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// MagicSchoolSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicSchoolSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Abbreviation { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// TraitSortInputInputValueFormatter.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class TraitSortInputInputValueFormatter
        : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default!;

        public global::System.String TypeName => "TraitSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            if (!(runtimeValue is TraitSortInput d))
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            return new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>[] {
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "name",
                    FormatName(d.Name)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "description",
                    FormatDescription(d.Description)),
                new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>(
                    "id",
                    FormatId(d.Id))
            };
        }

        private global::System.Object? FormatName(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatDescription(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }

        private global::System.Object? FormatId(global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? value)
        {
            return _sortEnumTypeFormatter.Format(value);
        }
    }
}


// TraitSortInput.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class TraitSortInput
    {
        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Name { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Description { get; set; } = default!;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType? Id { get; set; } = default!;
    }
}


// SortEnumType.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public enum SortEnumType
    {
        Asc,
        Desc
    }
}


// SortEnumTypeSerializer.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SortEnumTypeSerializer
        : global::StrawberryShake.Serialization.IInputValueFormatter
        , global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SortEnumType>
    {
        public global::System.String TypeName => "SortEnumType";

        public SortEnumType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ASC" => SortEnumType.Asc,
                "DESC" => SortEnumType.Desc,
                _ => throw new global::StrawberryShake.GraphQLClientException()
            };
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                SortEnumType.Asc => "ASC",
                SortEnumType.Desc => "DESC",
                _ => throw new global::StrawberryShake.GraphQLClientException()
            };
        }
    }
}


// GetClassByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetClassById GraphQL operation
    /// <code>
    /// query GetClassById($id: Uuid!) {
    ///   classes(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       baseHealth
    ///       perceptionProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       fortitudeProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       willProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       reflexProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       classDcProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       simpleWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       martialWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       advancedWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       unarmedWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       lightArmorProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       mediumArmorProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       heavyArmorProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       unarmoredProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       spellDcProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       spellAttackProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       classDcProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       predefinedMagicTradition {
    ///         __typename
    ///         id
    ///         name
    ///         ... on MagicTradition {
    ///           id
    ///         }
    ///       }
    ///       keyAbilities {
    ///         __typename
    ///         id
    ///         name
    ///         abbreviation
    ///         ... on Stat {
    ///           id
    ///         }
    ///       }
    ///       mannerisms {
    ///         __typename
    ///         text
    ///         ... on ClassMannerism {
    ///           id
    ///         }
    ///       }
    ///       characteristics {
    ///         __typename
    ///         text
    ///         ... on ClassCharacteristic {
    ///           id
    ///         }
    ///       }
    ///       duringCombatEncounters
    ///       duringSocialEncounters
    ///       whileExploring
    ///       inDowntime
    ///       ... on Class {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetClassByIdQueryDocument()
        {
        }

        public static GetClassByIdQueryDocument Instance { get; } = new GetClassByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6d, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x75, 0x6e, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x68, 0x65, 0x61, 0x76, 0x79, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x75, 0x6e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x44, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6b, 0x65, 0x79, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x69, 0x73, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x69, 0x73, 0x6d, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "990763d31b7eed866d11f602ec0db239e8b2e63a");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetClassByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetClassById GraphQL operation
    /// <code>
    /// query GetClassById($id: Uuid!) {
    ///   classes(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       baseHealth
    ///       perceptionProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       fortitudeProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       willProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       reflexProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       classDcProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       simpleWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       martialWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       advancedWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       unarmedWeaponProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       lightArmorProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       mediumArmorProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       heavyArmorProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       unarmoredProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       spellDcProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       spellAttackProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       classDcProficiency {
    ///         __typename
    ///         name
    ///         ... on Proficiency {
    ///           id
    ///         }
    ///       }
    ///       predefinedMagicTradition {
    ///         __typename
    ///         id
    ///         name
    ///         ... on MagicTradition {
    ///           id
    ///         }
    ///       }
    ///       keyAbilities {
    ///         __typename
    ///         id
    ///         name
    ///         abbreviation
    ///         ... on Stat {
    ///           id
    ///         }
    ///       }
    ///       mannerisms {
    ///         __typename
    ///         text
    ///         ... on ClassMannerism {
    ///           id
    ///         }
    ///       }
    ///       characteristics {
    ///         __typename
    ///         text
    ///         ... on ClassCharacteristic {
    ///           id
    ///         }
    ///       }
    ///       duringCombatEncounters
    ///       duringSocialEncounters
    ///       whileExploring
    ///       inDowntime
    ///       ... on Class {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetClassByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetClassByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetClassByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetClassByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetClassByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetClassByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetClassByIdQueryDocument.Instance.Hash.Value,
                name: "GetClassById",
                document: GetClassByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetClassesPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetClassesPage GraphQL operation
    /// <code>
    /// query GetClassesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [ClassSortInput!] = [ { name: ASC } ]) {
    ///   classes(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       baseHealth
    ///       description
    ///       ... on Class {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetClassesPageQueryDocument()
        {
        }

        public static GetClassesPageQueryDocument Instance { get; } = new GetClassesPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "a7166f9487ece9c41315104275b705d499857988");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetClassesPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetClassesPage GraphQL operation
    /// <code>
    /// query GetClassesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [ClassSortInput!] = [ { name: ASC } ]) {
    ///   classes(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       baseHealth
    ///       description
    ///       ... on Class {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetClassesPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _classSortInputFormatter;

        public GetClassesPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetClassesPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _classSortInputFormatter = serializerResolver.GetInputValueFormatter("ClassSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetClassesPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetClassesPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ClassSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetClassesPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ClassSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ClassSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetClassesPageQueryDocument.Instance.Hash.Value,
                name: "GetClassesPage",
                document: GetClassesPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ClassSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_classSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetDeitiesPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeitiesPage GraphQL operation
    /// <code>
    /// query GetDeitiesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [DeitySortInput!] = [ { name: ASC } ]) {
    ///   deities(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       ... on Deity {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetDeitiesPageQueryDocument()
        {
        }

        public static GetDeitiesPageQueryDocument Instance { get; } = new GetDeitiesPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x44, 0x65, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x69, 0x74, 0x69, 0x65, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "0ce75cafe1c397760e685bb2044aa8ed080daad3");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetDeitiesPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeitiesPage GraphQL operation
    /// <code>
    /// query GetDeitiesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [DeitySortInput!] = [ { name: ASC } ]) {
    ///   deities(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       ... on Deity {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDeitiesPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _deitySortInputFormatter;

        public GetDeitiesPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetDeitiesPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _deitySortInputFormatter = serializerResolver.GetInputValueFormatter("DeitySortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDeitiesPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDeitiesPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeitySortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDeitiesPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeitySortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeitySortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetDeitiesPageQueryDocument.Instance.Hash.Value,
                name: "GetDeitiesPage",
                document: GetDeitiesPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeitySortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_deitySortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetDeityByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeityById GraphQL operation
    /// <code>
    /// query GetDeityById($id: Uuid!) {
    ///   deities(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       category {
    ///         __typename
    ///         id
    ///         name
    ///         ... on DeityCategory {
    ///           id
    ///         }
    ///       }
    ///       alignment {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Alignment {
    ///           id
    ///         }
    ///       }
    ///       followerAlignments {
    ///         __typename
    ///         alignment {
    ///           __typename
    ///           id
    ///           name
    ///           ... on Alignment {
    ///             id
    ///           }
    ///         }
    ///         ... on DeityFollowerAlignment {
    ///           id
    ///         }
    ///       }
    ///       divineFonts {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on DivineFont {
    ///           id
    ///         }
    ///       }
    ///       domains {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on Domain {
    ///           id
    ///         }
    ///       }
    ///       ... on Deity {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetDeityByIdQueryDocument()
        {
        }

        public static GetDeityByIdQueryDocument Instance { get; } = new GetDeityByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x69, 0x74, 0x69, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "042430d9eb3e4776f832a5cb4b1b00b0bf2e615b");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetDeityByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeityById GraphQL operation
    /// <code>
    /// query GetDeityById($id: Uuid!) {
    ///   deities(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       category {
    ///         __typename
    ///         id
    ///         name
    ///         ... on DeityCategory {
    ///           id
    ///         }
    ///       }
    ///       alignment {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Alignment {
    ///           id
    ///         }
    ///       }
    ///       followerAlignments {
    ///         __typename
    ///         alignment {
    ///           __typename
    ///           id
    ///           name
    ///           ... on Alignment {
    ///             id
    ///           }
    ///         }
    ///         ... on DeityFollowerAlignment {
    ///           id
    ///         }
    ///       }
    ///       divineFonts {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on DivineFont {
    ///           id
    ///         }
    ///       }
    ///       domains {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on Domain {
    ///           id
    ///         }
    ///       }
    ///       ... on Deity {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDeityByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetDeityByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetDeityByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDeityByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDeityByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDeityByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetDeityByIdQueryDocument.Instance.Hash.Value,
                name: "GetDeityById",
                document: GetDeityByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetDeityCategoryByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeityCategoryById GraphQL operation
    /// <code>
    /// query GetDeityCategoryById($id: Uuid!) {
    ///   deityCategories(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       deities {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on Deity {
    ///           id
    ///         }
    ///       }
    ///       ... on DeityCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetDeityCategoryByIdQueryDocument()
        {
        }

        public static GetDeityCategoryByIdQueryDocument Instance { get; } = new GetDeityCategoryByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "5780c091ed5f24625b936153c8a1915b44bf540c");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetDeityCategoryByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeityCategoryById GraphQL operation
    /// <code>
    /// query GetDeityCategoryById($id: Uuid!) {
    ///   deityCategories(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       deities {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on Deity {
    ///           id
    ///         }
    ///       }
    ///       ... on DeityCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDeityCategoryByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetDeityCategoryByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetDeityCategoryByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDeityCategoryByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDeityCategoryByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDeityCategoryByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetDeityCategoryByIdQueryDocument.Instance.Hash.Value,
                name: "GetDeityCategoryById",
                document: GetDeityCategoryByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetDeityCategoriesPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeityCategoriesPage GraphQL operation
    /// <code>
    /// query GetDeityCategoriesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [DeityCategorySortInput!] = [ { name: ASC } ]) {
    ///   deityCategories(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       ... on DeityCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetDeityCategoriesPageQueryDocument()
        {
        }

        public static GetDeityCategoriesPageQueryDocument Instance { get; } = new GetDeityCategoriesPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x44, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "7668e6b144d26bbf7a3de5522ce07a88cd94af35");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetDeityCategoriesPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDeityCategoriesPage GraphQL operation
    /// <code>
    /// query GetDeityCategoriesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [DeityCategorySortInput!] = [ { name: ASC } ]) {
    ///   deityCategories(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       ... on DeityCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDeityCategoriesPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _deityCategorySortInputFormatter;

        public GetDeityCategoriesPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetDeityCategoriesPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _deityCategorySortInputFormatter = serializerResolver.GetInputValueFormatter("DeityCategorySortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDeityCategoriesPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDeityCategoriesPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDeityCategoriesPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetDeityCategoriesPageQueryDocument.Instance.Hash.Value,
                name: "GetDeityCategoriesPage",
                document: GetDeityCategoriesPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_deityCategorySortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetDivineFontsQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDivineFonts GraphQL operation
    /// <code>
    /// query GetDivineFonts {
    ///   divineFonts {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       deities {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on Deity {
    ///           id
    ///         }
    ///       }
    ///       ... on DivineFont {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFontsQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetDivineFontsQueryDocument()
        {
        }

        public static GetDivineFontsQueryDocument Instance { get; } = new GetDivineFontsQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "bbca4fd3e5cb00afbaf4a9625213939895d2eaa3");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetDivineFontsQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetDivineFonts GraphQL operation
    /// <code>
    /// query GetDivineFonts {
    ///   divineFonts {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       deities {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on Deity {
    ///           id
    ///         }
    ///       }
    ///       ... on DivineFont {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFontsQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDivineFontsResult> _operationExecutor;

        public GetDivineFontsQuery(global::StrawberryShake.IOperationExecutor<IGetDivineFontsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDivineFontsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDivineFontsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDivineFontsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {

            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetDivineFontsQueryDocument.Instance.Hash.Value,
                name: "GetDivineFonts",
                document: GetDivineFontsQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}


// GetFeatByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetFeatById GraphQL operation
    /// <code>
    /// query GetFeatById($id: Uuid!) {
    ///   feats(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... FeatById
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById on Feat {
    ///   id
    ///   name
    ///   level
    ///   special
    ///   trigger
    ///   frequency {
    ///     __typename
    ///     name
    ///     ... on Frequency {
    ///       id
    ///     }
    ///   }
    ///   traits {
    ///     __typename
    ///     ... FeatById_Trait
    ///     ... on Trait {
    ///       id
    ///     }
    ///   }
    ///   rollableEffect {
    ///     __typename
    ///     ... FeatById_RollableEffect
    ///     ... on RollableEffect {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById_Trait on Trait {
    ///   id
    ///   name
    ///   description
    /// }
    /// 
    /// fragment FeatById_RollableEffect on RollableEffect {
    ///   criticalSuccess
    ///   success
    ///   failure
    ///   criticalFailure
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetFeatByIdQueryDocument()
        {
        }

        public static GetFeatByIdQueryDocument Instance { get; } = new GetFeatByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x61, 0x74, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x46, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "f84862fb01153130c9492697d69bedd8e806e2ad");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetFeatByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetFeatById GraphQL operation
    /// <code>
    /// query GetFeatById($id: Uuid!) {
    ///   feats(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... FeatById
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById on Feat {
    ///   id
    ///   name
    ///   level
    ///   special
    ///   trigger
    ///   frequency {
    ///     __typename
    ///     name
    ///     ... on Frequency {
    ///       id
    ///     }
    ///   }
    ///   traits {
    ///     __typename
    ///     ... FeatById_Trait
    ///     ... on Trait {
    ///       id
    ///     }
    ///   }
    ///   rollableEffect {
    ///     __typename
    ///     ... FeatById_RollableEffect
    ///     ... on RollableEffect {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatById_Trait on Trait {
    ///   id
    ///   name
    ///   description
    /// }
    /// 
    /// fragment FeatById_RollableEffect on RollableEffect {
    ///   criticalSuccess
    ///   success
    ///   failure
    ///   criticalFailure
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFeatByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetFeatByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetFeatByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFeatByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFeatByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFeatByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetFeatByIdQueryDocument.Instance.Hash.Value,
                name: "GetFeatById",
                document: GetFeatByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetFeatsPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetFeatsPage GraphQL operation
    /// <code>
    /// query GetFeatsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [FeatSortInput!] = [ { name: ASC } ]) {
    ///   feats(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { traits: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... FeatsPage
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatsPage on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetFeatsPageQueryDocument()
        {
        }

        public static GetFeatsPageQueryDocument Instance { get; } = new GetFeatsPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x46, 0x65, 0x61, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x66, 0x65, 0x61, 0x74, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x46, 0x65, 0x61, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "defcd7f67f31345e43429d1db7aa93bc8ca8af7d");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetFeatsPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetFeatsPage GraphQL operation
    /// <code>
    /// query GetFeatsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [FeatSortInput!] = [ { name: ASC } ]) {
    ///   feats(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { traits: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... FeatsPage
    ///       ... on Feat {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment FeatsPage on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    ///   details {
    ///     __typename
    ///     text
    ///     ... on FeatDetailsBlock {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFeatsPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _featSortInputFormatter;

        public GetFeatsPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetFeatsPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _featSortInputFormatter = serializerResolver.GetInputValueFormatter("FeatSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFeatsPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFeatsPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFeatsPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetFeatsPageQueryDocument.Instance.Hash.Value,
                name: "GetFeatsPage",
                document: GetFeatsPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_featSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetLanguageByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguageById GraphQL operation
    /// <code>
    /// query GetLanguageById($id: Uuid!) {
    ///   languages(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       races {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Race {
    ///           id
    ///         }
    ///       }
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetLanguageByIdQueryDocument()
        {
        }

        public static GetLanguageByIdQueryDocument Instance { get; } = new GetLanguageByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "e784f96c4cf81eba64fc60eb2d9a845d19b04867");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetLanguageByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguageById GraphQL operation
    /// <code>
    /// query GetLanguageById($id: Uuid!) {
    ///   languages(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       races {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Race {
    ///           id
    ///         }
    ///       }
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLanguageByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetLanguageByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetLanguageByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLanguageByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLanguageByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLanguageByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetLanguageByIdQueryDocument.Instance.Hash.Value,
                name: "GetLanguageById",
                document: GetLanguageByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetLanguagesPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguagesPage GraphQL operation
    /// <code>
    /// query GetLanguagesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [LanguageSortInput!] = [ { name: ASC } ]) {
    ///   languages(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetLanguagesPageQueryDocument()
        {
        }

        public static GetLanguagesPageQueryDocument Instance { get; } = new GetLanguagesPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "b7fa882092b846668bc3f85f5a109847da1ae8d5");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetLanguagesPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguagesPage GraphQL operation
    /// <code>
    /// query GetLanguagesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [LanguageSortInput!] = [ { name: ASC } ]) {
    ///   languages(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLanguagesPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageSortInputFormatter;

        public GetLanguagesPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetLanguagesPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageSortInputFormatter = serializerResolver.GetInputValueFormatter("LanguageSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLanguagesPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLanguagesPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLanguagesPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetLanguagesPageQueryDocument.Instance.Hash.Value,
                name: "GetLanguagesPage",
                document: GetLanguagesPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_languageSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetLanguageTypeByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguageTypeById GraphQL operation
    /// <code>
    /// query GetLanguageTypeById($id: Uuid!) {
    ///   languageTypes(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       languages {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Language {
    ///           id
    ///         }
    ///       }
    ///       ... on LanguageType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetLanguageTypeByIdQueryDocument()
        {
        }

        public static GetLanguageTypeByIdQueryDocument Instance { get; } = new GetLanguageTypeByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "3335d12c7a5ebf3c3dd3557e1f40878ad12fdd18");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetLanguageTypeByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguageTypeById GraphQL operation
    /// <code>
    /// query GetLanguageTypeById($id: Uuid!) {
    ///   languageTypes(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       languages {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Language {
    ///           id
    ///         }
    ///       }
    ///       ... on LanguageType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLanguageTypeByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetLanguageTypeByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetLanguageTypeByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLanguageTypeByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLanguageTypeByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLanguageTypeByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetLanguageTypeByIdQueryDocument.Instance.Hash.Value,
                name: "GetLanguageTypeById",
                document: GetLanguageTypeByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetLanguageTypesPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguageTypesPage GraphQL operation
    /// <code>
    /// query GetLanguageTypesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [LanguageTypeSortInput!] = [ { name: ASC } ]) {
    ///   languageTypes(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       ... on LanguageType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetLanguageTypesPageQueryDocument()
        {
        }

        public static GetLanguageTypesPageQueryDocument Instance { get; } = new GetLanguageTypesPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "ea6036f4caf18ee8cc056e88a9c9865422282e1b");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetLanguageTypesPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetLanguageTypesPage GraphQL operation
    /// <code>
    /// query GetLanguageTypesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [LanguageTypeSortInput!] = [ { name: ASC } ]) {
    ///   languageTypes(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       ... on LanguageType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetLanguageTypesPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _languageTypeSortInputFormatter;

        public GetLanguageTypesPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetLanguageTypesPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _languageTypeSortInputFormatter = serializerResolver.GetInputValueFormatter("LanguageTypeSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetLanguageTypesPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetLanguageTypesPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetLanguageTypesPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetLanguageTypesPageQueryDocument.Instance.Hash.Value,
                name: "GetLanguageTypesPage",
                document: GetLanguageTypesPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_languageTypeSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetMagicComponentByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicComponentById GraphQL operation
    /// <code>
    /// query GetMagicComponentById($id: Uuid!) {
    ///   spellComponents(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicComponentById
    ///       ... on SpellComponent {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicComponentById on SpellComponent {
    ///   id
    ///   name
    ///   description
    ///   spells {
    ///     __typename
    ///     ... MagicComponentById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicComponentById_Spell on Spell {
    ///   id
    ///   name
    ///   description
    ///   level
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicComponentByIdQueryDocument()
        {
        }

        public static GetMagicComponentByIdQueryDocument Instance { get; } = new GetMagicComponentByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "5fa9ad91d5ca70efa0100061bdc40b17ad6663de");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicComponentByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicComponentById GraphQL operation
    /// <code>
    /// query GetMagicComponentById($id: Uuid!) {
    ///   spellComponents(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicComponentById
    ///       ... on SpellComponent {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicComponentById on SpellComponent {
    ///   id
    ///   name
    ///   description
    ///   spells {
    ///     __typename
    ///     ... MagicComponentById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicComponentById_Spell on Spell {
    ///   id
    ///   name
    ///   description
    ///   level
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicComponentByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetMagicComponentByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetMagicComponentByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicComponentByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicComponentByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicComponentByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicComponentByIdQueryDocument.Instance.Hash.Value,
                name: "GetMagicComponentById",
                document: GetMagicComponentByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetMagicComponentsQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicComponents GraphQL operation
    /// <code>
    /// query GetMagicComponents {
    ///   spellComponents(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicComponent
    ///       ... on SpellComponent {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicComponent on SpellComponent {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentsQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicComponentsQueryDocument()
        {
        }

        public static GetMagicComponentsQueryDocument Instance { get; } = new GetMagicComponentsQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "9c4c8a79b624ee92ec10954b333f98a62d01a4b2");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicComponentsQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicComponents GraphQL operation
    /// <code>
    /// query GetMagicComponents {
    ///   spellComponents(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicComponent
    ///       ... on SpellComponent {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicComponent on SpellComponent {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentsQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicComponentsResult> _operationExecutor;

        public GetMagicComponentsQuery(global::StrawberryShake.IOperationExecutor<IGetMagicComponentsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicComponentsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicComponentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicComponentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {

            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicComponentsQueryDocument.Instance.Hash.Value,
                name: "GetMagicComponents",
                document: GetMagicComponentsQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}


// GetMagicEssencesQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicEssences GraphQL operation
    /// <code>
    /// query GetMagicEssences {
    ///   magicEssences(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicEssence
    ///       ... on MagicEssence {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicEssence on MagicEssence {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssencesQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicEssencesQueryDocument()
        {
        }

        public static GetMagicEssencesQueryDocument Instance { get; } = new GetMagicEssencesQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "91e21029d77dba29b1269862e23ab687452c48c7");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicEssencesQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicEssences GraphQL operation
    /// <code>
    /// query GetMagicEssences {
    ///   magicEssences(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicEssence
    ///       ... on MagicEssence {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicEssence on MagicEssence {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssencesQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicEssencesResult> _operationExecutor;

        public GetMagicEssencesQuery(global::StrawberryShake.IOperationExecutor<IGetMagicEssencesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicEssencesResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicEssencesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicEssencesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {

            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicEssencesQueryDocument.Instance.Hash.Value,
                name: "GetMagicEssences",
                document: GetMagicEssencesQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}


// GetMagicSchoolByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicSchoolById GraphQL operation
    /// <code>
    /// query GetMagicSchoolById($id: Uuid!) {
    ///   magicSchools(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicSchoolById
    ///       ... on MagicSchool {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicSchoolById on MagicSchool {
    ///   id
    ///   name
    ///   description
    ///   spells {
    ///     __typename
    ///     ... MagicSchoolById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicSchoolById_Spell on Spell {
    ///   id
    ///   name
    ///   description
    ///   level
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicSchoolByIdQueryDocument()
        {
        }

        public static GetMagicSchoolByIdQueryDocument Instance { get; } = new GetMagicSchoolByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "afeee705afbda7896546add6792563baacfb34b7");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicSchoolByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicSchoolById GraphQL operation
    /// <code>
    /// query GetMagicSchoolById($id: Uuid!) {
    ///   magicSchools(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicSchoolById
    ///       ... on MagicSchool {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicSchoolById on MagicSchool {
    ///   id
    ///   name
    ///   description
    ///   spells {
    ///     __typename
    ///     ... MagicSchoolById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicSchoolById_Spell on Spell {
    ///   id
    ///   name
    ///   description
    ///   level
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicSchoolByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetMagicSchoolByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetMagicSchoolByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicSchoolByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicSchoolByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicSchoolByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicSchoolByIdQueryDocument.Instance.Hash.Value,
                name: "GetMagicSchoolById",
                document: GetMagicSchoolByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetMagicSchoolsQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicSchools GraphQL operation
    /// <code>
    /// query GetMagicSchools {
    ///   magicSchools(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicSchool
    ///       ... on MagicSchool {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicSchool on MagicSchool {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolsQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicSchoolsQueryDocument()
        {
        }

        public static GetMagicSchoolsQueryDocument Instance { get; } = new GetMagicSchoolsQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "48140c93894c346861a435c61896d82757c4f473");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicSchoolsQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicSchools GraphQL operation
    /// <code>
    /// query GetMagicSchools {
    ///   magicSchools(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicSchool
    ///       ... on MagicSchool {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicSchool on MagicSchool {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolsQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicSchoolsResult> _operationExecutor;

        public GetMagicSchoolsQuery(global::StrawberryShake.IOperationExecutor<IGetMagicSchoolsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicSchoolsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicSchoolsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicSchoolsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {

            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicSchoolsQueryDocument.Instance.Hash.Value,
                name: "GetMagicSchools",
                document: GetMagicSchoolsQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}


// GetMagicTraditionByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicTraditionById GraphQL operation
    /// <code>
    /// query GetMagicTraditionById($id: Uuid!) {
    ///   magicTraditions(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicTraditionById
    ///       ... on MagicTradition {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicTraditionById on MagicTradition {
    ///   id
    ///   name
    ///   description
    ///   spells {
    ///     __typename
    ///     ... MagicTraditionById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicTraditionById_Spell on Spell {
    ///   id
    ///   name
    ///   description
    ///   level
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicTraditionByIdQueryDocument()
        {
        }

        public static GetMagicTraditionByIdQueryDocument Instance { get; } = new GetMagicTraditionByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "02c97768977e3d0e43ace59c06f16679dbefd96e");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicTraditionByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicTraditionById GraphQL operation
    /// <code>
    /// query GetMagicTraditionById($id: Uuid!) {
    ///   magicTraditions(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicTraditionById
    ///       ... on MagicTradition {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicTraditionById on MagicTradition {
    ///   id
    ///   name
    ///   description
    ///   spells {
    ///     __typename
    ///     ... MagicTraditionById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicTraditionById_Spell on Spell {
    ///   id
    ///   name
    ///   description
    ///   level
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicTraditionByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetMagicTraditionByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetMagicTraditionByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicTraditionByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicTraditionByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicTraditionByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicTraditionByIdQueryDocument.Instance.Hash.Value,
                name: "GetMagicTraditionById",
                document: GetMagicTraditionByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetMagicTraditionsQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicTraditions GraphQL operation
    /// <code>
    /// query GetMagicTraditions {
    ///   magicTraditions(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicTradition
    ///       ... on MagicTradition {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicTradition on MagicTradition {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionsQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetMagicTraditionsQueryDocument()
        {
        }

        public static GetMagicTraditionsQueryDocument Instance { get; } = new GetMagicTraditionsQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "a7cdb464af2a214ac371c922fe0ea7e62f74f83d");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetMagicTraditionsQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetMagicTraditions GraphQL operation
    /// <code>
    /// query GetMagicTraditions {
    ///   magicTraditions(order: { name: ASC }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... MagicTradition
    ///       ... on MagicTradition {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MagicTradition on MagicTradition {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionsQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMagicTraditionsResult> _operationExecutor;

        public GetMagicTraditionsQuery(global::StrawberryShake.IOperationExecutor<IGetMagicTraditionsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMagicTraditionsResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMagicTraditionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMagicTraditionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {

            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetMagicTraditionsQueryDocument.Instance.Hash.Value,
                name: "GetMagicTraditions",
                document: GetMagicTraditionsQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }
}


// GetRaceByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetRaceById GraphQL operation
    /// <code>
    /// query GetRaceById($id: Uuid!) {
    ///   races(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       raceSize: size {
    ///         __typename
    ///         id
    ///         name
    ///         ... on RaceSize {
    ///           id
    ///         }
    ///       }
    ///       raceRarity: rarity {
    ///         __typename
    ///         id
    ///         name
    ///         ... on RaceRarity {
    ///           id
    ///         }
    ///       }
    ///       ... RaceById
    ///       ... on Race {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById on Race {
    ///   id
    ///   name
    ///   baseSpeed
    ///   baseHealth
    ///   languages {
    ///     __typename
    ///     ... RaceById_Language
    ///     ... on Language {
    ///       id
    ///     }
    ///   }
    ///   raceTraits {
    ///     __typename
    ///     ... RaceById_RaceTrait
    ///     ... on RaceTrait {
    ///       id
    ///     }
    ///   }
    ///   heritages {
    ///     __typename
    ///     ... RaceById_Heritage
    ///     ... on Heritage {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById_Language on Language {
    ///   id
    ///   name
    ///   type {
    ///     __typename
    ///     ... RaceById_Language_Type
    ///     ... on LanguageType {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById_Language_Type on LanguageType {
    ///   id
    ///   name
    /// }
    /// 
    /// fragment RaceById_RaceTrait on RaceTrait {
    ///   id
    ///   name
    /// }
    /// 
    /// fragment RaceById_Heritage on Heritage {
    ///   id
    ///   name
    ///   description
    ///   rarity {
    ///     __typename
    ///     ... RaceById_Heritage_Rarity
    ///     ... on HeritageRarity {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById_Heritage_Rarity on HeritageRarity {
    ///   id
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetRaceByIdQueryDocument()
        {
        }

        public static GetRaceByIdQueryDocument Instance { get; } = new GetRaceByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x61, 0x63, 0x65, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x61, 0x63, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x20, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x52, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x52, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "5d7a59839e4c41ed2154fd391b59540adbd7713f");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetRaceByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetRaceById GraphQL operation
    /// <code>
    /// query GetRaceById($id: Uuid!) {
    ///   races(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       raceSize: size {
    ///         __typename
    ///         id
    ///         name
    ///         ... on RaceSize {
    ///           id
    ///         }
    ///       }
    ///       raceRarity: rarity {
    ///         __typename
    ///         id
    ///         name
    ///         ... on RaceRarity {
    ///           id
    ///         }
    ///       }
    ///       ... RaceById
    ///       ... on Race {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById on Race {
    ///   id
    ///   name
    ///   baseSpeed
    ///   baseHealth
    ///   languages {
    ///     __typename
    ///     ... RaceById_Language
    ///     ... on Language {
    ///       id
    ///     }
    ///   }
    ///   raceTraits {
    ///     __typename
    ///     ... RaceById_RaceTrait
    ///     ... on RaceTrait {
    ///       id
    ///     }
    ///   }
    ///   heritages {
    ///     __typename
    ///     ... RaceById_Heritage
    ///     ... on Heritage {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById_Language on Language {
    ///   id
    ///   name
    ///   type {
    ///     __typename
    ///     ... RaceById_Language_Type
    ///     ... on LanguageType {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById_Language_Type on LanguageType {
    ///   id
    ///   name
    /// }
    /// 
    /// fragment RaceById_RaceTrait on RaceTrait {
    ///   id
    ///   name
    /// }
    /// 
    /// fragment RaceById_Heritage on Heritage {
    ///   id
    ///   name
    ///   description
    ///   rarity {
    ///     __typename
    ///     ... RaceById_Heritage_Rarity
    ///     ... on HeritageRarity {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RaceById_Heritage_Rarity on HeritageRarity {
    ///   id
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRaceByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetRaceByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetRaceByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRaceByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRaceByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRaceByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetRaceByIdQueryDocument.Instance.Hash.Value,
                name: "GetRaceById",
                document: GetRaceByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetRacesPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetRacesPage GraphQL operation
    /// <code>
    /// query GetRacesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [RaceSortInput!] = [ { name: ASC } ]) {
    ///   races(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { rarity: { name: { contains: $searchTerm } } }, { languages: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... RacesPage
    ///       size {
    ///         __typename
    ///         name
    ///         ... on RaceSize {
    ///           id
    ///         }
    ///       }
    ///       rarity {
    ///         __typename
    ///         name
    ///         ... on RaceRarity {
    ///           id
    ///         }
    ///       }
    ///       ... on Race {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RacesPage on Race {
    ///   id
    ///   name
    ///   baseSpeed
    ///   baseHealth
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetRacesPageQueryDocument()
        {
        }

        public static GetRacesPageQueryDocument Instance { get; } = new GetRacesPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x52, 0x61, 0x63, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x61, 0x63, 0x65, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x52, 0x61, 0x63, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "a646b9bd8871e38e526887db45a5f9c9069fe24b");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetRacesPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetRacesPage GraphQL operation
    /// <code>
    /// query GetRacesPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [RaceSortInput!] = [ { name: ASC } ]) {
    ///   races(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { rarity: { name: { contains: $searchTerm } } }, { languages: { some: { name: { contains: $searchTerm } } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... RacesPage
    ///       size {
    ///         __typename
    ///         name
    ///         ... on RaceSize {
    ///           id
    ///         }
    ///       }
    ///       rarity {
    ///         __typename
    ///         name
    ///         ... on RaceRarity {
    ///           id
    ///         }
    ///       }
    ///       ... on Race {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment RacesPage on Race {
    ///   id
    ///   name
    ///   baseSpeed
    ///   baseHealth
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRacesPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _raceSortInputFormatter;

        public GetRacesPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetRacesPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _raceSortInputFormatter = serializerResolver.GetInputValueFormatter("RaceSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRacesPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRacesPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRacesPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetRacesPageQueryDocument.Instance.Hash.Value,
                name: "GetRacesPage",
                document: GetRacesPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_raceSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetSpellByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetSpellById GraphQL operation
    /// <code>
    /// query GetSpellById($id: Uuid!) {
    ///   spells(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       rollableEffect {
    ///         __typename
    ///         criticalSuccess
    ///         success
    ///         failure
    ///         criticalFailure
    ///         ... on RollableEffect {
    ///           id
    ///         }
    ///       }
    ///       traditions {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on MagicTradition {
    ///           id
    ///         }
    ///       }
    ///       additionalDetails {
    ///         __typename
    ///         id
    ///         text
    ///         ... on SpellDetailBlock {
    ///           id
    ///         }
    ///       }
    ///       components {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on SpellComponent {
    ///           id
    ///         }
    ///       }
    ///       traits {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Trait {
    ///           id
    ///         }
    ///       }
    ///       heightenings(order: { level: ASC }) {
    ///         __typename
    ///         id
    ///         level
    ///         description
    ///         details {
    ///           __typename
    ///           id
    ///           text
    ///           ... on SpellHeighteningDetailBlock {
    ///             id
    ///           }
    ///         }
    ///         ... on SpellHeightening {
    ///           id
    ///         }
    ///       }
    ///       triggers {
    ///         __typename
    ///         id
    ///         text
    ///         ... on SpellTrigger {
    ///           id
    ///         }
    ///       }
    ///       requirements {
    ///         __typename
    ///         id
    ///         text
    ///         ... on SpellRequirement {
    ///           id
    ///         }
    ///       }
    ///       ... SpellById
    ///       ... on Spell {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment SpellById on Spell {
    ///   id
    ///   name
    ///   description
    ///   range
    ///   castTime
    ///   level
    ///   targets
    ///   isDismissable
    ///   area
    ///   duration
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetSpellByIdQueryDocument()
        {
        }

        public static GetSpellByIdQueryDocument Instance { get; } = new GetSpellByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x63, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "410f2e07d1fc39129d6f4832a8718322479e0481");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetSpellByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetSpellById GraphQL operation
    /// <code>
    /// query GetSpellById($id: Uuid!) {
    ///   spells(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       rollableEffect {
    ///         __typename
    ///         criticalSuccess
    ///         success
    ///         failure
    ///         criticalFailure
    ///         ... on RollableEffect {
    ///           id
    ///         }
    ///       }
    ///       traditions {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on MagicTradition {
    ///           id
    ///         }
    ///       }
    ///       additionalDetails {
    ///         __typename
    ///         id
    ///         text
    ///         ... on SpellDetailBlock {
    ///           id
    ///         }
    ///       }
    ///       components {
    ///         __typename
    ///         id
    ///         name
    ///         description
    ///         ... on SpellComponent {
    ///           id
    ///         }
    ///       }
    ///       traits {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Trait {
    ///           id
    ///         }
    ///       }
    ///       heightenings(order: { level: ASC }) {
    ///         __typename
    ///         id
    ///         level
    ///         description
    ///         details {
    ///           __typename
    ///           id
    ///           text
    ///           ... on SpellHeighteningDetailBlock {
    ///             id
    ///           }
    ///         }
    ///         ... on SpellHeightening {
    ///           id
    ///         }
    ///       }
    ///       triggers {
    ///         __typename
    ///         id
    ///         text
    ///         ... on SpellTrigger {
    ///           id
    ///         }
    ///       }
    ///       requirements {
    ///         __typename
    ///         id
    ///         text
    ///         ... on SpellRequirement {
    ///           id
    ///         }
    ///       }
    ///       ... SpellById
    ///       ... on Spell {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment SpellById on Spell {
    ///   id
    ///   name
    ///   description
    ///   range
    ///   castTime
    ///   level
    ///   targets
    ///   isDismissable
    ///   area
    ///   duration
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSpellByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetSpellByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetSpellByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSpellByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSpellByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSpellByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetSpellByIdQueryDocument.Instance.Hash.Value,
                name: "GetSpellById",
                document: GetSpellByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetSpellsPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetSpellsPage GraphQL operation
    /// <code>
    /// query GetSpellsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [SpellSortInput!] = [ { name: ASC } ]) {
    ///   spells(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { actionType: { name: { contains: $searchTerm } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       level
    ///       savingThrowStat {
    ///         __typename
    ///         name
    ///         ... on SavingThrowStat {
    ///           id
    ///         }
    ///       }
    ///       actionType {
    ///         __typename
    ///         name
    ///         ... on ActionType {
    ///           id
    ///         }
    ///       }
    ///       ... on Spell {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetSpellsPageQueryDocument()
        {
        }

        public static GetSpellsPageQueryDocument Instance { get; } = new GetSpellsPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "2843f208e56c51dee7c5492c764fc59be8bb1e4c");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetSpellsPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetSpellsPage GraphQL operation
    /// <code>
    /// query GetSpellsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [SpellSortInput!] = [ { name: ASC } ]) {
    ///   spells(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { actionType: { name: { contains: $searchTerm } } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       id
    ///       name
    ///       level
    ///       savingThrowStat {
    ///         __typename
    ///         name
    ///         ... on SavingThrowStat {
    ///           id
    ///         }
    ///       }
    ///       actionType {
    ///         __typename
    ///         name
    ///         ... on ActionType {
    ///           id
    ///         }
    ///       }
    ///       ... on Spell {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSpellsPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _spellSortInputFormatter;

        public GetSpellsPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetSpellsPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _spellSortInputFormatter = serializerResolver.GetInputValueFormatter("SpellSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSpellsPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSpellsPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSpellsPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetSpellsPageQueryDocument.Instance.Hash.Value,
                name: "GetSpellsPage",
                document: GetSpellsPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_spellSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetTraitByIdQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetTraitById GraphQL operation
    /// <code>
    /// query GetTraitById($id: Uuid!) {
    ///   traits(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... TraitById
    ///       ... on Trait {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitById on Trait {
    ///   id
    ///   name
    ///   description
    ///   feats {
    ///     __typename
    ///     ... TraitById_Feat
    ///     ... on Feat {
    ///       id
    ///     }
    ///   }
    ///   spells {
    ///     __typename
    ///     ... TraitById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitById_Feat on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    /// }
    /// 
    /// fragment TraitById_Spell on Spell {
    ///   id
    ///   name
    ///   level
    ///   magicSchool {
    ///     __typename
    ///     ... TraitById_Spell_MagicSchool
    ///     ... on MagicSchool {
    ///       id
    ///     }
    ///   }
    ///   spellType {
    ///     __typename
    ///     ... TraitById_Spell_Type
    ///     ... on SpellType {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitById_Spell_MagicSchool on MagicSchool {
    ///   id
    ///   name
    /// }
    /// 
    /// fragment TraitById_Spell_Type on SpellType {
    ///   id
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitByIdQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetTraitByIdQueryDocument()
        {
        }

        public static GetTraitByIdQueryDocument Instance { get; } = new GetTraitByIdQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x75, 0x69, 0x64, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x65, 0x61, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x46, 0x65, 0x61, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x5f, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "05489be8d8bc94a90c6dce7da814da1df7054d2f");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetTraitByIdQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetTraitById GraphQL operation
    /// <code>
    /// query GetTraitById($id: Uuid!) {
    ///   traits(where: { id: { eq: $id } }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       ... TraitById
    ///       ... on Trait {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitById on Trait {
    ///   id
    ///   name
    ///   description
    ///   feats {
    ///     __typename
    ///     ... TraitById_Feat
    ///     ... on Feat {
    ///       id
    ///     }
    ///   }
    ///   spells {
    ///     __typename
    ///     ... TraitById_Spell
    ///     ... on Spell {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitById_Feat on Feat {
    ///   id
    ///   name
    ///   level
    ///   canBeLearnedMoreThanOnce
    /// }
    /// 
    /// fragment TraitById_Spell on Spell {
    ///   id
    ///   name
    ///   level
    ///   magicSchool {
    ///     __typename
    ///     ... TraitById_Spell_MagicSchool
    ///     ... on MagicSchool {
    ///       id
    ///     }
    ///   }
    ///   spellType {
    ///     __typename
    ///     ... TraitById_Spell_Type
    ///     ... on SpellType {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitById_Spell_MagicSchool on MagicSchool {
    ///   id
    ///   name
    /// }
    /// 
    /// fragment TraitById_Spell_Type on SpellType {
    ///   id
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitByIdQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTraitByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uuidFormatter;

        public GetTraitByIdQuery(
            global::StrawberryShake.IOperationExecutor<IGetTraitByIdResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uuidFormatter = serializerResolver.GetInputValueFormatter("Uuid");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTraitByIdResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTraitByIdResult>> ExecuteAsync(
            global::System.Guid id,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTraitByIdResult>> Watch(
            global::System.Guid id,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "id",
                FormatId(id));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetTraitByIdQueryDocument.Instance.Hash.Value,
                name: "GetTraitById",
                document: GetTraitByIdQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uuidFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetTraitsPageQueryDocument.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetTraitsPage GraphQL operation
    /// <code>
    /// query GetTraitsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [TraitSortInput!] = [ { name: ASC } ]) {
    ///   traits(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { description: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... TraitsPage
    ///       ... on Trait {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitsPage on Trait {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPageQueryDocument
        : global::StrawberryShake.IDocument
    {
        private GetTraitsPageQueryDocument()
        {
        }

        public static GetTraitsPageQueryDocument Instance { get; } = new GetTraitsPageQueryDocument();

        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;

        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{ 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x54, 0x72, 0x61, 0x69, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x20, 0x3d, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x3a, 0x20, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x6b, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x3a, 0x20, 0x5b, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x5d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d };

        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("sha1Hash", "0ed74f515cc4fd7e282d3e1971ce0058eee667d0");

        public override global::System.String ToString()
        {
            #if NETSTANDARD2_0
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
            #else
            return global::System.Text.Encoding.UTF8.GetString(Body);
            #endif
        }
    }
}


// GetTraitsPageQuery.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the operation service of the GetTraitsPage GraphQL operation
    /// <code>
    /// query GetTraitsPage($skip: Int!, $take: Int!, $searchTerm: String! = "", $order: [TraitSortInput!] = [ { name: ASC } ]) {
    ///   traits(skip: $skip, take: $take, order: $order, where: { or: [ { name: { contains: $searchTerm } }, { description: { contains: $searchTerm } } ] }) {
    ///     __typename
    ///     totalCount
    ///     items {
    ///       __typename
    ///       ... TraitsPage
    ///       ... on Trait {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment TraitsPage on Trait {
    ///   id
    ///   name
    ///   description
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPageQuery
        : global::StrawberryShake.IOperationRequestFactory
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetTraitsPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _traitSortInputFormatter;

        public GetTraitsPageQuery(
            global::StrawberryShake.IOperationExecutor<IGetTraitsPageResult> operationExecutor,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor
                 ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _traitSortInputFormatter = serializerResolver.GetInputValueFormatter("TraitSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetTraitsPageResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetTraitsPageResult>> ExecuteAsync(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.TraitSortInput>? order,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);

            return await _operationExecutor
                .ExecuteAsync(
                    request,
                    cancellationToken)
                .ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetTraitsPageResult>> Watch(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.TraitSortInput>? order,
            global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(
                skip,
                take,
                searchTerm,
                order);
            return _operationExecutor.Watch(
                request,
                strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(
            global::System.Int32 skip,
            global::System.Int32 take,
            global::System.String searchTerm,
            global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.TraitSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();

            variables.Add(
                "skip",
                FormatSkip(skip));
            variables.Add(
                "take",
                FormatTake(take));
            variables.Add(
                "searchTerm",
                FormatSearchTerm(searchTerm));
            variables.Add(
                "order",
                FormatOrder(order));

            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {

            return new global::StrawberryShake.OperationRequest(
                id: GetTraitsPageQueryDocument.Instance.Hash.Value,
                name: "GetTraitsPage",
                document: GetTraitsPageQueryDocument.Instance,
                strategy: global::StrawberryShake.RequestStrategy.Default,
                variables:variables);
        }

        private global::System.Object? FormatSkip(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatTake(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatSearchTerm(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.TraitSortInput>? value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();

            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_traitSortInputFormatter.Format(value_elm));
            }
            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }
}


// GetClassByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;

        public GetClassByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetClassByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetClassByIdResult Result, GetClassByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetClassByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetClassByIdResult, GetClassByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? classesId = default!;
            _entityStore.Update(session => 
            {
                classesId = DeserializeIGetClassById_Classes(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "classes"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetClassByIdResultInfo(
                classesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? DeserializeIGetClassById_Classes(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("ClassCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData(
                    typename,
                    items: UpdateIGetClassById_Classes_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetClassById_Classes_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var classs = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                classs.Add(UpdateIGetClassById_Classes_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return classs;
        }

        private global::StrawberryShake.EntityId? UpdateIGetClassById_Classes_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Class",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            UpdateNonNullableIGetClassById_Classes_Items_PerceptionProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "perceptionProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_FortitudeProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "fortitudeProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_WillProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "willProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_ReflexProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "reflexProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_ClassDcProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "classDcProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_SimpleWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "simpleWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_MartialWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "martialWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_AdvancedWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "advancedWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_UnarmedWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "unarmedWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_LightArmorProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "lightArmorProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_MediumArmorProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "mediumArmorProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_HeavyArmorProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "heavyArmorProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_UnarmoredProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "unarmoredProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_SpellDcProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spellDcProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_SpellAttackProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spellAttackProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_PredefinedMagicTraditionEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "predefinedMagicTradition"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_KeyAbilitiesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "keyAbilities"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_MannerismsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "mannerisms"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_CharacteristicsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "characteristics"),
                                entityIds),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "duringCombatEncounters")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "duringSocialEncounters")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "whileExploring")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "inDowntime"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            UpdateNonNullableIGetClassById_Classes_Items_PerceptionProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "perceptionProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_FortitudeProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "fortitudeProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_WillProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "willProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_ReflexProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "reflexProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_ClassDcProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "classDcProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_SimpleWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "simpleWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_MartialWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "martialWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_AdvancedWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "advancedWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_UnarmedWeaponProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "unarmedWeaponProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_LightArmorProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "lightArmorProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_MediumArmorProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "mediumArmorProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_HeavyArmorProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "heavyArmorProficiency"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_UnarmoredProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "unarmoredProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_SpellDcProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spellDcProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_SpellAttackProficiencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spellAttackProficiency"),
                                entityIds),
                            UpdateIGetClassById_Classes_Items_PredefinedMagicTraditionEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "predefinedMagicTradition"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_KeyAbilitiesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "keyAbilities"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_MannerismsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "mannerisms"),
                                entityIds),
                            UpdateNonNullableIGetClassById_Classes_Items_CharacteristicsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "characteristics"),
                                entityIds),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "duringCombatEncounters")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "duringSocialEncounters")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "whileExploring")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "inDowntime"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_PerceptionProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_FortitudeProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_WillProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_ReflexProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetClassById_Classes_Items_ClassDcProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_SimpleWeaponProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_MartialWeaponProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_AdvancedWeaponProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_UnarmedWeaponProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_LightArmorProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_MediumArmorProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_HeavyArmorProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_UnarmoredProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetClassById_Classes_Items_SpellDcProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetClassById_Classes_Items_SpellAttackProficiencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Proficiency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetClassById_Classes_Items_PredefinedMagicTraditionEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Description,
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetClassById_Classes_Items_KeyAbilitiesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var stats = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                stats.Add(UpdateNonNullableIGetClassById_Classes_Items_KeyAbilitiesEntity(
                    session,
                    child,
                    entityIds));
            }

            return stats;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_KeyAbilitiesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Stat",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "abbreviation"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "abbreviation"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetClassById_Classes_Items_MannerismsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var classMannerisms = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                classMannerisms.Add(UpdateNonNullableIGetClassById_Classes_Items_MannerismsEntity(
                    session,
                    child,
                    entityIds));
            }

            return classMannerisms;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_MannerismsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "ClassMannerism",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetClassById_Classes_Items_CharacteristicsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var classCharacteristics = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                classCharacteristics.Add(UpdateNonNullableIGetClassById_Classes_Items_CharacteristicsEntity(
                    session,
                    child,
                    entityIds));
            }

            return classCharacteristics;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetClassById_Classes_Items_CharacteristicsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "ClassCharacteristic",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetClassesPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetClassesPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetClassesPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetClassesPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetClassesPageResult Result, GetClassesPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetClassesPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetClassesPageResult, GetClassesPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? classesId = default!;
            _entityStore.Update(session => 
            {
                classesId = DeserializeIGetClassesPage_Classes(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "classes"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetClassesPageResultInfo(
                classesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData? DeserializeIGetClassesPage_Classes(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("ClassCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetClassesPage_Classes_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetClassesPage_Classes_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var classs = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                classs.Add(UpdateIGetClassesPage_Classes_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return classs;
        }

        private global::StrawberryShake.EntityId? UpdateIGetClassesPage_Classes_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Class",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            entity.PerceptionProficiency,
                            entity.FortitudeProficiency,
                            entity.WillProficiency,
                            entity.ReflexProficiency,
                            entity.ClassDcProficiency,
                            entity.SimpleWeaponProficiency,
                            entity.MartialWeaponProficiency,
                            entity.AdvancedWeaponProficiency,
                            entity.UnarmedWeaponProficiency,
                            entity.LightArmorProficiency,
                            entity.MediumArmorProficiency,
                            entity.HeavyArmorProficiency,
                            entity.UnarmoredProficiency,
                            entity.SpellDcProficiency,
                            entity.SpellAttackProficiency,
                            entity.PredefinedMagicTradition,
                            entity.KeyAbilities,
                            entity.Mannerisms,
                            entity.Characteristics,
                            entity.DuringCombatEncounters,
                            entity.DuringSocialEncounters,
                            entity.WhileExploring,
                            entity.InDowntime));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetDeitiesPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeitiesPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetDeitiesPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDeitiesPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDeitiesPageResult Result, GetDeitiesPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetDeitiesPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetDeitiesPageResult, GetDeitiesPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? deitiesId = default!;
            _entityStore.Update(session => 
            {
                deitiesId = DeserializeIGetDeitiesPage_Deities(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "deities"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetDeitiesPageResultInfo(
                deitiesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? DeserializeIGetDeitiesPage_Deities(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("DeityCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetDeitiesPage_Deities_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDeitiesPage_Deities_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var deitys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deitys.Add(UpdateIGetDeitiesPage_Deities_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return deitys;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDeitiesPage_Deities_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Category,
                            entity.Alignment,
                            entity.FollowerAlignments,
                            entity.DivineFonts,
                            entity.Domains));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetDeityByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetDeityByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDeityByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDeityByIdResult Result, GetDeityByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetDeityByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetDeityByIdResult, GetDeityByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? deitiesId = default!;
            _entityStore.Update(session => 
            {
                deitiesId = DeserializeIGetDeityById_Deities(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "deities"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetDeityByIdResultInfo(
                deitiesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData? DeserializeIGetDeityById_Deities(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("DeityCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCollectionSegmentData(
                    typename,
                    items: UpdateIGetDeityById_Deities_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDeityById_Deities_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var deitys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deitys.Add(UpdateIGetDeityById_Deities_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return deitys;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDeityById_Deities_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetDeityById_Deities_Items_CategoryEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "category"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_AlignmentEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "alignment"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "followerAlignments"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_DivineFontsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "divineFonts"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_DomainsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "domains"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetDeityById_Deities_Items_CategoryEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "category"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_AlignmentEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "alignment"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "followerAlignments"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_DivineFontsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "divineFonts"),
                                entityIds),
                            UpdateNonNullableIGetDeityById_Deities_Items_DomainsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "domains"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityById_Deities_Items_CategoryEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Description,
                            entity.Deities));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityById_Deities_Items_AlignmentEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var deityFollowerAlignments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deityFollowerAlignments.Add(UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsEntity(
                    session,
                    child,
                    entityIds));
            }

            return deityFollowerAlignments;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignmentsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "DeityFollowerAlignment",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity(UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignments_AlignmentEntity(
                            session,
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "alignment"),
                            entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity(UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignments_AlignmentEntity(
                            session,
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "alignment"),
                            entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityById_Deities_Items_FollowerAlignments_AlignmentEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Alignment",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetDeityById_Deities_Items_DivineFontsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var divineFonts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                divineFonts.Add(UpdateNonNullableIGetDeityById_Deities_Items_DivineFontsEntity(
                    session,
                    child,
                    entityIds));
            }

            return divineFonts;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityById_Deities_Items_DivineFontsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "DivineFont",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Deities));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetDeityById_Deities_Items_DomainsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var domains = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                domains.Add(UpdateNonNullableIGetDeityById_Deities_Items_DomainsEntity(
                    session,
                    child,
                    entityIds));
            }

            return domains;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityById_Deities_Items_DomainsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Domain",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetDeityCategoryByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoryByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetDeityCategoryByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDeityCategoryByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDeityCategoryByIdResult Result, GetDeityCategoryByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetDeityCategoryByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetDeityCategoryByIdResult, GetDeityCategoryByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? deityCategoriesId = default!;
            _entityStore.Update(session => 
            {
                deityCategoriesId = DeserializeIGetDeityCategoryById_DeityCategories(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "deityCategories"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetDeityCategoryByIdResultInfo(
                deityCategoriesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? DeserializeIGetDeityCategoryById_DeityCategories(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("DeityCategoryCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData(
                    typename,
                    items: UpdateIGetDeityCategoryById_DeityCategories_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDeityCategoryById_DeityCategories_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var deityCategorys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deityCategorys.Add(UpdateIGetDeityCategoryById_DeityCategories_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return deityCategorys;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDeityCategoryById_DeityCategories_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "deities"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "deities"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var deitys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deitys.Add(UpdateNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesEntity(
                    session,
                    child,
                    entityIds));
            }

            return deitys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDeityCategoryById_DeityCategories_Items_DeitiesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Category,
                            entity.Alignment,
                            entity.FollowerAlignments,
                            entity.DivineFonts,
                            entity.Domains));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetDeityCategoriesPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDeityCategoriesPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetDeityCategoriesPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDeityCategoriesPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDeityCategoriesPageResult Result, GetDeityCategoriesPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetDeityCategoriesPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetDeityCategoriesPageResult, GetDeityCategoriesPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? deityCategoriesId = default!;
            _entityStore.Update(session => 
            {
                deityCategoriesId = DeserializeIGetDeityCategoriesPage_DeityCategories(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "deityCategories"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetDeityCategoriesPageResultInfo(
                deityCategoriesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData? DeserializeIGetDeityCategoriesPage_DeityCategories(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("DeityCategoryCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetDeityCategoriesPage_DeityCategories_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDeityCategoriesPage_DeityCategories_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var deityCategorys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deityCategorys.Add(UpdateIGetDeityCategoriesPage_DeityCategories_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return deityCategorys;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDeityCategoriesPage_DeityCategories_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "DeityCategory",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Deities));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetDivineFontsBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetDivineFontsBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetDivineFontsBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDivineFontsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDivineFontsResult Result, GetDivineFontsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetDivineFontsResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetDivineFontsResult, GetDivineFontsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontCollectionSegmentData? divineFontsId = default!;
            _entityStore.Update(session => 
            {
                divineFontsId = DeserializeIGetDivineFonts_DivineFonts(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "divineFonts"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetDivineFontsResultInfo(
                divineFontsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontCollectionSegmentData? DeserializeIGetDivineFonts_DivineFonts(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("DivineFontCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontCollectionSegmentData(
                    typename,
                    items: UpdateIGetDivineFonts_DivineFonts_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetDivineFonts_DivineFonts_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var divineFonts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                divineFonts.Add(UpdateIGetDivineFonts_DivineFonts_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return divineFonts;
        }

        private global::StrawberryShake.EntityId? UpdateIGetDivineFonts_DivineFonts_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "DivineFont",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "deities"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "deities"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var deitys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                deitys.Add(UpdateNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesEntity(
                    session,
                    child,
                    entityIds));
            }

            return deitys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDivineFonts_DivineFonts_Items_DeitiesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Deity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Category,
                            entity.Alignment,
                            entity.FollowerAlignments,
                            entity.DivineFonts,
                            entity.Domains));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetFeatByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;

        public GetFeatByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFeatByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFeatByIdResult Result, GetFeatByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetFeatByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetFeatByIdResult, GetFeatByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? featsId = default!;
            _entityStore.Update(session => 
            {
                featsId = DeserializeIGetFeatById_Feats(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "feats"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetFeatByIdResultInfo(
                featsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? DeserializeIGetFeatById_Feats(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("FeatCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData(
                    typename,
                    items: UpdateIGetFeatById_Feats_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetFeatById_Feats_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                feats.Add(UpdateIGetFeatById_Feats_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return feats;
        }

        private global::StrawberryShake.EntityId? UpdateIGetFeatById_Feats_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "special")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "trigger")),
                            UpdateIGetFeatById_Feats_Items_FrequencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "frequency"),
                                entityIds),
                            UpdateNonNullableIGetFeatById_Feats_Items_TraitsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "traits"),
                                entityIds),
                            UpdateIGetFeatById_Feats_Items_RollableEffectEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rollableEffect"),
                                entityIds),
                            entity.CanBeLearnedMoreThanOnce,
                            entity.Details));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "special")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "trigger")),
                            UpdateIGetFeatById_Feats_Items_FrequencyEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "frequency"),
                                entityIds),
                            UpdateNonNullableIGetFeatById_Feats_Items_TraitsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "traits"),
                                entityIds),
                            UpdateIGetFeatById_Feats_Items_RollableEffectEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rollableEffect"),
                                entityIds),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetFeatById_Feats_Items_FrequencyEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Frequency",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetFeatById_Feats_Items_TraitsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var traits = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                traits.Add(UpdateNonNullableIGetFeatById_Feats_Items_TraitsEntity(
                    session,
                    child,
                    entityIds));
            }

            return traits;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFeatById_Feats_Items_TraitsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Feats,
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetFeatById_Feats_Items_RollableEffectEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RollableEffect",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity(
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalSuccess")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "success")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "failure")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalFailure"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity(
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalSuccess")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "success")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "failure")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalFailure"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetFeatsPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetFeatsPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;

        public GetFeatsPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean")
                 ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFeatsPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFeatsPageResult Result, GetFeatsPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetFeatsPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetFeatsPageResult, GetFeatsPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? featsId = default!;
            _entityStore.Update(session => 
            {
                featsId = DeserializeIGetFeatsPage_Feats(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "feats"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetFeatsPageResultInfo(
                featsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData? DeserializeIGetFeatsPage_Feats(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("FeatCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetFeatsPage_Feats_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetFeatsPage_Feats_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var feats = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                feats.Add(UpdateIGetFeatsPage_Feats_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return feats;
        }

        private global::StrawberryShake.EntityId? UpdateIGetFeatsPage_Feats_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.Special,
                            entity.Trigger,
                            entity.Frequency,
                            entity.Traits,
                            entity.RollableEffect,
                            DeserializeNonNullableBoolean(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "canBeLearnedMoreThanOnce")),
                            UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "details"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            DeserializeNonNullableBoolean(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "canBeLearnedMoreThanOnce")),
                            UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "details"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var featDetailsBlocks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                featDetailsBlocks.Add(UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntity(
                    session,
                    child,
                    entityIds));
            }

            return featDetailsBlocks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetFeatsPage_Feats_Items_DetailsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "FeatDetailsBlock",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetLanguageByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetLanguageByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetLanguageByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetLanguageByIdResult Result, GetLanguageByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetLanguageByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetLanguageByIdResult, GetLanguageByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? languagesId = default!;
            _entityStore.Update(session => 
            {
                languagesId = DeserializeIGetLanguageById_Languages(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "languages"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetLanguageByIdResultInfo(
                languagesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? DeserializeIGetLanguageById_Languages(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("LanguageCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData(
                    typename,
                    items: UpdateIGetLanguageById_Languages_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetLanguageById_Languages_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var languages = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                languages.Add(UpdateIGetLanguageById_Languages_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return languages;
        }

        private global::StrawberryShake.EntityId? UpdateIGetLanguageById_Languages_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            UpdateNonNullableIGetLanguageById_Languages_Items_RacesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "races"),
                                entityIds),
                            entity.Type));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            UpdateNonNullableIGetLanguageById_Languages_Items_RacesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "races"),
                                entityIds),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetLanguageById_Languages_Items_RacesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var races = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                races.Add(UpdateNonNullableIGetLanguageById_Languages_Items_RacesEntity(
                    session,
                    child,
                    entityIds));
            }

            return races;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetLanguageById_Languages_Items_RacesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.RaceSize,
                            entity.RaceRarity,
                            entity.BaseSpeed,
                            entity.BaseHealth,
                            entity.Languages,
                            entity.RaceTraits,
                            entity.Heritages,
                            entity.Size,
                            entity.Rarity));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetLanguagesPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguagesPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetLanguagesPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetLanguagesPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetLanguagesPageResult Result, GetLanguagesPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetLanguagesPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetLanguagesPageResult, GetLanguagesPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? languagesId = default!;
            _entityStore.Update(session => 
            {
                languagesId = DeserializeIGetLanguagesPage_Languages(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "languages"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetLanguagesPageResultInfo(
                languagesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData? DeserializeIGetLanguagesPage_Languages(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("LanguageCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetLanguagesPage_Languages_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetLanguagesPage_Languages_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var languages = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                languages.Add(UpdateIGetLanguagesPage_Languages_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return languages;
        }

        private global::StrawberryShake.EntityId? UpdateIGetLanguagesPage_Languages_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Races,
                            entity.Type));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetLanguageTypeByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypeByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetLanguageTypeByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetLanguageTypeByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetLanguageTypeByIdResult Result, GetLanguageTypeByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetLanguageTypeByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetLanguageTypeByIdResult, GetLanguageTypeByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? languageTypesId = default!;
            _entityStore.Update(session => 
            {
                languageTypesId = DeserializeIGetLanguageTypeById_LanguageTypes(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "languageTypes"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetLanguageTypeByIdResultInfo(
                languageTypesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? DeserializeIGetLanguageTypeById_LanguageTypes(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("LanguageTypeCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData(
                    typename,
                    items: UpdateIGetLanguageTypeById_LanguageTypes_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetLanguageTypeById_LanguageTypes_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var languageTypes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                languageTypes.Add(UpdateIGetLanguageTypeById_LanguageTypes_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return languageTypes;
        }

        private global::StrawberryShake.EntityId? UpdateIGetLanguageTypeById_LanguageTypes_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            UpdateNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "languages"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            UpdateNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "languages"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var languages = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                languages.Add(UpdateNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesEntity(
                    session,
                    child,
                    entityIds));
            }

            return languages;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetLanguageTypeById_LanguageTypes_Items_LanguagesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Races,
                            entity.Type));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetLanguageTypesPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetLanguageTypesPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetLanguageTypesPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetLanguageTypesPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetLanguageTypesPageResult Result, GetLanguageTypesPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetLanguageTypesPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetLanguageTypesPageResult, GetLanguageTypesPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? languageTypesId = default!;
            _entityStore.Update(session => 
            {
                languageTypesId = DeserializeIGetLanguageTypesPage_LanguageTypes(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "languageTypes"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetLanguageTypesPageResultInfo(
                languageTypesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData? DeserializeIGetLanguageTypesPage_LanguageTypes(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("LanguageTypeCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetLanguageTypesPage_LanguageTypes_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetLanguageTypesPage_LanguageTypes_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var languageTypes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                languageTypes.Add(UpdateIGetLanguageTypesPage_LanguageTypes_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return languageTypes;
        }

        private global::StrawberryShake.EntityId? UpdateIGetLanguageTypesPage_LanguageTypes_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Languages));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetMagicComponentByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;

        public GetMagicComponentByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicComponentByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicComponentByIdResult Result, GetMagicComponentByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicComponentByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicComponentByIdResult, GetMagicComponentByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? spellComponentsId = default!;
            _entityStore.Update(session => 
            {
                spellComponentsId = DeserializeIGetMagicComponentById_SpellComponents(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "spellComponents"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicComponentByIdResultInfo(
                spellComponentsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? DeserializeIGetMagicComponentById_SpellComponents(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("SpellComponentCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicComponentById_SpellComponents_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicComponentById_SpellComponents_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var spellComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellComponents.Add(UpdateIGetMagicComponentById_SpellComponents_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellComponents;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicComponentById_SpellComponents_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spells = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spells.Add(UpdateNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spells;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetMagicComponentById_SpellComponents_Items_SpellsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.RollableEffect,
                            entity.Traditions,
                            entity.AdditionalDetails,
                            entity.Components,
                            entity.Traits,
                            entity.Heightenings,
                            entity.Triggers,
                            entity.Requirements,
                            entity.Range,
                            entity.CastTime,
                            entity.Targets,
                            entity.IsDismissable,
                            entity.Area,
                            entity.Duration,
                            entity.SavingThrowStat,
                            entity.ActionType,
                            entity.MagicSchool,
                            entity.SpellType));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }
}


// GetMagicComponentsBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicComponentsBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetMagicComponentsBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicComponentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicComponentsResult Result, GetMagicComponentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicComponentsResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicComponentsResult, GetMagicComponentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? spellComponentsId = default!;
            _entityStore.Update(session => 
            {
                spellComponentsId = DeserializeIGetMagicComponents_SpellComponents(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "spellComponents"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicComponentsResultInfo(
                spellComponentsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData? DeserializeIGetMagicComponents_SpellComponents(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("SpellComponentCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicComponents_SpellComponents_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicComponents_SpellComponents_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var spellComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellComponents.Add(UpdateIGetMagicComponents_SpellComponents_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellComponents;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicComponents_SpellComponents_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetMagicEssencesBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicEssencesBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetMagicEssencesBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicEssencesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicEssencesResult Result, GetMagicEssencesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicEssencesResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicEssencesResult, GetMagicEssencesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceCollectionSegmentData? magicEssencesId = default!;
            _entityStore.Update(session => 
            {
                magicEssencesId = DeserializeIGetMagicEssences_MagicEssences(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "magicEssences"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicEssencesResultInfo(
                magicEssencesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceCollectionSegmentData? DeserializeIGetMagicEssences_MagicEssences(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("MagicEssenceCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicEssences_MagicEssences_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicEssences_MagicEssences_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var magicEssences = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                magicEssences.Add(UpdateIGetMagicEssences_MagicEssences_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return magicEssences;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicEssences_MagicEssences_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicEssence",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetMagicSchoolByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;

        public GetMagicSchoolByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicSchoolByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicSchoolByIdResult Result, GetMagicSchoolByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicSchoolByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicSchoolByIdResult, GetMagicSchoolByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? magicSchoolsId = default!;
            _entityStore.Update(session => 
            {
                magicSchoolsId = DeserializeIGetMagicSchoolById_MagicSchools(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "magicSchools"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicSchoolByIdResultInfo(
                magicSchoolsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? DeserializeIGetMagicSchoolById_MagicSchools(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("MagicSchoolCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicSchoolById_MagicSchools_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicSchoolById_MagicSchools_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var magicSchools = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                magicSchools.Add(UpdateIGetMagicSchoolById_MagicSchools_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return magicSchools;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicSchoolById_MagicSchools_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spells = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spells.Add(UpdateNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spells;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetMagicSchoolById_MagicSchools_Items_SpellsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.RollableEffect,
                            entity.Traditions,
                            entity.AdditionalDetails,
                            entity.Components,
                            entity.Traits,
                            entity.Heightenings,
                            entity.Triggers,
                            entity.Requirements,
                            entity.Range,
                            entity.CastTime,
                            entity.Targets,
                            entity.IsDismissable,
                            entity.Area,
                            entity.Duration,
                            entity.SavingThrowStat,
                            entity.ActionType,
                            entity.MagicSchool,
                            entity.SpellType));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }
}


// GetMagicSchoolsBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicSchoolsBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetMagicSchoolsBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicSchoolsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicSchoolsResult Result, GetMagicSchoolsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicSchoolsResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicSchoolsResult, GetMagicSchoolsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? magicSchoolsId = default!;
            _entityStore.Update(session => 
            {
                magicSchoolsId = DeserializeIGetMagicSchools_MagicSchools(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "magicSchools"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicSchoolsResultInfo(
                magicSchoolsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData? DeserializeIGetMagicSchools_MagicSchools(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("MagicSchoolCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicSchools_MagicSchools_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicSchools_MagicSchools_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var magicSchools = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                magicSchools.Add(UpdateIGetMagicSchools_MagicSchools_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return magicSchools;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicSchools_MagicSchools_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetMagicTraditionByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;

        public GetMagicTraditionByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicTraditionByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicTraditionByIdResult Result, GetMagicTraditionByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicTraditionByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicTraditionByIdResult, GetMagicTraditionByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? magicTraditionsId = default!;
            _entityStore.Update(session => 
            {
                magicTraditionsId = DeserializeIGetMagicTraditionById_MagicTraditions(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "magicTraditions"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicTraditionByIdResultInfo(
                magicTraditionsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? DeserializeIGetMagicTraditionById_MagicTraditions(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("MagicTraditionCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicTraditionById_MagicTraditions_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicTraditionById_MagicTraditions_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var magicTraditions = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                magicTraditions.Add(UpdateIGetMagicTraditionById_MagicTraditions_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return magicTraditions;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicTraditionById_MagicTraditions_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spells = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spells.Add(UpdateNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spells;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetMagicTraditionById_MagicTraditions_Items_SpellsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.RollableEffect,
                            entity.Traditions,
                            entity.AdditionalDetails,
                            entity.Components,
                            entity.Traits,
                            entity.Heightenings,
                            entity.Triggers,
                            entity.Requirements,
                            entity.Range,
                            entity.CastTime,
                            entity.Targets,
                            entity.IsDismissable,
                            entity.Area,
                            entity.Duration,
                            entity.SavingThrowStat,
                            entity.ActionType,
                            entity.MagicSchool,
                            entity.SpellType));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }
}


// GetMagicTraditionsBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetMagicTraditionsBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;

        public GetMagicTraditionsBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMagicTraditionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMagicTraditionsResult Result, GetMagicTraditionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetMagicTraditionsResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetMagicTraditionsResult, GetMagicTraditionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? magicTraditionsId = default!;
            _entityStore.Update(session => 
            {
                magicTraditionsId = DeserializeIGetMagicTraditions_MagicTraditions(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "magicTraditions"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetMagicTraditionsResultInfo(
                magicTraditionsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData? DeserializeIGetMagicTraditions_MagicTraditions(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("MagicTraditionCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionCollectionSegmentData(
                    typename,
                    items: UpdateIGetMagicTraditions_MagicTraditions_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetMagicTraditions_MagicTraditions_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var magicTraditions = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                magicTraditions.Add(UpdateIGetMagicTraditions_MagicTraditions_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return magicTraditions;
        }

        private global::StrawberryShake.EntityId? UpdateIGetMagicTraditions_MagicTraditions_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// GetRaceByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRaceByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;

        public GetRaceByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRaceByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRaceByIdResult Result, GetRaceByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetRaceByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetRaceByIdResult, GetRaceByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? racesId = default!;
            _entityStore.Update(session => 
            {
                racesId = DeserializeIGetRaceById_Races(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "races"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetRaceByIdResultInfo(
                racesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? DeserializeIGetRaceById_Races(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("RaceCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData(
                    typename,
                    items: UpdateIGetRaceById_Races_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetRaceById_Races_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var races = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                races.Add(UpdateIGetRaceById_Races_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return races;
        }

        private global::StrawberryShake.EntityId? UpdateIGetRaceById_Races_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            UpdateNonNullableIGetRaceById_Races_Items_RaceSizeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "raceSize"),
                                entityIds),
                            UpdateNonNullableIGetRaceById_Races_Items_RaceRarityEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "raceRarity"),
                                entityIds),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseSpeed")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            UpdateNonNullableIGetRaceById_Races_Items_LanguagesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "languages"),
                                entityIds),
                            UpdateNonNullableIGetRaceById_Races_Items_RaceTraitsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "raceTraits"),
                                entityIds),
                            UpdateNonNullableIGetRaceById_Races_Items_HeritagesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "heritages"),
                                entityIds),
                            entity.Size,
                            entity.Rarity));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            UpdateNonNullableIGetRaceById_Races_Items_RaceSizeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "raceSize"),
                                entityIds),
                            UpdateNonNullableIGetRaceById_Races_Items_RaceRarityEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "raceRarity"),
                                entityIds),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseSpeed")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            UpdateNonNullableIGetRaceById_Races_Items_LanguagesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "languages"),
                                entityIds),
                            UpdateNonNullableIGetRaceById_Races_Items_RaceTraitsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "raceTraits"),
                                entityIds),
                            UpdateNonNullableIGetRaceById_Races_Items_HeritagesEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "heritages"),
                                entityIds),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_RaceSizeEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RaceSize",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_RaceRarityEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RaceRarity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRaceById_Races_Items_LanguagesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var languages = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                languages.Add(UpdateNonNullableIGetRaceById_Races_Items_LanguagesEntity(
                    session,
                    child,
                    entityIds));
            }

            return languages;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_LanguagesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Language",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Races,
                            UpdateNonNullableIGetRaceById_Races_Items_Languages_TypeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "type"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            UpdateNonNullableIGetRaceById_Races_Items_Languages_TypeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "type"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_Languages_TypeEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "LanguageType",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Languages));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRaceById_Races_Items_RaceTraitsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var raceTraits = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                raceTraits.Add(UpdateNonNullableIGetRaceById_Races_Items_RaceTraitsEntity(
                    session,
                    child,
                    entityIds));
            }

            return raceTraits;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_RaceTraitsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RaceTrait",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetRaceById_Races_Items_HeritagesEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var heritages = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                heritages.Add(UpdateNonNullableIGetRaceById_Races_Items_HeritagesEntity(
                    session,
                    child,
                    entityIds));
            }

            return heritages;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_HeritagesEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Heritage",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetRaceById_Races_Items_Heritages_RarityEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rarity"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetRaceById_Races_Items_Heritages_RarityEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rarity"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRaceById_Races_Items_Heritages_RarityEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "HeritageRarity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetRacesPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetRacesPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetRacesPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRacesPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRacesPageResult Result, GetRacesPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetRacesPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetRacesPageResult, GetRacesPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? racesId = default!;
            _entityStore.Update(session => 
            {
                racesId = DeserializeIGetRacesPage_Races(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "races"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetRacesPageResultInfo(
                racesId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData? DeserializeIGetRacesPage_Races(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("RaceCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetRacesPage_Races_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetRacesPage_Races_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var races = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                races.Add(UpdateIGetRacesPage_Races_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return races;
        }

        private global::StrawberryShake.EntityId? UpdateIGetRacesPage_Races_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Race",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.RaceSize,
                            entity.RaceRarity,
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseSpeed")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            entity.Languages,
                            entity.RaceTraits,
                            entity.Heritages,
                            UpdateNonNullableIGetRacesPage_Races_Items_SizeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "size"),
                                entityIds),
                            UpdateNonNullableIGetRacesPage_Races_Items_RarityEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rarity"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!,
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseSpeed")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "baseHealth")),
                            default!,
                            default!,
                            default!,
                            UpdateNonNullableIGetRacesPage_Races_Items_SizeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "size"),
                                entityIds),
                            UpdateNonNullableIGetRacesPage_Races_Items_RarityEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rarity"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRacesPage_Races_Items_SizeEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RaceSize",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity(
                            entity.Id,
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity(
                            default!,
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetRacesPage_Races_Items_RarityEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RaceRarity",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity(
                            entity.Id,
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity(
                            default!,
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetSpellByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.TimeSpan> _timeSpanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;

        public GetSpellByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _timeSpanParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.TimeSpan>("TimeSpan")
                 ?? throw new global::System.ArgumentException("No serializer for type `TimeSpan` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean")
                 ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSpellByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSpellByIdResult Result, GetSpellByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetSpellByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetSpellByIdResult, GetSpellByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? spellsId = default!;
            _entityStore.Update(session => 
            {
                spellsId = DeserializeIGetSpellById_Spells(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "spells"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetSpellByIdResultInfo(
                spellsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? DeserializeIGetSpellById_Spells(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("SpellCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData(
                    typename,
                    items: UpdateIGetSpellById_Spells_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetSpellById_Spells_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var spells = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spells.Add(UpdateIGetSpellById_Spells_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spells;
        }

        private global::StrawberryShake.EntityId? UpdateIGetSpellById_Spells_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            UpdateIGetSpellById_Spells_Items_RollableEffectEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rollableEffect"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_TraditionsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "traditions"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_AdditionalDetailsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "additionalDetails"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_ComponentsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "components"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_TraitsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "traits"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_HeighteningsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "heightenings"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_TriggersEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "triggers"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_RequirementsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "requirements"),
                                entityIds),
                            DeserializeInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "range")),
                            DeserializeTimeSpan(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "castTime")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "targets")),
                            DeserializeNonNullableBoolean(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "isDismissable")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "area")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "duration")),
                            entity.SavingThrowStat,
                            entity.ActionType,
                            entity.MagicSchool,
                            entity.SpellType));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            UpdateIGetSpellById_Spells_Items_RollableEffectEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "rollableEffect"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_TraditionsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "traditions"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_AdditionalDetailsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "additionalDetails"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_ComponentsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "components"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_TraitsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "traits"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_HeighteningsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "heightenings"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_TriggersEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "triggers"),
                                entityIds),
                            UpdateNonNullableIGetSpellById_Spells_Items_RequirementsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "requirements"),
                                entityIds),
                            DeserializeInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "range")),
                            DeserializeTimeSpan(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "castTime")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "targets")),
                            DeserializeNonNullableBoolean(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "isDismissable")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "area")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "duration")),
                            default!,
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetSpellById_Spells_Items_RollableEffectEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "RollableEffect",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity(
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalSuccess")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "success")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "failure")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalFailure"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity(
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalSuccess")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "success")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "failure")),
                            DeserializeString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "criticalFailure"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_TraditionsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var magicTraditions = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                magicTraditions.Add(UpdateNonNullableIGetSpellById_Spells_Items_TraditionsEntity(
                    session,
                    child,
                    entityIds));
            }

            return magicTraditions;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_TraditionsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicTradition",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_AdditionalDetailsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spellDetailBlocks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellDetailBlocks.Add(UpdateNonNullableIGetSpellById_Spells_Items_AdditionalDetailsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellDetailBlocks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_AdditionalDetailsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_ComponentsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spellComponents = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellComponents.Add(UpdateNonNullableIGetSpellById_Spells_Items_ComponentsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellComponents;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_ComponentsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellComponent",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_TraitsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var traits = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                traits.Add(UpdateNonNullableIGetSpellById_Spells_Items_TraitsEntity(
                    session,
                    child,
                    entityIds));
            }

            return traits;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_TraitsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Description,
                            entity.Feats,
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_HeighteningsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spellHeightenings = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellHeightenings.Add(UpdateNonNullableIGetSpellById_Spells_Items_HeighteningsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellHeightenings;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_HeighteningsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellHeightening",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "details"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "details"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spellHeighteningDetailBlocks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellHeighteningDetailBlocks.Add(UpdateNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellHeighteningDetailBlocks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_Heightenings_DetailsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellHeighteningDetailBlock",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_TriggersEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spellTriggers = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellTriggers.Add(UpdateNonNullableIGetSpellById_Spells_Items_TriggersEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellTriggers;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_TriggersEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellTrigger",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetSpellById_Spells_Items_RequirementsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spellRequirements = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spellRequirements.Add(UpdateNonNullableIGetSpellById_Spells_Items_RequirementsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spellRequirements;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetSpellById_Spells_Items_RequirementsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellRequirement",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "text"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.TimeSpan? DeserializeTimeSpan(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _timeSpanParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }
}


// GetSpellsPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetSpellsPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetSpellsPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSpellsPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSpellsPageResult Result, GetSpellsPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetSpellsPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetSpellsPageResult, GetSpellsPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? spellsId = default!;
            _entityStore.Update(session => 
            {
                spellsId = DeserializeIGetSpellsPage_Spells(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "spells"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetSpellsPageResultInfo(
                spellsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData? DeserializeIGetSpellsPage_Spells(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("SpellCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetSpellsPage_Spells_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetSpellsPage_Spells_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var spells = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spells.Add(UpdateIGetSpellsPage_Spells_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spells;
        }

        private global::StrawberryShake.EntityId? UpdateIGetSpellsPage_Spells_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Description,
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.RollableEffect,
                            entity.Traditions,
                            entity.AdditionalDetails,
                            entity.Components,
                            entity.Traits,
                            entity.Heightenings,
                            entity.Triggers,
                            entity.Requirements,
                            entity.Range,
                            entity.CastTime,
                            entity.Targets,
                            entity.IsDismissable,
                            entity.Area,
                            entity.Duration,
                            UpdateIGetSpellsPage_Spells_Items_SavingThrowStatEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "savingThrowStat"),
                                entityIds),
                            UpdateIGetSpellsPage_Spells_Items_ActionTypeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "actionType"),
                                entityIds),
                            entity.MagicSchool,
                            entity.SpellType));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            UpdateIGetSpellsPage_Spells_Items_SavingThrowStatEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "savingThrowStat"),
                                entityIds),
                            UpdateIGetSpellsPage_Spells_Items_ActionTypeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "actionType"),
                                entityIds),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetSpellsPage_Spells_Items_SavingThrowStatEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SavingThrowStat",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetSpellsPage_Spells_Items_ActionTypeEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "ActionType",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity(DeserializeNonNullableString(
                            global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                obj,
                                "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetTraitByIdBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitByIdBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;

        public GetTraitByIdBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean")
                 ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetTraitByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetTraitByIdResult Result, GetTraitByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetTraitByIdResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetTraitByIdResult, GetTraitByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? traitsId = default!;
            _entityStore.Update(session => 
            {
                traitsId = DeserializeIGetTraitById_Traits(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "traits"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetTraitByIdResultInfo(
                traitsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? DeserializeIGetTraitById_Traits(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("TraitCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData(
                    typename,
                    items: UpdateIGetTraitById_Traits_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetTraitById_Traits_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var traits = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                traits.Add(UpdateIGetTraitById_Traits_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return traits;
        }

        private global::StrawberryShake.EntityId? UpdateIGetTraitById_Traits_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetTraitById_Traits_Items_FeatsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "feats"),
                                entityIds),
                            UpdateNonNullableIGetTraitById_Traits_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            UpdateNonNullableIGetTraitById_Traits_Items_FeatsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "feats"),
                                entityIds),
                            UpdateNonNullableIGetTraitById_Traits_Items_SpellsEntityNonNullableArray(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spells"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetTraitById_Traits_Items_FeatsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var feats = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                feats.Add(UpdateNonNullableIGetTraitById_Traits_Items_FeatsEntity(
                    session,
                    child,
                    entityIds));
            }

            return feats;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetTraitById_Traits_Items_FeatsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Feat",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.Special,
                            entity.Trigger,
                            entity.Frequency,
                            entity.Traits,
                            entity.RollableEffect,
                            DeserializeNonNullableBoolean(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "canBeLearnedMoreThanOnce")),
                            entity.Details));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            DeserializeNonNullableBoolean(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "canBeLearnedMoreThanOnce")),
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetTraitById_Traits_Items_SpellsEntityNonNullableArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var spells = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                spells.Add(UpdateNonNullableIGetTraitById_Traits_Items_SpellsEntity(
                    session,
                    child,
                    entityIds));
            }

            return spells;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetTraitById_Traits_Items_SpellsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Spell",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Description,
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            entity.RollableEffect,
                            entity.Traditions,
                            entity.AdditionalDetails,
                            entity.Components,
                            entity.Traits,
                            entity.Heightenings,
                            entity.Triggers,
                            entity.Requirements,
                            entity.Range,
                            entity.CastTime,
                            entity.Targets,
                            entity.IsDismissable,
                            entity.Area,
                            entity.Duration,
                            entity.SavingThrowStat,
                            entity.ActionType,
                            UpdateNonNullableIGetTraitById_Traits_Items_Spells_MagicSchoolEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "magicSchool"),
                                entityIds),
                            UpdateNonNullableIGetTraitById_Traits_Items_Spells_SpellTypeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spellType"),
                                entityIds)));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            DeserializeNonNullableInt32(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "level")),
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            default!,
                            UpdateNonNullableIGetTraitById_Traits_Items_Spells_MagicSchoolEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "magicSchool"),
                                entityIds),
                            UpdateNonNullableIGetTraitById_Traits_Items_Spells_SpellTypeEntity(
                                session,
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "spellType"),
                                entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetTraitById_Traits_Items_Spells_MagicSchoolEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "MagicSchool",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            entity.Description,
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetTraitById_Traits_Items_Spells_SpellTypeEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "SpellType",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }
}


// GetTraitsPageBuilder.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class GetTraitsPageBuilder
        : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Guid, global::System.Guid> _uuidParser;

        public GetTraitsPageBuilder(
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer idSerializer,
            global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult> resultDataFactory,
            global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore
                 ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer
                 ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory
                 ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumType>("SortEnumType")
                 ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int")
                 ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String")
                 ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.Guid, global::System.Guid>("Uuid")
                 ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetTraitsPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetTraitsPageResult Result, GetTraitsPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;

            try
            {
                if (response.Body != null)
                {
                    if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                    {
                        data = BuildData(dataElement);
                    }
                    if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                    {
                        errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                    }
                }
            }
            catch(global::System.Exception ex)
            {
                errors = new global::StrawberryShake.IClientError[] {
                    new global::StrawberryShake.ClientError(
                        ex.Message,
                        exception: ex)
                };
            }

            return new global::StrawberryShake.OperationResult<IGetTraitsPageResult>(
                data?.Result,
                data?.Info,
                _resultDataFactory,
                errors);
        }

        private (IGetTraitsPageResult, GetTraitsPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default!;

            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? traitsId = default!;
            _entityStore.Update(session => 
            {
                traitsId = DeserializeIGetTraitsPage_Traits(
                    session,
                    global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                        obj,
                        "traits"),
                    entityIds);

                snapshot = session.CurrentSnapshot;
            });

            var resultInfo = new GetTraitsPageResultInfo(
                traitsId,
                entityIds,
                snapshot.Version);

            return (
                _resultDataFactory.Create(resultInfo),
                resultInfo
            );
        }

        private global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData? DeserializeIGetTraitsPage_Traits(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value
                .GetProperty("__typename")
                .GetString();

            if (typename?.Equals("TraitCollectionSegment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitCollectionSegmentData(
                    typename,
                    totalCount: DeserializeNonNullableInt32(
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "totalCount")),
                    items: UpdateIGetTraitsPage_Traits_ItemsEntityArray(
                        session,
                        global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                            obj,
                            "items"),
                        entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetTraitsPage_Traits_ItemsEntityArray(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var traits = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();

            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                traits.Add(UpdateIGetTraitsPage_Traits_ItemsEntity(
                    session,
                    child,
                    entityIds));
            }

            return traits;
        }

        private global::StrawberryShake.EntityId? UpdateIGetTraitsPage_Traits_ItemsEntity(
            global::StrawberryShake.IEntityStoreUpdateSession session,
            global::System.Text.Json.JsonElement? obj,
            global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);


            if (entityId.Name.Equals(
                    "Trait",
                    global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(
                        entityId,
                        out global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity? entity))
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            entity.Feats,
                            entity.Spells));
                }
                else
                {
                    session.SetEntity(
                        entityId,
                        new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity(
                            DeserializeNonNullableGuid(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "id")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "name")),
                            DeserializeNonNullableString(
                                global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(
                                    obj,
                                    "description")),
                            default!,
                            default!));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetGuid()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }
}


// ClassCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class ClassCollectionSegmentData
    {
        public ClassCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// DeityCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityCollectionSegmentData
    {
        public DeityCollectionSegmentData(
            global::System.String typename,
            global::System.Int32? totalCount = null,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            TotalCount = totalCount;
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }
    }
}


// DeityCategoryCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DeityCategoryCollectionSegmentData
    {
        public DeityCategoryCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// DivineFontCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class DivineFontCollectionSegmentData
    {
        public DivineFontCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }
    }
}


// FeatCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class FeatCollectionSegmentData
    {
        public FeatCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// LanguageCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageCollectionSegmentData
    {
        public LanguageCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// LanguageTypeCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class LanguageTypeCollectionSegmentData
    {
        public LanguageTypeCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// SpellComponentCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellComponentCollectionSegmentData
    {
        public SpellComponentCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }
    }
}


// MagicEssenceCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicEssenceCollectionSegmentData
    {
        public MagicEssenceCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }
    }
}


// MagicSchoolCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicSchoolCollectionSegmentData
    {
        public MagicSchoolCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }
    }
}


// MagicTraditionCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class MagicTraditionCollectionSegmentData
    {
        public MagicTraditionCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }
    }
}


// RaceCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class RaceCollectionSegmentData
    {
        public RaceCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// SpellCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class SpellCollectionSegmentData
    {
        public SpellCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// TraitCollectionSegmentData.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class TraitCollectionSegmentData
    {
        public TraitCollectionSegmentData(
            global::System.String typename,
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? items = null,
            global::System.Int32? totalCount = null)
        {
            __typename = typename
                 ?? throw new global::System.ArgumentNullException(nameof(typename));
            Items = items;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Items { get; }

        public global::System.Int32? TotalCount { get; }
    }
}


// PathfinderOfficialApi.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated
{
    /// <summary>
    /// Represents the PathfinderOfficialApi GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class PathfinderOfficialApi
    {
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdQuery _getClassById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageQuery _getClassesPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageQuery _getDeitiesPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdQuery _getDeityById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdQuery _getDeityCategoryById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageQuery _getDeityCategoriesPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsQuery _getDivineFonts;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdQuery _getFeatById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageQuery _getFeatsPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdQuery _getLanguageById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageQuery _getLanguagesPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdQuery _getLanguageTypeById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageQuery _getLanguageTypesPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdQuery _getMagicComponentById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsQuery _getMagicComponents;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesQuery _getMagicEssences;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdQuery _getMagicSchoolById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsQuery _getMagicSchools;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdQuery _getMagicTraditionById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsQuery _getMagicTraditions;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdQuery _getRaceById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageQuery _getRacesPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdQuery _getSpellById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageQuery _getSpellsPage;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdQuery _getTraitById;
        private readonly global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageQuery _getTraitsPage;

        public PathfinderOfficialApi(
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdQuery getClassById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageQuery getClassesPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageQuery getDeitiesPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdQuery getDeityById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdQuery getDeityCategoryById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageQuery getDeityCategoriesPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsQuery getDivineFonts,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdQuery getFeatById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageQuery getFeatsPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdQuery getLanguageById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageQuery getLanguagesPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdQuery getLanguageTypeById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageQuery getLanguageTypesPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdQuery getMagicComponentById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsQuery getMagicComponents,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesQuery getMagicEssences,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdQuery getMagicSchoolById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsQuery getMagicSchools,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdQuery getMagicTraditionById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsQuery getMagicTraditions,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdQuery getRaceById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageQuery getRacesPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdQuery getSpellById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageQuery getSpellsPage,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdQuery getTraitById,
            global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageQuery getTraitsPage)
        {
            _getClassById = getClassById
                 ?? throw new global::System.ArgumentNullException(nameof(getClassById));
            _getClassesPage = getClassesPage
                 ?? throw new global::System.ArgumentNullException(nameof(getClassesPage));
            _getDeitiesPage = getDeitiesPage
                 ?? throw new global::System.ArgumentNullException(nameof(getDeitiesPage));
            _getDeityById = getDeityById
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityById));
            _getDeityCategoryById = getDeityCategoryById
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityCategoryById));
            _getDeityCategoriesPage = getDeityCategoriesPage
                 ?? throw new global::System.ArgumentNullException(nameof(getDeityCategoriesPage));
            _getDivineFonts = getDivineFonts
                 ?? throw new global::System.ArgumentNullException(nameof(getDivineFonts));
            _getFeatById = getFeatById
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatById));
            _getFeatsPage = getFeatsPage
                 ?? throw new global::System.ArgumentNullException(nameof(getFeatsPage));
            _getLanguageById = getLanguageById
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageById));
            _getLanguagesPage = getLanguagesPage
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguagesPage));
            _getLanguageTypeById = getLanguageTypeById
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageTypeById));
            _getLanguageTypesPage = getLanguageTypesPage
                 ?? throw new global::System.ArgumentNullException(nameof(getLanguageTypesPage));
            _getMagicComponentById = getMagicComponentById
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicComponentById));
            _getMagicComponents = getMagicComponents
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicComponents));
            _getMagicEssences = getMagicEssences
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicEssences));
            _getMagicSchoolById = getMagicSchoolById
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicSchoolById));
            _getMagicSchools = getMagicSchools
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicSchools));
            _getMagicTraditionById = getMagicTraditionById
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicTraditionById));
            _getMagicTraditions = getMagicTraditions
                 ?? throw new global::System.ArgumentNullException(nameof(getMagicTraditions));
            _getRaceById = getRaceById
                 ?? throw new global::System.ArgumentNullException(nameof(getRaceById));
            _getRacesPage = getRacesPage
                 ?? throw new global::System.ArgumentNullException(nameof(getRacesPage));
            _getSpellById = getSpellById
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellById));
            _getSpellsPage = getSpellsPage
                 ?? throw new global::System.ArgumentNullException(nameof(getSpellsPage));
            _getTraitById = getTraitById
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitById));
            _getTraitsPage = getTraitsPage
                 ?? throw new global::System.ArgumentNullException(nameof(getTraitsPage));
        }

        public static global::System.String ClientName => "PathfinderOfficialApi";

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdQuery GetClassById => _getClassById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageQuery GetClassesPage => _getClassesPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageQuery GetDeitiesPage => _getDeitiesPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdQuery GetDeityById => _getDeityById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdQuery GetDeityCategoryById => _getDeityCategoryById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageQuery GetDeityCategoriesPage => _getDeityCategoriesPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsQuery GetDivineFonts => _getDivineFonts;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdQuery GetFeatById => _getFeatById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageQuery GetFeatsPage => _getFeatsPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdQuery GetLanguageById => _getLanguageById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageQuery GetLanguagesPage => _getLanguagesPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdQuery GetLanguageTypeById => _getLanguageTypeById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageQuery GetLanguageTypesPage => _getLanguageTypesPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdQuery GetMagicComponentById => _getMagicComponentById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsQuery GetMagicComponents => _getMagicComponents;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesQuery GetMagicEssences => _getMagicEssences;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdQuery GetMagicSchoolById => _getMagicSchoolById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsQuery GetMagicSchools => _getMagicSchools;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdQuery GetMagicTraditionById => _getMagicTraditionById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsQuery GetMagicTraditions => _getMagicTraditions;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdQuery GetRaceById => _getRaceById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageQuery GetRacesPage => _getRacesPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdQuery GetSpellById => _getSpellById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageQuery GetSpellsPage => _getSpellsPage;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdQuery GetTraitById => _getTraitById;

        public global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageQuery GetTraitsPage => _getTraitsPage;
    }
}


// PathfinderOfficialApiEntityIdFactory.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class PathfinderOfficialApiEntityIdFactory
        : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions(){ Indented = false };

        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String typeName = obj
                .GetProperty("__typename")
                .GetString()!;

            return typeName switch
            {
                "Class" => ParseClassEntityId(
                    obj,
                    typeName),
                "Proficiency" => ParseProficiencyEntityId(
                    obj,
                    typeName),
                "MagicTradition" => ParseMagicTraditionEntityId(
                    obj,
                    typeName),
                "Stat" => ParseStatEntityId(
                    obj,
                    typeName),
                "ClassMannerism" => ParseClassMannerismEntityId(
                    obj,
                    typeName),
                "ClassCharacteristic" => ParseClassCharacteristicEntityId(
                    obj,
                    typeName),
                "Deity" => ParseDeityEntityId(
                    obj,
                    typeName),
                "DeityCategory" => ParseDeityCategoryEntityId(
                    obj,
                    typeName),
                "Alignment" => ParseAlignmentEntityId(
                    obj,
                    typeName),
                "DeityFollowerAlignment" => ParseDeityFollowerAlignmentEntityId(
                    obj,
                    typeName),
                "DivineFont" => ParseDivineFontEntityId(
                    obj,
                    typeName),
                "Domain" => ParseDomainEntityId(
                    obj,
                    typeName),
                "Feat" => ParseFeatEntityId(
                    obj,
                    typeName),
                "Frequency" => ParseFrequencyEntityId(
                    obj,
                    typeName),
                "Trait" => ParseTraitEntityId(
                    obj,
                    typeName),
                "RollableEffect" => ParseRollableEffectEntityId(
                    obj,
                    typeName),
                "FeatDetailsBlock" => ParseFeatDetailsBlockEntityId(
                    obj,
                    typeName),
                "Language" => ParseLanguageEntityId(
                    obj,
                    typeName),
                "Race" => ParseRaceEntityId(
                    obj,
                    typeName),
                "LanguageType" => ParseLanguageTypeEntityId(
                    obj,
                    typeName),
                "SpellComponent" => ParseSpellComponentEntityId(
                    obj,
                    typeName),
                "Spell" => ParseSpellEntityId(
                    obj,
                    typeName),
                "MagicEssence" => ParseMagicEssenceEntityId(
                    obj,
                    typeName),
                "MagicSchool" => ParseMagicSchoolEntityId(
                    obj,
                    typeName),
                "RaceSize" => ParseRaceSizeEntityId(
                    obj,
                    typeName),
                "RaceRarity" => ParseRaceRarityEntityId(
                    obj,
                    typeName),
                "RaceTrait" => ParseRaceTraitEntityId(
                    obj,
                    typeName),
                "Heritage" => ParseHeritageEntityId(
                    obj,
                    typeName),
                "HeritageRarity" => ParseHeritageRarityEntityId(
                    obj,
                    typeName),
                "SpellDetailBlock" => ParseSpellDetailBlockEntityId(
                    obj,
                    typeName),
                "SpellHeightening" => ParseSpellHeighteningEntityId(
                    obj,
                    typeName),
                "SpellTrigger" => ParseSpellTriggerEntityId(
                    obj,
                    typeName),
                "SpellRequirement" => ParseSpellRequirementEntityId(
                    obj,
                    typeName),
                "SpellHeighteningDetailBlock" => ParseSpellHeighteningDetailBlockEntityId(
                    obj,
                    typeName),
                "SavingThrowStat" => ParseSavingThrowStatEntityId(
                    obj,
                    typeName),
                "ActionType" => ParseActionTypeEntityId(
                    obj,
                    typeName),
                "SpellType" => ParseSpellTypeEntityId(
                    obj,
                    typeName),
                _ => throw new global::System.NotSupportedException()
            };
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Class" => FormatClassEntityId(entityId),
                "Proficiency" => FormatProficiencyEntityId(entityId),
                "MagicTradition" => FormatMagicTraditionEntityId(entityId),
                "Stat" => FormatStatEntityId(entityId),
                "ClassMannerism" => FormatClassMannerismEntityId(entityId),
                "ClassCharacteristic" => FormatClassCharacteristicEntityId(entityId),
                "Deity" => FormatDeityEntityId(entityId),
                "DeityCategory" => FormatDeityCategoryEntityId(entityId),
                "Alignment" => FormatAlignmentEntityId(entityId),
                "DeityFollowerAlignment" => FormatDeityFollowerAlignmentEntityId(entityId),
                "DivineFont" => FormatDivineFontEntityId(entityId),
                "Domain" => FormatDomainEntityId(entityId),
                "Feat" => FormatFeatEntityId(entityId),
                "Frequency" => FormatFrequencyEntityId(entityId),
                "Trait" => FormatTraitEntityId(entityId),
                "RollableEffect" => FormatRollableEffectEntityId(entityId),
                "FeatDetailsBlock" => FormatFeatDetailsBlockEntityId(entityId),
                "Language" => FormatLanguageEntityId(entityId),
                "Race" => FormatRaceEntityId(entityId),
                "LanguageType" => FormatLanguageTypeEntityId(entityId),
                "SpellComponent" => FormatSpellComponentEntityId(entityId),
                "Spell" => FormatSpellEntityId(entityId),
                "MagicEssence" => FormatMagicEssenceEntityId(entityId),
                "MagicSchool" => FormatMagicSchoolEntityId(entityId),
                "RaceSize" => FormatRaceSizeEntityId(entityId),
                "RaceRarity" => FormatRaceRarityEntityId(entityId),
                "RaceTrait" => FormatRaceTraitEntityId(entityId),
                "Heritage" => FormatHeritageEntityId(entityId),
                "HeritageRarity" => FormatHeritageRarityEntityId(entityId),
                "SpellDetailBlock" => FormatSpellDetailBlockEntityId(entityId),
                "SpellHeightening" => FormatSpellHeighteningEntityId(entityId),
                "SpellTrigger" => FormatSpellTriggerEntityId(entityId),
                "SpellRequirement" => FormatSpellRequirementEntityId(entityId),
                "SpellHeighteningDetailBlock" => FormatSpellHeighteningDetailBlockEntityId(entityId),
                "SavingThrowStat" => FormatSavingThrowStatEntityId(entityId),
                "ActionType" => FormatActionTypeEntityId(entityId),
                "SpellType" => FormatSpellTypeEntityId(entityId),
                _ => throw new global::System.NotSupportedException()
            };
        }

        private global::StrawberryShake.EntityId ParseClassEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatClassEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProficiencyEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatProficiencyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMagicTraditionEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatMagicTraditionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseStatEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatStatEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseClassMannerismEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatClassMannerismEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseClassCharacteristicEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatClassCharacteristicEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeityEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatDeityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeityCategoryEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatDeityCategoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAlignmentEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatAlignmentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeityFollowerAlignmentEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatDeityFollowerAlignmentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDivineFontEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatDivineFontEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDomainEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatDomainEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFeatEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatFeatEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFrequencyEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatFrequencyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTraitEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatTraitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRollableEffectEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatRollableEffectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseFeatDetailsBlockEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatFeatDetailsBlockEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLanguageEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatLanguageEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRaceEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatRaceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLanguageTypeEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatLanguageTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellComponentEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellComponentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMagicEssenceEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatMagicEssenceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMagicSchoolEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatMagicSchoolEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRaceSizeEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatRaceSizeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRaceRarityEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatRaceRarityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRaceTraitEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatRaceTraitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseHeritageEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatHeritageEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseHeritageRarityEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatHeritageRarityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellDetailBlockEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellDetailBlockEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellHeighteningEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellHeighteningEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellTriggerEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellTriggerEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellRequirementEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellRequirementEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellHeighteningDetailBlockEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellHeighteningDetailBlockEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSavingThrowStatEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSavingThrowStatEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseActionTypeEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatActionTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSpellTypeEntityId(
            global::System.Text.Json.JsonElement obj,
            global::System.String type)
        {
            return new global::StrawberryShake.EntityId(
                type,
                obj
                    .GetProperty("id")
                    .GetGuid()!);
        }

        private global::System.String FormatSpellTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(
                writer,
                _options);
            jsonWriter.WriteStartObject();

            jsonWriter.WriteString(
                "__typename",
                entityId.Name);

            jsonWriter.WriteString(
                "id",
                (global::System.Guid)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();

            return global::System.Text.Encoding.UTF8.GetString(
                writer.GetInternalBuffer(),
                0,
                writer.Length);
        }
    }
}


// PathfinderOfficialApiServiceCollectionExtensions.cs
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public static partial class PathfinderOfficialApiServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.PathfinderOfficialApiStoreAccessor> AddPathfinderOfficialApi(
            this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services,
            global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => 
                {
                    var serviceCollection = ConfigureClientDefault(
                        sp,
                        strategy);

                    return new ClientServiceProvider(
                        global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
                });

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => new global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.PathfinderOfficialApiStoreAccessor(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageQuery>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.PathfinderOfficialApi>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));

            return new global::StrawberryShake.ClientBuilder<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.PathfinderOfficialApiStoreAccessor>(
                "PathfinderOfficialApi",
                services);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(
            global::System.IServiceProvider parentServices,
            global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var services = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(
                services,
                sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(
                services,
                sp => 
                {
                    var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                    return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("PathfinderOfficialApi"));
                });

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_Class>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_ClassFromClassEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_PerceptionProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_PerceptionProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_FortitudeProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_FortitudeProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_WillProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_WillProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_ReflexProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_ReflexProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_ClassDcProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_ClassDcProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_SimpleWeaponProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_SimpleWeaponProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_MartialWeaponProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_MartialWeaponProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_AdvancedWeaponProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_AdvancedWeaponProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_UnarmedWeaponProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_UnarmedWeaponProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_LightArmorProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_LightArmorProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_MediumArmorProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_MediumArmorProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_HeavyArmorProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_HeavyArmorProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_UnarmoredProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_UnarmoredProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_SpellDcProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_SpellDcProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ProficiencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_SpellAttackProficiency_Proficiency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_SpellAttackProficiency_ProficiencyFromProficiencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_PredefinedMagicTradition_MagicTradition>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_PredefinedMagicTradition_MagicTraditionFromMagicTraditionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.StatEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_KeyAbilities_Stat>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_KeyAbilities_StatFromStatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassMannerismEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_Mannerisms_ClassMannerism>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_Mannerisms_ClassMannerismFromClassMannerismEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassCharacteristicEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassById_Classes_Items_Characteristics_ClassCharacteristic>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassById_Classes_Items_Characteristics_ClassCharacteristicFromClassCharacteristicEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ClassEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPage_Classes_Items_Class>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassesPage_Classes_Items_ClassFromClassEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPage_Deities_Items_Deity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeitiesPage_Deities_Items_DeityFromDeityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_Deity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_DeityFromDeityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_Category_DeityCategory>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_Category_DeityCategoryFromDeityCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_Alignment_Alignment>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_Alignment_AlignmentFromAlignmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityFollowerAlignmentEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignment>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_FollowerAlignments_DeityFollowerAlignmentFromDeityFollowerAlignmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_DivineFonts_DivineFont>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_DivineFonts_DivineFontFromDivineFontEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DomainEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_Domains_Domain>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_Domains_DomainFromDomainEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.AlignmentEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityById_Deities_Items_FollowerAlignments_Alignment_Alignment>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityById_Deities_Items_FollowerAlignments_Alignment_AlignmentFromAlignmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryById_DeityCategories_Items_DeityCategory>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoryById_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryById_DeityCategories_Items_Deities_Deity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoryById_DeityCategories_Items_Deities_DeityFromDeityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityCategoryEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPage_DeityCategories_Items_DeityCategory>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoriesPage_DeityCategories_Items_DeityCategoryFromDeityCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DivineFontEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFonts_DivineFonts_Items_DivineFont>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDivineFonts_DivineFonts_Items_DivineFontFromDivineFontEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.DeityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFonts_DivineFonts_Items_Deities_Deity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDivineFonts_DivineFonts_Items_Deities_DeityFromDeityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatById_Feats_Items_Feat>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatById_Feats_Items_FeatFromFeatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FrequencyEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatById_Feats_Items_Frequency_Frequency>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatById_Feats_Items_Frequency_FrequencyFromFrequencyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatById_Feats_Items_Traits_Trait>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatById_Feats_Items_Traits_TraitFromTraitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatById_Feats_Items_RollableEffect_RollableEffect>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatById_Feats_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPage_Feats_Items_Feat>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatsPage_Feats_Items_FeatFromFeatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatDetailsBlockEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPage_Feats_Items_Details_FeatDetailsBlock>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatsPage_Feats_Items_Details_FeatDetailsBlockFromFeatDetailsBlockEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageById_Languages_Items_Language>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageById_Languages_Items_LanguageFromLanguageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageById_Languages_Items_Races_Race>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageById_Languages_Items_Races_RaceFromRaceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPage_Languages_Items_Language>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguagesPage_Languages_Items_LanguageFromLanguageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeById_LanguageTypes_Items_LanguageType>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypeById_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeById_LanguageTypes_Items_Languages_Language>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypeById_LanguageTypes_Items_Languages_LanguageFromLanguageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPage_LanguageTypes_Items_LanguageType>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypesPage_LanguageTypes_Items_LanguageTypeFromLanguageTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentById_SpellComponents_Items_SpellComponent>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponentById_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentById_SpellComponents_Items_Spells_Spell>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponentById_SpellComponents_Items_Spells_SpellFromSpellEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponents_SpellComponents_Items_SpellComponent>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponents_SpellComponents_Items_SpellComponentFromSpellComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicEssenceEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssences_MagicEssences_Items_MagicEssence>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicEssences_MagicEssences_Items_MagicEssenceFromMagicEssenceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolById_MagicSchools_Items_MagicSchool>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchoolById_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolById_MagicSchools_Items_Spells_Spell>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchoolById_MagicSchools_Items_Spells_SpellFromSpellEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchools_MagicSchools_Items_MagicSchool>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchools_MagicSchools_Items_MagicSchoolFromMagicSchoolEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionById_MagicTraditions_Items_MagicTradition>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditionById_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionById_MagicTraditions_Items_Spells_Spell>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditionById_MagicTraditions_Items_Spells_SpellFromSpellEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditions_MagicTraditions_Items_MagicTradition>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditions_MagicTraditions_Items_MagicTraditionFromMagicTraditionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_Race>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_RaceFromRaceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_RaceSize_RaceSize>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_RaceSize_RaceSizeFromRaceSizeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_RaceRarity_RaceRarity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_RaceRarity_RaceRarityFromRaceRarityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_Languages_Language>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_Languages_LanguageFromLanguageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceTraitEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_RaceTraits_RaceTrait>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_RaceTraits_RaceTraitFromRaceTraitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_Heritages_Heritage>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_Heritages_HeritageFromHeritageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.LanguageTypeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_Languages_Type_LanguageType>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_Languages_Type_LanguageTypeFromLanguageTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.HeritageRarityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceById_Races_Items_Heritages_Rarity_HeritageRarity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceById_Races_Items_Heritages_Rarity_HeritageRarityFromHeritageRarityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPage_Races_Items_Race>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRacesPage_Races_Items_RaceFromRaceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceSizeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPage_Races_Items_Size_RaceSize>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRacesPage_Races_Items_Size_RaceSizeFromRaceSizeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RaceRarityEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPage_Races_Items_Rarity_RaceRarity>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRacesPage_Races_Items_Rarity_RaceRarityFromRaceRarityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Spell>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_SpellFromSpellEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.RollableEffectEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_RollableEffect_RollableEffect>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_RollableEffect_RollableEffectFromRollableEffectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicTraditionEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Traditions_MagicTradition>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Traditions_MagicTraditionFromMagicTraditionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellDetailBlockEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlock>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_AdditionalDetails_SpellDetailBlockFromSpellDetailBlockEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellComponentEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Components_SpellComponent>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Components_SpellComponentFromSpellComponentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Traits_Trait>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Traits_TraitFromTraitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Heightenings_SpellHeightening>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Heightenings_SpellHeighteningFromSpellHeighteningEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTriggerEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Triggers_SpellTrigger>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Triggers_SpellTriggerFromSpellTriggerEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellRequirementEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Requirements_SpellRequirement>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Requirements_SpellRequirementFromSpellRequirementEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellHeighteningDetailBlockEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlock>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellById_Spells_Items_Heightenings_Details_SpellHeighteningDetailBlockFromSpellHeighteningDetailBlockEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPage_Spells_Items_Spell>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellsPage_Spells_Items_SpellFromSpellEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SavingThrowStatEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStat>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellsPage_Spells_Items_SavingThrowStat_SavingThrowStatFromSavingThrowStatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.ActionTypeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPage_Spells_Items_ActionType_ActionType>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellsPage_Spells_Items_ActionType_ActionTypeFromActionTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitById_Traits_Items_Trait>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitById_Traits_Items_TraitFromTraitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.FeatEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitById_Traits_Items_Feats_Feat>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitById_Traits_Items_Feats_FeatFromFeatEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitById_Traits_Items_Spells_Spell>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitById_Traits_Items_Spells_SpellFromSpellEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.MagicSchoolEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchool>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitById_Traits_Items_Spells_MagicSchool_MagicSchoolFromMagicSchoolEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.SpellTypeEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitById_Traits_Items_Spells_SpellType_SpellType>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitById_Traits_Items_Spells_SpellType_SpellTypeFromSpellTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.TraitEntity, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPage_Traits_Items_Trait>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitsPage_Traits_Items_TraitFromTraitEntityMapper>(services);

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SortEnumTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ClassSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ProficiencySortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.MagicTraditionSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeitySortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.DeityCategorySortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.AlignmentSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.ActionTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FeatTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.FrequencySortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RollableEffectSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.LanguageTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceSizeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.RaceRaritySortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SpellTypeSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.SavingThrowStatSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.MagicSchoolSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.TraitSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(
                services,
                sp => new global::StrawberryShake.Serialization.SerializerResolver(
                    global::System.Linq.Enumerable.Concat(
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(
                            parentServices),
                        global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(
                            sp))));

            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassesPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetClassesPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetClassesPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetClassesPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeitiesPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeitiesPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeitiesPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeitiesPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoryByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoryByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoryByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoryByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoriesPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDeityCategoriesPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDeityCategoriesPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDeityCategoriesPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDivineFontsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetDivineFontsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetDivineFontsResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetDivineFontsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatsPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetFeatsPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetFeatsPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetFeatsPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguagesPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguagesPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguagesPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguagesPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypeByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypeByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypeByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypeByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypesPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetLanguageTypesPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetLanguageTypesPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetLanguageTypesPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponentByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponentByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicComponentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicComponentsResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicComponentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicEssencesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicEssencesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicEssencesResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicEssencesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchoolByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchoolByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchoolsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicSchoolsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicSchoolsResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicSchoolsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditionByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditionByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetMagicTraditionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetMagicTraditionsResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetMagicTraditionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRaceByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRaceByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRaceByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRacesPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetRacesPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetRacesPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetRacesPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellsPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetSpellsPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetSpellsPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetSpellsPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitByIdResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitsPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(
                services,
                sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.GetTraitsPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>>(
                services,
                sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>(
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.HttpConnection>(sp),
                    () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.IGetTraitsPageResult>>(sp),
                    global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp),
                    strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.GetTraitsPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Silvester.Pathfinder.Official.Web.Graphql.Generated.State.PathfinderOfficialApiEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Silvester.Pathfinder.Official.Web.Graphql.Generated.PathfinderOfficialApi>(services);
            return services;
        }

        private class ClientServiceProvider
            : System.IServiceProvider
            , System.IDisposable
        {
            private readonly System.IServiceProvider _provider;

            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}


// PathfinderOfficialApiStoreAccessor.cs
#nullable enable

namespace Silvester.Pathfinder.Official.Web.Graphql.Generated.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.1.0.0")]
    public partial class PathfinderOfficialApiStoreAccessor
        : global::StrawberryShake.StoreAccessor
    {
        public PathfinderOfficialApiStoreAccessor(
            global::StrawberryShake.IOperationStore operationStore,
            global::StrawberryShake.IEntityStore entityStore,
            global::StrawberryShake.IEntityIdSerializer entityIdSerializer,
            global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories,
            global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories)
            : base(
                operationStore,
                entityStore,
                entityIdSerializer,
                requestFactories,
                resultDataFactories)
        {
        }
    }
}


