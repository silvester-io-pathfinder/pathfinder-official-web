@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder
@using Silvester.Pathfinder.Official.Web.Shared.Tables
@using Silvester.Pathfinder.Official.Web.Graphql

<div>
    <GraphqlTable Model="@GetModel()" GetPage="@GetPage" TSortInput="DeitySortInput" TEntity="IDeitiesPage" />
</div>

@code {
    [Inject]
    public PathfinderOfficialApi PathfinderOfficialApi { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public TableModel<IDeitiesPage> GetModel()
    {
        return new TableBuilder<IDeitiesPage>()
        .AddTextColumn(e => e.Name, "Name", nameof(IDeitiesPage.Name), true)
        .AddTextColumn(e => e.Alignment.Name, "Alignment", nameof(IDeitiesPage.Alignment) + "." + nameof(IDeitiesPage_Alignment.Name))
        .AddTextColumn(e => e.Category.Name, "Category", nameof(IDeitiesPage.Category) + "." + nameof(IDeitiesPage_Category.Name))
        .AddTextColumn(e => e.Description, "Description", nameof(IPlanesPage.Description))
        .AddInspectColumn(NavigationManager, e => $"deities/{e.Id}")
        .Build();
    }

    public async Task<TableData<IDeitiesPage>> GetPage(DeitySortInput[] sortInputs, TableState state, string searchTerm)
    {
        IOperationResult<IGetDeitiesPageResult> result = await PathfinderOfficialApi.GetDeitiesPage
            .ExecuteAsync(state.Page * state.PageSize, state.PageSize, searchTerm, sortInputs);

        TableData<IDeitiesPage> page = new TableData<IDeitiesPage>()
        {
            TotalItems = result.Data!.Deities!.TotalCount,
            Items = result.Data!.Deities!.Items!
        };

        return page;
    }
}