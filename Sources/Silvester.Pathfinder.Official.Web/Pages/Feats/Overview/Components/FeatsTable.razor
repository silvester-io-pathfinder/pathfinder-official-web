@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder
@using Silvester.Pathfinder.Official.Web.Shared.Tables
@using Silvester.Pathfinder.Official.Web.Graphql
@using Silvester.Pathfinder.Official.Web.Services

<div>
    <GraphqlTable Model="@GetModel()" GetPage="@GetPage" TSortInput="FeatSortInput" TEntity="IFeatsPage" />
</div>

@code {
    [Inject]
    public PathfinderOfficialApi PathfinderOfficialApi { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public IActionTypeService ActionTypeService { get; set; } = default!;

    public TableModel<IFeatsPage> GetModel()
    {
        return new TableBuilder<IFeatsPage>()
        {
            Title = "Feats",
        }
        .AddIconColumn(e => ActionTypeService.GetActionTypeIcon(e.ActionType!.Name), "Action", nameof(IFeatsPage.ActionType) + "." + nameof(IFeatsPage_ActionType.Name))
        .AddTextColumn(e => e.Name, "Name", nameof(IFeatsPage.Name), true)
        .AddTextColumn(e => e.Level.ToString(), "Level", nameof(IFeatsPage.Name))
        .AddTextColumn(e => e.FeatType.Name, "Type", nameof(IFeatsPage.FeatType) + "." + nameof(IFeatsPage_FeatType.Name))
        .AddTextColumn(e => e.Details.FirstOrDefault()?.Text, "Description", nameof(IFeatsPage.Details) + "." + nameof(IFeatsPage_Details.Text), true)
        .AddInspectColumn(NavigationManager, e => $"feats/{e.Id}")
        .Build();
    }

    public async Task<TableData<IFeatsPage>> GetPage(FeatSortInput[] sortInputs, TableState state, string searchTerm)
    {
        IOperationResult<IGetFeatsPageResult> result = await PathfinderOfficialApi.GetFeatsPage
            .ExecuteAsync(state.Page * state.PageSize, state.PageSize, searchTerm, sortInputs);

        TableData<IFeatsPage> page = new TableData<IFeatsPage>()
        {
            TotalItems = result.Data!.Feats!.TotalCount,
            Items = result.Data!.Feats!.Items!
        };

        return page;
    }
}