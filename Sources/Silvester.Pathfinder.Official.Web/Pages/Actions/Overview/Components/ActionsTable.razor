@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder
@using Silvester.Pathfinder.Official.Web.Shared.Tables
@using Silvester.Pathfinder.Official.Web.Graphql
@using Silvester.Pathfinder.Official.Web.Services

<div>
    <GraphqlTable Model="@GetModel()" GetPage="@GetPage" TSortInput="ActionSortInput" TEntity="IActionsPage" />
</div>

@code {
    [Inject]
    public IActionTypeService ActionTypeService { get; set; } = default!;

    [Inject]
    public PathfinderOfficialApi PathfinderOfficialApi { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public TableModel<IActionsPage> GetModel()
    {
        return new TableBuilder<IActionsPage>()
        {
            Title = "Actions",
        }
        .AddIconColumn(e => ActionTypeService.GetActionTypeIcon(e.ActionType!.Name), "Action", nameof(IFeatsPage.ActionType) + "." + nameof(IFeatsPage_ActionType.Name))
        .AddTextColumn(e => e.Name, "Name", nameof(IActionsPage.Name), true)
        .AddTextColumn(e => e.Details.FirstOrDefault()?.Text, "Description", nameof(IActionsPage.Details) + "." + nameof(IActionsPage_Details.Text))
        .AddInspectColumn(NavigationManager, e => $"actions/{e.Id}")
        .Build();
    }

    public async Task<TableData<IActionsPage>> GetPage(ActionSortInput[] sortInputs, TableState state, string searchTerm)
    {
        IOperationResult<IGetActionsPageResult> result = await PathfinderOfficialApi.GetActionsPage
            .ExecuteAsync(state.Page * state.PageSize, state.PageSize, searchTerm, sortInputs);

        TableData<IActionsPage> page = new TableData<IActionsPage>()
        {
            TotalItems = result.Data!.Actions!.TotalCount,
            Items = result.Data!.Actions!.Items!
        };

        return page;
    }
}