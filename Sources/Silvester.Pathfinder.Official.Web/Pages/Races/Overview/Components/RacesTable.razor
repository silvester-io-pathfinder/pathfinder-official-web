@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder
@using Silvester.Pathfinder.Official.Web.Shared.Tables
@using Silvester.Pathfinder.Official.Web.Graphql

<div>
    <GraphqlTable Model="@GetModel()" GetPage="@GetPage" TSortInput="RaceSortInput" TEntity="IRacesPage" />
</div>

@code {
    [Inject]
    public PathfinderOfficialApi PathfinderOfficialApi { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public TableModel<IRacesPage> GetModel()
    {
        return new TableBuilder<IRacesPage>()
            .AddTextColumn(e => e.Name, "Name", nameof(IRacesPage.Name), true)
            .AddTextColumn(e => e.BaseSpeed.ToString(), "Base Speed", nameof(IRacesPage.BaseSpeed))
            .AddTextColumn(e => e.BaseHealth.ToString(), "Base Health", nameof(IRacesPage.BaseHealth))
            .AddTextColumn(e => e.Size.Name, "Size", nameof(IRacesPage.Size) + "." + nameof(IRacesPage_Size.Name))
            .AddTextColumn(e => e.Rarity.Name, "Rarity", nameof(IRacesPage.Rarity) + "." + nameof(IRacesPage_Rarity.Name))
            .AddTextColumn(e => e.Description, "Description", nameof(IRacesPage.Description))
            .AddInspectColumn(NavigationManager, e => $"races/{e.Id}")
            .Build();
    }

    public async Task<TableData<IRacesPage>> GetPage(RaceSortInput[] sortInputs, TableState state, string searchTerm)
    {
        IOperationResult<IGetRacesPageResult> result = await PathfinderOfficialApi.GetRacesPage
            .ExecuteAsync(state.Page * state.PageSize, state.PageSize, searchTerm, sortInputs);

        TableData<IRacesPage> page = new TableData<IRacesPage>()
        {
            TotalItems = result.Data!.Races!.TotalCount,
            Items = result.Data!.Races!.Items!
        };

        return page;
    }
}