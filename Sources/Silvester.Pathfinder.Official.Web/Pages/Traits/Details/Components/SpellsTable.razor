@using Silvester.Pathfinder.Official.Web.Services;
@using Silvester.Pathfinder.Official.Web.Shared.Preferences;
@using Silvester.Pathfinder.Official.Web.Shared.Cards;
@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder;
@using Silvester.Pathfinder.Official.Web.Shared.Tables;
@using Silvester.Pathfinder.Official.Web.Pages.Traits.Details.Components;
@using Silvester.Pathfinder.Official.Web.Shared.Fields;
@using System.Reflection;

<div>
    @if (Trait == null)
    {

    }
    else
    {
        <RelationshipTable TEntity="ITraitById_Spell" DefaultSortLabel="@nameof(ITraitById_Spell.Name)" Filter="@SpellsFilter" Items="@(() => Trait.Spells)" Model="GetModel()" />
    }
</div>

@code
{
    [Parameter]
    public ITraitById? Trait { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public IActionTypeService ActionTypeService { get; set; } = default!;

    public TableModel<ITraitById_Spell> GetModel()
    {
        return new TableBuilder<ITraitById_Spell>()
            .AddIconColumn(e => ActionTypeService.GetActionTypeIcon(e.ActionType!.Name), "Action", nameof(ITraitById_Spell.ActionType) + "." + nameof(ITraitById_Spell_ActionType.Name))
            .AddTextColumn(e => e.Name, "Name", nameof(ITraitById_Spell.Name), true)
            .AddTextColumn(e => e.MagicSchool.Name, "School", nameof(ITraitById_Spell.MagicSchool) + "." + nameof(ITraitById_Spell_MagicSchool.Name))
            .AddTextColumn(e => e.Level.ToString(), "Level", nameof(ITraitById_Spell.Level))
            .AddTextColumn(e => e.SpellType.Name, "Type", nameof(ITraitById_Spell.SpellType) + "." + nameof(ITraitById_Spell_Type.Name))
            .AddTextColumn(e => e.SavingThrowStat?.Name, "Saving Throw", nameof(ITraitById_Spell.SavingThrowStat) + "." + nameof(ITraitById_Spell_SavingThrowStat.Name))
            .AddTextColumn(e => e.Description, "Description", nameof(ITraitById_Spell.Description))
            .AddInspectColumn(NavigationManager, e => $"spells/{e.Id}")
            .Build();
    }

    public bool SpellsFilter(ITraitById_Spell spell, string searchString)
    {
        return spell.Name.ToLower().Contains(searchString);
    }
}