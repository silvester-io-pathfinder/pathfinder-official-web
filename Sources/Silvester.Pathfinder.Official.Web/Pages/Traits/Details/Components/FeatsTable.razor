@using Silvester.Pathfinder.Official.Web.Shared.Preferences;
@using Silvester.Pathfinder.Official.Web.Shared.Cards;
@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder;
@using Silvester.Pathfinder.Official.Web.Services;
@using Silvester.Pathfinder.Official.Web.Shared.Tables;
@using Silvester.Pathfinder.Official.Web.Pages.Traits.Details.Components;
@using Silvester.Pathfinder.Official.Web.Shared.Fields;
@using System.Reflection;

<div>
    @if (Trait == null)
    {

    }
    else
    {
        <RelationshipTable TEntity="ITraitById_Feat" DefaultSortLabel="@nameof(ITraitById_Feat.Name)" Filter="@FeatsFilter" Items="@(() => Trait.Feats)" Model="GetModel()" />
    }
</div>

@code
{
    [Parameter]
    public ITraitById? Trait { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public IActionTypeService ActionTypeService { get; set; } = default!;

    public TableModel<ITraitById_Feat> GetModel()
    {
        return new TableBuilder<ITraitById_Feat>()
            .AddIconColumn(e => ActionTypeService.GetActionTypeIcon(e.ActionType!.Name), "Action", nameof(ITraitById_Feat.ActionType) + "." + nameof(ITraitById_Feat_ActionType.Name))
            .AddTextColumn(e => e.Name, "Name", nameof(ITraitById_Feat.Name), true)
            .AddTextColumn(e => e.Level.ToString(), "Level", nameof(ITraitById_Feat.Name))
            .AddTextColumn(e => e.FeatType.Name, "Type", nameof(ITraitById_Feat.FeatType) + "." + nameof(ITraitById_Feat_FeatType.Name))
            .AddTextColumn(e => e.Details.FirstOrDefault()?.Text, "Description", nameof(ITraitById_Feat.Details) + "." + nameof(ITraitById_Feat_Details.Text), true)
            .AddInspectColumn(NavigationManager, e => $"feats/{e.Id}")
            .Build();
    }

    public bool FeatsFilter(ITraitById_Feat feat, string searchString)
    {
        return feat.Name.ToLower().Contains(searchString);
    }
}