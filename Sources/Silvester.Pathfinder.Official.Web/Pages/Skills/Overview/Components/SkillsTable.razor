@using Silvester.Pathfinder.Official.Web.Shared.Tables.Builder
@using Silvester.Pathfinder.Official.Web.Shared.Tables
@using Silvester.Pathfinder.Official.Web.Graphql

<div>
    <GraphqlTable Model="@GetModel()" GetPage="@GetPage" TSortInput="SkillSortInput" TEntity="ISkillsPage" />
</div>

@code {
    [Inject]
    public PathfinderOfficialApi PathfinderOfficialApi { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    public TableModel<ISkillsPage> GetModel()
    {
        return new TableBuilder<ISkillsPage>()
        {
            Title = "Skills",
        }
        .AddTextColumn(e => e.Name, "Name", nameof(ISkillsPage.Name), true)
        .AddTextColumn(e => e.StatModifier.Name, "Modifier", nameof(ISkillsPage.StatModifier) + "." + nameof(ISkillsPage_Stat.Name))
        .AddTextColumn(e => e.HasArmorCheckPenalty.ToString(), "AC Penalty", nameof(ISkillsPage.HasArmorCheckPenalty))
        .AddTextColumn(e => e.HasRecallKnowledgeAction.ToString(), "Recall Knowledge", nameof(ISkillsPage.HasRecallKnowledgeAction))
        .AddTextColumn(e => e.Description, "Description", nameof(ISkillsPage.Description))
        .AddInspectColumn(NavigationManager, e => $"skills/{e.Id}")
        .Build();
    }

    public async Task<TableData<ISkillsPage>> GetPage(SkillSortInput[] sortInputs, TableState state, string searchTerm)
    {
        IOperationResult<IGetSkillsPageResult> result = await PathfinderOfficialApi.GetSkillsPage
            .ExecuteAsync(state.Page * state.PageSize, state.PageSize, searchTerm, sortInputs);

        TableData<ISkillsPage> page = new TableData<ISkillsPage>()
        {
            TotalItems = result.Data!.Skills!.TotalCount,
            Items = result.Data!.Skills!.Items!
        };

        return page;
    }
}