@using Silvester.Pathfinder.Official.Web.Shared.Tables

@typeparam TEntity
@typeparam TSortInput

<div>
    <MudTable T="TEntity" RowsPerPage="@RowsPerPage" ServerData="@GetServerData" Dense="true" Hover="true" @ref="Table" Elevation="0">

        <ToolBarContent>
            <div style="display:flex; flex-direction: column; width: 100%;">
                @if(string.IsNullOrWhiteSpace(Title) == false)
                {
                    <div style="display:flex; flex-direction: row; padding-left: 16px; padding-right: 16px; padding-top:10px; padding-bottom:10px; border-bottom: 1px solid var(--mud-palette-table-lines);">
                        <MudText Typo="Typo.h6">@Title</MudText>
                        <MudToolBarSpacer />
                    </div>
                }
                <div>
                    <MudTextField T="string" Style="background-color: white; padding: 8px;" ValueChanged="@(text => OnSearch(text))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                </div>
            </div>
        </ToolBarContent>
        <HeaderContent>
            @Columns
            @if (IsLoading)
            {
                <div style="position: absolute; left:0; bottom: 0; transform: translateY(50%); width: 100%; z-index: 10;"><MudProgressLinear Color="Color.Primary" Indeterminate="true" /></div>
            }
        </HeaderContent>
        <RowTemplate>
            @Rows(context)
        </RowTemplate>
        <PagerContent>
            @if (IsEmpty)
            {
                <EmptyMessage />
            }
            else
            {
                <MudTablePager />
            }
        </PagerContent>
    </MudTable>
</div>

@code {
    [Parameter]
    public RenderFragment<TEntity> Rows { get; set; } = default!;

    [Parameter]
    public RenderFragment Columns { get; set; } = default!;

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public int RowsPerPage { get; set; } = 10;

    public string? SearchTerm { get; set; }

    public MudTable<TEntity>? Table { get; set; }

    private bool IsLoading { get; set; }

    private bool IsEmpty { get; set; }

    [Parameter]
    public Func<TSortInput[], TableState, string, Task<TableData<TEntity>>> GetPage { get; set; } = default!;

    public async Task<TableData<TEntity>> GetServerData(TableState state)
    {
        IsLoading = true;
        StateHasChanged();

        TableData<TEntity> result = await GetPage(GetSortInput(state), state, SearchTerm ?? "");

        IsEmpty = result.TotalItems == 0;
        IsLoading = false;
        StateHasChanged();

        return result;
    }

    public void OnSearch(string searchTerm)
    {
        SearchTerm = searchTerm;
        Table!.ReloadServerData();
    }

    private static TSortInput[] GetSortInput(TableState state)
    {
        if (string.IsNullOrWhiteSpace(state.SortLabel))
        {
            return Array.Empty<TSortInput>();
        }

        SortEnumType? sortDirection = GetSortEnumTypeFromDirection(state);
        if (sortDirection == null)
        {
            return Array.Empty<TSortInput>();
        }

        TSortInput sortInput = Activator.CreateInstance<TSortInput>();
        PropertyInfo sortProperty = typeof(TSortInput).GetProperty(state.SortLabel)!;
        sortProperty.SetValue(sortInput, sortDirection);

        return new[] { sortInput };
    }

    private static SortEnumType? GetSortEnumTypeFromDirection(TableState state)
    {
        return state.SortDirection switch
        {
            SortDirection.Ascending => SortEnumType.Asc,
            SortDirection.Descending => SortEnumType.Desc,
            _ => null
        };
    }
}