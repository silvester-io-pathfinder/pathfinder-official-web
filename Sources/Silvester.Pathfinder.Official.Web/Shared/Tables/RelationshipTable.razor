@using Silvester.Pathfinder.Official.Web.Shared.Preferences;
@using Silvester.Pathfinder.Official.Web.Shared.Cards;
@using Silvester.Pathfinder.Official.Web.Shared.Tables;
@using Silvester.Pathfinder.Official.Web.Pages.Traits.Details.Components;
@using Silvester.Pathfinder.Official.Web.Shared.Fields;
@using System.Reflection;

@typeparam TEntity

<div>
    @if (Items == null)
    {

    }
    else
    {
        <SearchBar OnSearch="@((text) => OnSearch(text))" />
        <MudTable Dense="true" Hover="true" ServerData="@(GetItems)" SortLabel="Sort By" @ref="@Table" Elevation="0">
            <HeaderContent>
                @Columns
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                @Rows(context)
                <MudTd>
                    <MudTooltip Text="Inspect">
                        <MudIconButton Size="Size.Small" OnClick="@(() => OnInspectClick(context))" Icon="@Icons.Material.Outlined.ArrowForward"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
        </MudTable>
        @if(IsEmpty)
        {
            <EmptyMessage />
        }
    }
</div>

@code
{
    [Parameter]
    public Func<IEnumerable<TEntity>> Items { get; set; } = default!;

    [Parameter]
    public Func<TEntity, string> InspectionUrl { get; set; } = default!;

    [Parameter]
    public Func<TEntity, string, bool> Filter { get; set; } = default!;

    [Parameter]
    public string? DefaultSortLabel { get; set; }

    [Parameter]
    public RenderFragment<TEntity> Rows { get; set; } = default!;

    [Parameter]
    public RenderFragment Columns { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    private string? SearchString { get; set; }

    private MudTable<TEntity>? Table { get; set; }

    private bool IsEmpty { get; set; }

    public void OnInspectClick(TEntity entity)
    {
        NavigationManager.NavigateTo(InspectionUrl.Invoke(entity));
    }

    public void OnSearch(string? searchString)
    {
        SearchString = searchString?.ToLower();
        Table!.ReloadServerData();
    }

    public Task<TableData<TEntity>> GetItems(TableState state)
    {
        IEnumerable<TEntity> items = Items.Invoke();
        if (items == null)
        {
            return Task.FromResult(new TableData<TEntity>
            {
                TotalItems = 0,
                Items = Array.Empty<TEntity>()
            });
        }

        string? sortPropertyName = string.IsNullOrWhiteSpace(state.SortLabel)
            ? DefaultSortLabel
            : state.SortLabel;

        TEntity[] processedItems = items
            .Where(entity => string.IsNullOrWhiteSpace(SearchString) || Filter.Invoke(entity, SearchString!))
            .OrderByDirection(state.SortDirection, (e) => GetDynamicPropertyValue(sortPropertyName, e))
            .ToArray();

        IsEmpty = processedItems.Length == 0;

        StateHasChanged();

        return Task.FromResult(new TableData<TEntity>
        {
            TotalItems = processedItems.Length,
            Items = processedItems
        });
    }

    public object GetDynamicPropertyValue(string? sortPropertyName, TEntity entity)
    {
        if (string.IsNullOrWhiteSpace(sortPropertyName))
        {
            return typeof(TEntity).GetProperties().First().GetValue(entity)!;
        }

        object currentValue = entity;
        foreach(string name in sortPropertyName.Split("."))
        {
            currentValue = currentValue.GetType().GetProperty(name)!.GetValue(currentValue)!;
        }

        return currentValue;
    }
}